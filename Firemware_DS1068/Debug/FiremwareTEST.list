
FiremwareTEST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005fe0  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000688  080060a0  080060a0  000160a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006728  08006728  000200f0  2**0
                  CONTENTS
  4 .ARM          00000000  08006728  08006728  000200f0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006728  08006728  000200f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006728  08006728  00016728  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800672c  0800672c  0001672c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000f0  20000000  08006730  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001d4  200000f0  08006820  000200f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002c4  08006820  000202c4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000200f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013b24  00000000  00000000  00020118  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000028bb  00000000  00000000  00033c3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001108  00000000  00000000  000364f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001000  00000000  00000000  00037600  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a62f  00000000  00000000  00038600  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015216  00000000  00000000  00052c2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00096d90  00000000  00000000  00067e45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000febd5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000419c  00000000  00000000  000fec28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200000f0 	.word	0x200000f0
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08006088 	.word	0x08006088

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200000f4 	.word	0x200000f4
 8000104:	08006088 	.word	0x08006088

08000108 <strcmp>:
 8000108:	7802      	ldrb	r2, [r0, #0]
 800010a:	780b      	ldrb	r3, [r1, #0]
 800010c:	2a00      	cmp	r2, #0
 800010e:	d003      	beq.n	8000118 <strcmp+0x10>
 8000110:	3001      	adds	r0, #1
 8000112:	3101      	adds	r1, #1
 8000114:	429a      	cmp	r2, r3
 8000116:	d0f7      	beq.n	8000108 <strcmp>
 8000118:	1ad0      	subs	r0, r2, r3
 800011a:	4770      	bx	lr

0800011c <strlen>:
 800011c:	2300      	movs	r3, #0
 800011e:	5cc2      	ldrb	r2, [r0, r3]
 8000120:	3301      	adds	r3, #1
 8000122:	2a00      	cmp	r2, #0
 8000124:	d1fb      	bne.n	800011e <strlen+0x2>
 8000126:	1e58      	subs	r0, r3, #1
 8000128:	4770      	bx	lr
	...

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	; 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f806 	bl	8000254 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			; (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__aeabi_idiv0>:
 8000254:	4770      	bx	lr
 8000256:	46c0      	nop			; (mov r8, r8)

08000258 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000258:	b580      	push	{r7, lr}
 800025a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800025c:	f001 fa50 	bl	8001700 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000260:	f000 f830 	bl	80002c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000264:	f000 f97e 	bl	8000564 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000268:	f000 f94c 	bl	8000504 <MX_USART2_UART_Init>
  MX_ADC_Init();
 800026c:	f000 f88a 	bl	8000384 <MX_ADC_Init>
  MX_I2C1_Init();
 8000270:	f000 f8e4 	bl	800043c <MX_I2C1_Init>
  MX_TIM14_Init();
 8000274:	f000 f922 	bl	80004bc <MX_TIM14_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Transmit_IT(&huart2,ligne1 ,strlen((char*)ligne1));
 8000278:	4b0e      	ldr	r3, [pc, #56]	; (80002b4 <main+0x5c>)
 800027a:	0018      	movs	r0, r3
 800027c:	f7ff ff4e 	bl	800011c <strlen>
 8000280:	0003      	movs	r3, r0
 8000282:	b29a      	uxth	r2, r3
 8000284:	490b      	ldr	r1, [pc, #44]	; (80002b4 <main+0x5c>)
 8000286:	4b0c      	ldr	r3, [pc, #48]	; (80002b8 <main+0x60>)
 8000288:	0018      	movs	r0, r3
 800028a:	f004 f817 	bl	80042bc <HAL_UART_Transmit_IT>
  HAL_Delay(1000);
 800028e:	23fa      	movs	r3, #250	; 0xfa
 8000290:	009b      	lsls	r3, r3, #2
 8000292:	0018      	movs	r0, r3
 8000294:	f001 fa98 	bl	80017c8 <HAL_Delay>
  //Scan_I2C();
  HAL_GPIO_WritePin(GPIOB, DA_TEST_Pin, GPIO_PIN_SET);
 8000298:	4b08      	ldr	r3, [pc, #32]	; (80002bc <main+0x64>)
 800029a:	2201      	movs	r2, #1
 800029c:	2110      	movs	r1, #16
 800029e:	0018      	movs	r0, r3
 80002a0:	f002 f944 	bl	800252c <HAL_GPIO_WritePin>
  ConfigDS1086 (1100) ;
 80002a4:	4b06      	ldr	r3, [pc, #24]	; (80002c0 <main+0x68>)
 80002a6:	0018      	movs	r0, r3
 80002a8:	f000 fb8e 	bl	80009c8 <ConfigDS1086>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  commendHandler ();
 80002ac:	f000 fe1e 	bl	8000eec <commendHandler>
 80002b0:	e7fc      	b.n	80002ac <main+0x54>
 80002b2:	46c0      	nop			; (mov r8, r8)
 80002b4:	20000000 	.word	0x20000000
 80002b8:	200001e0 	.word	0x200001e0
 80002bc:	48000400 	.word	0x48000400
 80002c0:	0000044c 	.word	0x0000044c

080002c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002c4:	b590      	push	{r4, r7, lr}
 80002c6:	b099      	sub	sp, #100	; 0x64
 80002c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002ca:	242c      	movs	r4, #44	; 0x2c
 80002cc:	193b      	adds	r3, r7, r4
 80002ce:	0018      	movs	r0, r3
 80002d0:	2334      	movs	r3, #52	; 0x34
 80002d2:	001a      	movs	r2, r3
 80002d4:	2100      	movs	r1, #0
 80002d6:	f005 fa65 	bl	80057a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002da:	231c      	movs	r3, #28
 80002dc:	18fb      	adds	r3, r7, r3
 80002de:	0018      	movs	r0, r3
 80002e0:	2310      	movs	r3, #16
 80002e2:	001a      	movs	r2, r3
 80002e4:	2100      	movs	r1, #0
 80002e6:	f005 fa5d 	bl	80057a4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002ea:	1d3b      	adds	r3, r7, #4
 80002ec:	0018      	movs	r0, r3
 80002ee:	2318      	movs	r3, #24
 80002f0:	001a      	movs	r2, r3
 80002f2:	2100      	movs	r1, #0
 80002f4:	f005 fa56 	bl	80057a4 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14
 80002f8:	0021      	movs	r1, r4
 80002fa:	187b      	adds	r3, r7, r1
 80002fc:	2232      	movs	r2, #50	; 0x32
 80002fe:	601a      	str	r2, [r3, #0]
                              |RCC_OSCILLATORTYPE_HSI48;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000300:	187b      	adds	r3, r7, r1
 8000302:	2201      	movs	r2, #1
 8000304:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000306:	187b      	adds	r3, r7, r1
 8000308:	2201      	movs	r2, #1
 800030a:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 800030c:	187b      	adds	r3, r7, r1
 800030e:	2201      	movs	r2, #1
 8000310:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000312:	187b      	adds	r3, r7, r1
 8000314:	2210      	movs	r2, #16
 8000316:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8000318:	187b      	adds	r3, r7, r1
 800031a:	2210      	movs	r2, #16
 800031c:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800031e:	187b      	adds	r3, r7, r1
 8000320:	2200      	movs	r2, #0
 8000322:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000324:	187b      	adds	r3, r7, r1
 8000326:	0018      	movs	r0, r3
 8000328:	f002 ff00 	bl	800312c <HAL_RCC_OscConfig>
 800032c:	1e03      	subs	r3, r0, #0
 800032e:	d001      	beq.n	8000334 <SystemClock_Config+0x70>
  {
    Error_Handler();
 8000330:	f000 f960 	bl	80005f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000334:	211c      	movs	r1, #28
 8000336:	187b      	adds	r3, r7, r1
 8000338:	2207      	movs	r2, #7
 800033a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 800033c:	187b      	adds	r3, r7, r1
 800033e:	2203      	movs	r2, #3
 8000340:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000342:	187b      	adds	r3, r7, r1
 8000344:	2200      	movs	r2, #0
 8000346:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000348:	187b      	adds	r3, r7, r1
 800034a:	2200      	movs	r2, #0
 800034c:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800034e:	187b      	adds	r3, r7, r1
 8000350:	2101      	movs	r1, #1
 8000352:	0018      	movs	r0, r3
 8000354:	f003 fa70 	bl	8003838 <HAL_RCC_ClockConfig>
 8000358:	1e03      	subs	r3, r0, #0
 800035a:	d001      	beq.n	8000360 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 800035c:	f000 f94a 	bl	80005f4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000360:	1d3b      	adds	r3, r7, #4
 8000362:	2220      	movs	r2, #32
 8000364:	601a      	str	r2, [r3, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000366:	1d3b      	adds	r3, r7, #4
 8000368:	2200      	movs	r2, #0
 800036a:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800036c:	1d3b      	adds	r3, r7, #4
 800036e:	0018      	movs	r0, r3
 8000370:	f003 fbdc 	bl	8003b2c <HAL_RCCEx_PeriphCLKConfig>
 8000374:	1e03      	subs	r3, r0, #0
 8000376:	d001      	beq.n	800037c <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8000378:	f000 f93c 	bl	80005f4 <Error_Handler>
  }
}
 800037c:	46c0      	nop			; (mov r8, r8)
 800037e:	46bd      	mov	sp, r7
 8000380:	b019      	add	sp, #100	; 0x64
 8000382:	bd90      	pop	{r4, r7, pc}

08000384 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8000384:	b580      	push	{r7, lr}
 8000386:	b084      	sub	sp, #16
 8000388:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800038a:	1d3b      	adds	r3, r7, #4
 800038c:	0018      	movs	r0, r3
 800038e:	230c      	movs	r3, #12
 8000390:	001a      	movs	r2, r3
 8000392:	2100      	movs	r1, #0
 8000394:	f005 fa06 	bl	80057a4 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8000398:	4b26      	ldr	r3, [pc, #152]	; (8000434 <MX_ADC_Init+0xb0>)
 800039a:	4a27      	ldr	r2, [pc, #156]	; (8000438 <MX_ADC_Init+0xb4>)
 800039c:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800039e:	4b25      	ldr	r3, [pc, #148]	; (8000434 <MX_ADC_Init+0xb0>)
 80003a0:	2200      	movs	r2, #0
 80003a2:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80003a4:	4b23      	ldr	r3, [pc, #140]	; (8000434 <MX_ADC_Init+0xb0>)
 80003a6:	2200      	movs	r2, #0
 80003a8:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80003aa:	4b22      	ldr	r3, [pc, #136]	; (8000434 <MX_ADC_Init+0xb0>)
 80003ac:	2200      	movs	r2, #0
 80003ae:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 80003b0:	4b20      	ldr	r3, [pc, #128]	; (8000434 <MX_ADC_Init+0xb0>)
 80003b2:	2201      	movs	r2, #1
 80003b4:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80003b6:	4b1f      	ldr	r3, [pc, #124]	; (8000434 <MX_ADC_Init+0xb0>)
 80003b8:	2204      	movs	r2, #4
 80003ba:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 80003bc:	4b1d      	ldr	r3, [pc, #116]	; (8000434 <MX_ADC_Init+0xb0>)
 80003be:	2200      	movs	r2, #0
 80003c0:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 80003c2:	4b1c      	ldr	r3, [pc, #112]	; (8000434 <MX_ADC_Init+0xb0>)
 80003c4:	2200      	movs	r2, #0
 80003c6:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 80003c8:	4b1a      	ldr	r3, [pc, #104]	; (8000434 <MX_ADC_Init+0xb0>)
 80003ca:	2200      	movs	r2, #0
 80003cc:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80003ce:	4b19      	ldr	r3, [pc, #100]	; (8000434 <MX_ADC_Init+0xb0>)
 80003d0:	2200      	movs	r2, #0
 80003d2:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80003d4:	4b17      	ldr	r3, [pc, #92]	; (8000434 <MX_ADC_Init+0xb0>)
 80003d6:	22c2      	movs	r2, #194	; 0xc2
 80003d8:	32ff      	adds	r2, #255	; 0xff
 80003da:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80003dc:	4b15      	ldr	r3, [pc, #84]	; (8000434 <MX_ADC_Init+0xb0>)
 80003de:	2200      	movs	r2, #0
 80003e0:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 80003e2:	4b14      	ldr	r3, [pc, #80]	; (8000434 <MX_ADC_Init+0xb0>)
 80003e4:	2224      	movs	r2, #36	; 0x24
 80003e6:	2100      	movs	r1, #0
 80003e8:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80003ea:	4b12      	ldr	r3, [pc, #72]	; (8000434 <MX_ADC_Init+0xb0>)
 80003ec:	2201      	movs	r2, #1
 80003ee:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80003f0:	4b10      	ldr	r3, [pc, #64]	; (8000434 <MX_ADC_Init+0xb0>)
 80003f2:	0018      	movs	r0, r3
 80003f4:	f001 fa0c 	bl	8001810 <HAL_ADC_Init>
 80003f8:	1e03      	subs	r3, r0, #0
 80003fa:	d001      	beq.n	8000400 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 80003fc:	f000 f8fa 	bl	80005f4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000400:	1d3b      	adds	r3, r7, #4
 8000402:	2208      	movs	r2, #8
 8000404:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000406:	1d3b      	adds	r3, r7, #4
 8000408:	2280      	movs	r2, #128	; 0x80
 800040a:	0152      	lsls	r2, r2, #5
 800040c:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800040e:	1d3b      	adds	r3, r7, #4
 8000410:	2280      	movs	r2, #128	; 0x80
 8000412:	0552      	lsls	r2, r2, #21
 8000414:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000416:	1d3a      	adds	r2, r7, #4
 8000418:	4b06      	ldr	r3, [pc, #24]	; (8000434 <MX_ADC_Init+0xb0>)
 800041a:	0011      	movs	r1, r2
 800041c:	0018      	movs	r0, r3
 800041e:	f001 fc2f 	bl	8001c80 <HAL_ADC_ConfigChannel>
 8000422:	1e03      	subs	r3, r0, #0
 8000424:	d001      	beq.n	800042a <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 8000426:	f000 f8e5 	bl	80005f4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 800042a:	46c0      	nop			; (mov r8, r8)
 800042c:	46bd      	mov	sp, r7
 800042e:	b004      	add	sp, #16
 8000430:	bd80      	pop	{r7, pc}
 8000432:	46c0      	nop			; (mov r8, r8)
 8000434:	2000010c 	.word	0x2000010c
 8000438:	40012400 	.word	0x40012400

0800043c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800043c:	b580      	push	{r7, lr}
 800043e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000440:	4b1b      	ldr	r3, [pc, #108]	; (80004b0 <MX_I2C1_Init+0x74>)
 8000442:	4a1c      	ldr	r2, [pc, #112]	; (80004b4 <MX_I2C1_Init+0x78>)
 8000444:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8000446:	4b1a      	ldr	r3, [pc, #104]	; (80004b0 <MX_I2C1_Init+0x74>)
 8000448:	4a1b      	ldr	r2, [pc, #108]	; (80004b8 <MX_I2C1_Init+0x7c>)
 800044a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800044c:	4b18      	ldr	r3, [pc, #96]	; (80004b0 <MX_I2C1_Init+0x74>)
 800044e:	2200      	movs	r2, #0
 8000450:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000452:	4b17      	ldr	r3, [pc, #92]	; (80004b0 <MX_I2C1_Init+0x74>)
 8000454:	2201      	movs	r2, #1
 8000456:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000458:	4b15      	ldr	r3, [pc, #84]	; (80004b0 <MX_I2C1_Init+0x74>)
 800045a:	2200      	movs	r2, #0
 800045c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800045e:	4b14      	ldr	r3, [pc, #80]	; (80004b0 <MX_I2C1_Init+0x74>)
 8000460:	2200      	movs	r2, #0
 8000462:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000464:	4b12      	ldr	r3, [pc, #72]	; (80004b0 <MX_I2C1_Init+0x74>)
 8000466:	2200      	movs	r2, #0
 8000468:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800046a:	4b11      	ldr	r3, [pc, #68]	; (80004b0 <MX_I2C1_Init+0x74>)
 800046c:	2200      	movs	r2, #0
 800046e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000470:	4b0f      	ldr	r3, [pc, #60]	; (80004b0 <MX_I2C1_Init+0x74>)
 8000472:	2200      	movs	r2, #0
 8000474:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000476:	4b0e      	ldr	r3, [pc, #56]	; (80004b0 <MX_I2C1_Init+0x74>)
 8000478:	0018      	movs	r0, r3
 800047a:	f002 f875 	bl	8002568 <HAL_I2C_Init>
 800047e:	1e03      	subs	r3, r0, #0
 8000480:	d001      	beq.n	8000486 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000482:	f000 f8b7 	bl	80005f4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000486:	4b0a      	ldr	r3, [pc, #40]	; (80004b0 <MX_I2C1_Init+0x74>)
 8000488:	2100      	movs	r1, #0
 800048a:	0018      	movs	r0, r3
 800048c:	f002 fdb6 	bl	8002ffc <HAL_I2CEx_ConfigAnalogFilter>
 8000490:	1e03      	subs	r3, r0, #0
 8000492:	d001      	beq.n	8000498 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000494:	f000 f8ae 	bl	80005f4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000498:	4b05      	ldr	r3, [pc, #20]	; (80004b0 <MX_I2C1_Init+0x74>)
 800049a:	2100      	movs	r1, #0
 800049c:	0018      	movs	r0, r3
 800049e:	f002 fdf9 	bl	8003094 <HAL_I2CEx_ConfigDigitalFilter>
 80004a2:	1e03      	subs	r3, r0, #0
 80004a4:	d001      	beq.n	80004aa <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80004a6:	f000 f8a5 	bl	80005f4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80004aa:	46c0      	nop			; (mov r8, r8)
 80004ac:	46bd      	mov	sp, r7
 80004ae:	bd80      	pop	{r7, pc}
 80004b0:	2000014c 	.word	0x2000014c
 80004b4:	40005400 	.word	0x40005400
 80004b8:	2000090e 	.word	0x2000090e

080004bc <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 80004bc:	b580      	push	{r7, lr}
 80004be:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 80004c0:	4b0e      	ldr	r3, [pc, #56]	; (80004fc <MX_TIM14_Init+0x40>)
 80004c2:	4a0f      	ldr	r2, [pc, #60]	; (8000500 <MX_TIM14_Init+0x44>)
 80004c4:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 47;
 80004c6:	4b0d      	ldr	r3, [pc, #52]	; (80004fc <MX_TIM14_Init+0x40>)
 80004c8:	222f      	movs	r2, #47	; 0x2f
 80004ca:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004cc:	4b0b      	ldr	r3, [pc, #44]	; (80004fc <MX_TIM14_Init+0x40>)
 80004ce:	2200      	movs	r2, #0
 80004d0:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 10;
 80004d2:	4b0a      	ldr	r3, [pc, #40]	; (80004fc <MX_TIM14_Init+0x40>)
 80004d4:	220a      	movs	r2, #10
 80004d6:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80004d8:	4b08      	ldr	r3, [pc, #32]	; (80004fc <MX_TIM14_Init+0x40>)
 80004da:	2200      	movs	r2, #0
 80004dc:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80004de:	4b07      	ldr	r3, [pc, #28]	; (80004fc <MX_TIM14_Init+0x40>)
 80004e0:	2200      	movs	r2, #0
 80004e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 80004e4:	4b05      	ldr	r3, [pc, #20]	; (80004fc <MX_TIM14_Init+0x40>)
 80004e6:	0018      	movs	r0, r3
 80004e8:	f003 fc0e 	bl	8003d08 <HAL_TIM_Base_Init>
 80004ec:	1e03      	subs	r3, r0, #0
 80004ee:	d001      	beq.n	80004f4 <MX_TIM14_Init+0x38>
  {
    Error_Handler();
 80004f0:	f000 f880 	bl	80005f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 80004f4:	46c0      	nop			; (mov r8, r8)
 80004f6:	46bd      	mov	sp, r7
 80004f8:	bd80      	pop	{r7, pc}
 80004fa:	46c0      	nop			; (mov r8, r8)
 80004fc:	20000198 	.word	0x20000198
 8000500:	40002000 	.word	0x40002000

08000504 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000508:	4b14      	ldr	r3, [pc, #80]	; (800055c <MX_USART2_UART_Init+0x58>)
 800050a:	4a15      	ldr	r2, [pc, #84]	; (8000560 <MX_USART2_UART_Init+0x5c>)
 800050c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800050e:	4b13      	ldr	r3, [pc, #76]	; (800055c <MX_USART2_UART_Init+0x58>)
 8000510:	22e1      	movs	r2, #225	; 0xe1
 8000512:	0252      	lsls	r2, r2, #9
 8000514:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000516:	4b11      	ldr	r3, [pc, #68]	; (800055c <MX_USART2_UART_Init+0x58>)
 8000518:	2200      	movs	r2, #0
 800051a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800051c:	4b0f      	ldr	r3, [pc, #60]	; (800055c <MX_USART2_UART_Init+0x58>)
 800051e:	2200      	movs	r2, #0
 8000520:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000522:	4b0e      	ldr	r3, [pc, #56]	; (800055c <MX_USART2_UART_Init+0x58>)
 8000524:	2200      	movs	r2, #0
 8000526:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000528:	4b0c      	ldr	r3, [pc, #48]	; (800055c <MX_USART2_UART_Init+0x58>)
 800052a:	220c      	movs	r2, #12
 800052c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800052e:	4b0b      	ldr	r3, [pc, #44]	; (800055c <MX_USART2_UART_Init+0x58>)
 8000530:	2200      	movs	r2, #0
 8000532:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000534:	4b09      	ldr	r3, [pc, #36]	; (800055c <MX_USART2_UART_Init+0x58>)
 8000536:	2200      	movs	r2, #0
 8000538:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800053a:	4b08      	ldr	r3, [pc, #32]	; (800055c <MX_USART2_UART_Init+0x58>)
 800053c:	2200      	movs	r2, #0
 800053e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000540:	4b06      	ldr	r3, [pc, #24]	; (800055c <MX_USART2_UART_Init+0x58>)
 8000542:	2200      	movs	r2, #0
 8000544:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000546:	4b05      	ldr	r3, [pc, #20]	; (800055c <MX_USART2_UART_Init+0x58>)
 8000548:	0018      	movs	r0, r3
 800054a:	f003 fe63 	bl	8004214 <HAL_UART_Init>
 800054e:	1e03      	subs	r3, r0, #0
 8000550:	d001      	beq.n	8000556 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000552:	f000 f84f 	bl	80005f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000556:	46c0      	nop			; (mov r8, r8)
 8000558:	46bd      	mov	sp, r7
 800055a:	bd80      	pop	{r7, pc}
 800055c:	200001e0 	.word	0x200001e0
 8000560:	40004400 	.word	0x40004400

08000564 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000564:	b590      	push	{r4, r7, lr}
 8000566:	b089      	sub	sp, #36	; 0x24
 8000568:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800056a:	240c      	movs	r4, #12
 800056c:	193b      	adds	r3, r7, r4
 800056e:	0018      	movs	r0, r3
 8000570:	2314      	movs	r3, #20
 8000572:	001a      	movs	r2, r3
 8000574:	2100      	movs	r1, #0
 8000576:	f005 f915 	bl	80057a4 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800057a:	4b1c      	ldr	r3, [pc, #112]	; (80005ec <MX_GPIO_Init+0x88>)
 800057c:	695a      	ldr	r2, [r3, #20]
 800057e:	4b1b      	ldr	r3, [pc, #108]	; (80005ec <MX_GPIO_Init+0x88>)
 8000580:	2180      	movs	r1, #128	; 0x80
 8000582:	0289      	lsls	r1, r1, #10
 8000584:	430a      	orrs	r2, r1
 8000586:	615a      	str	r2, [r3, #20]
 8000588:	4b18      	ldr	r3, [pc, #96]	; (80005ec <MX_GPIO_Init+0x88>)
 800058a:	695a      	ldr	r2, [r3, #20]
 800058c:	2380      	movs	r3, #128	; 0x80
 800058e:	029b      	lsls	r3, r3, #10
 8000590:	4013      	ands	r3, r2
 8000592:	60bb      	str	r3, [r7, #8]
 8000594:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000596:	4b15      	ldr	r3, [pc, #84]	; (80005ec <MX_GPIO_Init+0x88>)
 8000598:	695a      	ldr	r2, [r3, #20]
 800059a:	4b14      	ldr	r3, [pc, #80]	; (80005ec <MX_GPIO_Init+0x88>)
 800059c:	2180      	movs	r1, #128	; 0x80
 800059e:	02c9      	lsls	r1, r1, #11
 80005a0:	430a      	orrs	r2, r1
 80005a2:	615a      	str	r2, [r3, #20]
 80005a4:	4b11      	ldr	r3, [pc, #68]	; (80005ec <MX_GPIO_Init+0x88>)
 80005a6:	695a      	ldr	r2, [r3, #20]
 80005a8:	2380      	movs	r3, #128	; 0x80
 80005aa:	02db      	lsls	r3, r3, #11
 80005ac:	4013      	ands	r3, r2
 80005ae:	607b      	str	r3, [r7, #4]
 80005b0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DA_DISCH_Pin|DA_TEST_Pin, GPIO_PIN_RESET);
 80005b2:	4b0f      	ldr	r3, [pc, #60]	; (80005f0 <MX_GPIO_Init+0x8c>)
 80005b4:	2200      	movs	r2, #0
 80005b6:	2112      	movs	r1, #18
 80005b8:	0018      	movs	r0, r3
 80005ba:	f001 ffb7 	bl	800252c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DA_DISCH_Pin DA_TEST_Pin */
  GPIO_InitStruct.Pin = DA_DISCH_Pin|DA_TEST_Pin;
 80005be:	0021      	movs	r1, r4
 80005c0:	187b      	adds	r3, r7, r1
 80005c2:	2212      	movs	r2, #18
 80005c4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005c6:	187b      	adds	r3, r7, r1
 80005c8:	2201      	movs	r2, #1
 80005ca:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005cc:	187b      	adds	r3, r7, r1
 80005ce:	2200      	movs	r2, #0
 80005d0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005d2:	187b      	adds	r3, r7, r1
 80005d4:	2200      	movs	r2, #0
 80005d6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005d8:	187b      	adds	r3, r7, r1
 80005da:	4a05      	ldr	r2, [pc, #20]	; (80005f0 <MX_GPIO_Init+0x8c>)
 80005dc:	0019      	movs	r1, r3
 80005de:	0010      	movs	r0, r2
 80005e0:	f001 fe3c 	bl	800225c <HAL_GPIO_Init>

}
 80005e4:	46c0      	nop			; (mov r8, r8)
 80005e6:	46bd      	mov	sp, r7
 80005e8:	b009      	add	sp, #36	; 0x24
 80005ea:	bd90      	pop	{r4, r7, pc}
 80005ec:	40021000 	.word	0x40021000
 80005f0:	48000400 	.word	0x48000400

080005f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005f8:	b672      	cpsid	i
}
 80005fa:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005fc:	e7fe      	b.n	80005fc <Error_Handler+0x8>
	...

08000600 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b082      	sub	sp, #8
 8000604:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000606:	4b0f      	ldr	r3, [pc, #60]	; (8000644 <HAL_MspInit+0x44>)
 8000608:	699a      	ldr	r2, [r3, #24]
 800060a:	4b0e      	ldr	r3, [pc, #56]	; (8000644 <HAL_MspInit+0x44>)
 800060c:	2101      	movs	r1, #1
 800060e:	430a      	orrs	r2, r1
 8000610:	619a      	str	r2, [r3, #24]
 8000612:	4b0c      	ldr	r3, [pc, #48]	; (8000644 <HAL_MspInit+0x44>)
 8000614:	699b      	ldr	r3, [r3, #24]
 8000616:	2201      	movs	r2, #1
 8000618:	4013      	ands	r3, r2
 800061a:	607b      	str	r3, [r7, #4]
 800061c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800061e:	4b09      	ldr	r3, [pc, #36]	; (8000644 <HAL_MspInit+0x44>)
 8000620:	69da      	ldr	r2, [r3, #28]
 8000622:	4b08      	ldr	r3, [pc, #32]	; (8000644 <HAL_MspInit+0x44>)
 8000624:	2180      	movs	r1, #128	; 0x80
 8000626:	0549      	lsls	r1, r1, #21
 8000628:	430a      	orrs	r2, r1
 800062a:	61da      	str	r2, [r3, #28]
 800062c:	4b05      	ldr	r3, [pc, #20]	; (8000644 <HAL_MspInit+0x44>)
 800062e:	69da      	ldr	r2, [r3, #28]
 8000630:	2380      	movs	r3, #128	; 0x80
 8000632:	055b      	lsls	r3, r3, #21
 8000634:	4013      	ands	r3, r2
 8000636:	603b      	str	r3, [r7, #0]
 8000638:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800063a:	46c0      	nop			; (mov r8, r8)
 800063c:	46bd      	mov	sp, r7
 800063e:	b002      	add	sp, #8
 8000640:	bd80      	pop	{r7, pc}
 8000642:	46c0      	nop			; (mov r8, r8)
 8000644:	40021000 	.word	0x40021000

08000648 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000648:	b590      	push	{r4, r7, lr}
 800064a:	b08b      	sub	sp, #44	; 0x2c
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000650:	2414      	movs	r4, #20
 8000652:	193b      	adds	r3, r7, r4
 8000654:	0018      	movs	r0, r3
 8000656:	2314      	movs	r3, #20
 8000658:	001a      	movs	r2, r3
 800065a:	2100      	movs	r1, #0
 800065c:	f005 f8a2 	bl	80057a4 <memset>
  if(hadc->Instance==ADC1)
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	4a18      	ldr	r2, [pc, #96]	; (80006c8 <HAL_ADC_MspInit+0x80>)
 8000666:	4293      	cmp	r3, r2
 8000668:	d12a      	bne.n	80006c0 <HAL_ADC_MspInit+0x78>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800066a:	4b18      	ldr	r3, [pc, #96]	; (80006cc <HAL_ADC_MspInit+0x84>)
 800066c:	699a      	ldr	r2, [r3, #24]
 800066e:	4b17      	ldr	r3, [pc, #92]	; (80006cc <HAL_ADC_MspInit+0x84>)
 8000670:	2180      	movs	r1, #128	; 0x80
 8000672:	0089      	lsls	r1, r1, #2
 8000674:	430a      	orrs	r2, r1
 8000676:	619a      	str	r2, [r3, #24]
 8000678:	4b14      	ldr	r3, [pc, #80]	; (80006cc <HAL_ADC_MspInit+0x84>)
 800067a:	699a      	ldr	r2, [r3, #24]
 800067c:	2380      	movs	r3, #128	; 0x80
 800067e:	009b      	lsls	r3, r3, #2
 8000680:	4013      	ands	r3, r2
 8000682:	613b      	str	r3, [r7, #16]
 8000684:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000686:	4b11      	ldr	r3, [pc, #68]	; (80006cc <HAL_ADC_MspInit+0x84>)
 8000688:	695a      	ldr	r2, [r3, #20]
 800068a:	4b10      	ldr	r3, [pc, #64]	; (80006cc <HAL_ADC_MspInit+0x84>)
 800068c:	2180      	movs	r1, #128	; 0x80
 800068e:	02c9      	lsls	r1, r1, #11
 8000690:	430a      	orrs	r2, r1
 8000692:	615a      	str	r2, [r3, #20]
 8000694:	4b0d      	ldr	r3, [pc, #52]	; (80006cc <HAL_ADC_MspInit+0x84>)
 8000696:	695a      	ldr	r2, [r3, #20]
 8000698:	2380      	movs	r3, #128	; 0x80
 800069a:	02db      	lsls	r3, r3, #11
 800069c:	4013      	ands	r3, r2
 800069e:	60fb      	str	r3, [r7, #12]
 80006a0:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PB0     ------> ADC_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80006a2:	193b      	adds	r3, r7, r4
 80006a4:	2201      	movs	r2, #1
 80006a6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006a8:	193b      	adds	r3, r7, r4
 80006aa:	2203      	movs	r2, #3
 80006ac:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ae:	193b      	adds	r3, r7, r4
 80006b0:	2200      	movs	r2, #0
 80006b2:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006b4:	193b      	adds	r3, r7, r4
 80006b6:	4a06      	ldr	r2, [pc, #24]	; (80006d0 <HAL_ADC_MspInit+0x88>)
 80006b8:	0019      	movs	r1, r3
 80006ba:	0010      	movs	r0, r2
 80006bc:	f001 fdce 	bl	800225c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80006c0:	46c0      	nop			; (mov r8, r8)
 80006c2:	46bd      	mov	sp, r7
 80006c4:	b00b      	add	sp, #44	; 0x2c
 80006c6:	bd90      	pop	{r4, r7, pc}
 80006c8:	40012400 	.word	0x40012400
 80006cc:	40021000 	.word	0x40021000
 80006d0:	48000400 	.word	0x48000400

080006d4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80006d4:	b590      	push	{r4, r7, lr}
 80006d6:	b08b      	sub	sp, #44	; 0x2c
 80006d8:	af00      	add	r7, sp, #0
 80006da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006dc:	2414      	movs	r4, #20
 80006de:	193b      	adds	r3, r7, r4
 80006e0:	0018      	movs	r0, r3
 80006e2:	2314      	movs	r3, #20
 80006e4:	001a      	movs	r2, r3
 80006e6:	2100      	movs	r1, #0
 80006e8:	f005 f85c 	bl	80057a4 <memset>
  if(hi2c->Instance==I2C1)
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	4a1c      	ldr	r2, [pc, #112]	; (8000764 <HAL_I2C_MspInit+0x90>)
 80006f2:	4293      	cmp	r3, r2
 80006f4:	d131      	bne.n	800075a <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006f6:	4b1c      	ldr	r3, [pc, #112]	; (8000768 <HAL_I2C_MspInit+0x94>)
 80006f8:	695a      	ldr	r2, [r3, #20]
 80006fa:	4b1b      	ldr	r3, [pc, #108]	; (8000768 <HAL_I2C_MspInit+0x94>)
 80006fc:	2180      	movs	r1, #128	; 0x80
 80006fe:	02c9      	lsls	r1, r1, #11
 8000700:	430a      	orrs	r2, r1
 8000702:	615a      	str	r2, [r3, #20]
 8000704:	4b18      	ldr	r3, [pc, #96]	; (8000768 <HAL_I2C_MspInit+0x94>)
 8000706:	695a      	ldr	r2, [r3, #20]
 8000708:	2380      	movs	r3, #128	; 0x80
 800070a:	02db      	lsls	r3, r3, #11
 800070c:	4013      	ands	r3, r2
 800070e:	613b      	str	r3, [r7, #16]
 8000710:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000712:	0021      	movs	r1, r4
 8000714:	187b      	adds	r3, r7, r1
 8000716:	22c0      	movs	r2, #192	; 0xc0
 8000718:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800071a:	187b      	adds	r3, r7, r1
 800071c:	2212      	movs	r2, #18
 800071e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000720:	187b      	adds	r3, r7, r1
 8000722:	2201      	movs	r2, #1
 8000724:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000726:	187b      	adds	r3, r7, r1
 8000728:	2203      	movs	r2, #3
 800072a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 800072c:	187b      	adds	r3, r7, r1
 800072e:	2201      	movs	r2, #1
 8000730:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000732:	187b      	adds	r3, r7, r1
 8000734:	4a0d      	ldr	r2, [pc, #52]	; (800076c <HAL_I2C_MspInit+0x98>)
 8000736:	0019      	movs	r1, r3
 8000738:	0010      	movs	r0, r2
 800073a:	f001 fd8f 	bl	800225c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800073e:	4b0a      	ldr	r3, [pc, #40]	; (8000768 <HAL_I2C_MspInit+0x94>)
 8000740:	69da      	ldr	r2, [r3, #28]
 8000742:	4b09      	ldr	r3, [pc, #36]	; (8000768 <HAL_I2C_MspInit+0x94>)
 8000744:	2180      	movs	r1, #128	; 0x80
 8000746:	0389      	lsls	r1, r1, #14
 8000748:	430a      	orrs	r2, r1
 800074a:	61da      	str	r2, [r3, #28]
 800074c:	4b06      	ldr	r3, [pc, #24]	; (8000768 <HAL_I2C_MspInit+0x94>)
 800074e:	69da      	ldr	r2, [r3, #28]
 8000750:	2380      	movs	r3, #128	; 0x80
 8000752:	039b      	lsls	r3, r3, #14
 8000754:	4013      	ands	r3, r2
 8000756:	60fb      	str	r3, [r7, #12]
 8000758:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800075a:	46c0      	nop			; (mov r8, r8)
 800075c:	46bd      	mov	sp, r7
 800075e:	b00b      	add	sp, #44	; 0x2c
 8000760:	bd90      	pop	{r4, r7, pc}
 8000762:	46c0      	nop			; (mov r8, r8)
 8000764:	40005400 	.word	0x40005400
 8000768:	40021000 	.word	0x40021000
 800076c:	48000400 	.word	0x48000400

08000770 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b084      	sub	sp, #16
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	4a0e      	ldr	r2, [pc, #56]	; (80007b8 <HAL_TIM_Base_MspInit+0x48>)
 800077e:	4293      	cmp	r3, r2
 8000780:	d115      	bne.n	80007ae <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 8000782:	4b0e      	ldr	r3, [pc, #56]	; (80007bc <HAL_TIM_Base_MspInit+0x4c>)
 8000784:	69da      	ldr	r2, [r3, #28]
 8000786:	4b0d      	ldr	r3, [pc, #52]	; (80007bc <HAL_TIM_Base_MspInit+0x4c>)
 8000788:	2180      	movs	r1, #128	; 0x80
 800078a:	0049      	lsls	r1, r1, #1
 800078c:	430a      	orrs	r2, r1
 800078e:	61da      	str	r2, [r3, #28]
 8000790:	4b0a      	ldr	r3, [pc, #40]	; (80007bc <HAL_TIM_Base_MspInit+0x4c>)
 8000792:	69da      	ldr	r2, [r3, #28]
 8000794:	2380      	movs	r3, #128	; 0x80
 8000796:	005b      	lsls	r3, r3, #1
 8000798:	4013      	ands	r3, r2
 800079a:	60fb      	str	r3, [r7, #12]
 800079c:	68fb      	ldr	r3, [r7, #12]
    /* TIM14 interrupt Init */
    HAL_NVIC_SetPriority(TIM14_IRQn, 0, 0);
 800079e:	2200      	movs	r2, #0
 80007a0:	2100      	movs	r1, #0
 80007a2:	2013      	movs	r0, #19
 80007a4:	f001 fcaa 	bl	80020fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
 80007a8:	2013      	movs	r0, #19
 80007aa:	f001 fcbc 	bl	8002126 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 80007ae:	46c0      	nop			; (mov r8, r8)
 80007b0:	46bd      	mov	sp, r7
 80007b2:	b004      	add	sp, #16
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	46c0      	nop			; (mov r8, r8)
 80007b8:	40002000 	.word	0x40002000
 80007bc:	40021000 	.word	0x40021000

080007c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80007c0:	b590      	push	{r4, r7, lr}
 80007c2:	b08b      	sub	sp, #44	; 0x2c
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007c8:	2414      	movs	r4, #20
 80007ca:	193b      	adds	r3, r7, r4
 80007cc:	0018      	movs	r0, r3
 80007ce:	2314      	movs	r3, #20
 80007d0:	001a      	movs	r2, r3
 80007d2:	2100      	movs	r1, #0
 80007d4:	f004 ffe6 	bl	80057a4 <memset>
  if(huart->Instance==USART2)
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	4a20      	ldr	r2, [pc, #128]	; (8000860 <HAL_UART_MspInit+0xa0>)
 80007de:	4293      	cmp	r3, r2
 80007e0:	d13a      	bne.n	8000858 <HAL_UART_MspInit+0x98>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80007e2:	4b20      	ldr	r3, [pc, #128]	; (8000864 <HAL_UART_MspInit+0xa4>)
 80007e4:	69da      	ldr	r2, [r3, #28]
 80007e6:	4b1f      	ldr	r3, [pc, #124]	; (8000864 <HAL_UART_MspInit+0xa4>)
 80007e8:	2180      	movs	r1, #128	; 0x80
 80007ea:	0289      	lsls	r1, r1, #10
 80007ec:	430a      	orrs	r2, r1
 80007ee:	61da      	str	r2, [r3, #28]
 80007f0:	4b1c      	ldr	r3, [pc, #112]	; (8000864 <HAL_UART_MspInit+0xa4>)
 80007f2:	69da      	ldr	r2, [r3, #28]
 80007f4:	2380      	movs	r3, #128	; 0x80
 80007f6:	029b      	lsls	r3, r3, #10
 80007f8:	4013      	ands	r3, r2
 80007fa:	613b      	str	r3, [r7, #16]
 80007fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007fe:	4b19      	ldr	r3, [pc, #100]	; (8000864 <HAL_UART_MspInit+0xa4>)
 8000800:	695a      	ldr	r2, [r3, #20]
 8000802:	4b18      	ldr	r3, [pc, #96]	; (8000864 <HAL_UART_MspInit+0xa4>)
 8000804:	2180      	movs	r1, #128	; 0x80
 8000806:	0289      	lsls	r1, r1, #10
 8000808:	430a      	orrs	r2, r1
 800080a:	615a      	str	r2, [r3, #20]
 800080c:	4b15      	ldr	r3, [pc, #84]	; (8000864 <HAL_UART_MspInit+0xa4>)
 800080e:	695a      	ldr	r2, [r3, #20]
 8000810:	2380      	movs	r3, #128	; 0x80
 8000812:	029b      	lsls	r3, r3, #10
 8000814:	4013      	ands	r3, r2
 8000816:	60fb      	str	r3, [r7, #12]
 8000818:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_15;
 800081a:	0021      	movs	r1, r4
 800081c:	187b      	adds	r3, r7, r1
 800081e:	4a12      	ldr	r2, [pc, #72]	; (8000868 <HAL_UART_MspInit+0xa8>)
 8000820:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000822:	187b      	adds	r3, r7, r1
 8000824:	2202      	movs	r2, #2
 8000826:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000828:	187b      	adds	r3, r7, r1
 800082a:	2200      	movs	r2, #0
 800082c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800082e:	187b      	adds	r3, r7, r1
 8000830:	2203      	movs	r2, #3
 8000832:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000834:	187b      	adds	r3, r7, r1
 8000836:	2201      	movs	r2, #1
 8000838:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800083a:	187a      	adds	r2, r7, r1
 800083c:	2390      	movs	r3, #144	; 0x90
 800083e:	05db      	lsls	r3, r3, #23
 8000840:	0011      	movs	r1, r2
 8000842:	0018      	movs	r0, r3
 8000844:	f001 fd0a 	bl	800225c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000848:	2200      	movs	r2, #0
 800084a:	2100      	movs	r1, #0
 800084c:	201c      	movs	r0, #28
 800084e:	f001 fc55 	bl	80020fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000852:	201c      	movs	r0, #28
 8000854:	f001 fc67 	bl	8002126 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000858:	46c0      	nop			; (mov r8, r8)
 800085a:	46bd      	mov	sp, r7
 800085c:	b00b      	add	sp, #44	; 0x2c
 800085e:	bd90      	pop	{r4, r7, pc}
 8000860:	40004400 	.word	0x40004400
 8000864:	40021000 	.word	0x40021000
 8000868:	00008004 	.word	0x00008004

0800086c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000870:	e7fe      	b.n	8000870 <NMI_Handler+0x4>

08000872 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000872:	b580      	push	{r7, lr}
 8000874:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000876:	e7fe      	b.n	8000876 <HardFault_Handler+0x4>

08000878 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800087c:	46c0      	nop			; (mov r8, r8)
 800087e:	46bd      	mov	sp, r7
 8000880:	bd80      	pop	{r7, pc}

08000882 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000882:	b580      	push	{r7, lr}
 8000884:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000886:	46c0      	nop			; (mov r8, r8)
 8000888:	46bd      	mov	sp, r7
 800088a:	bd80      	pop	{r7, pc}

0800088c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000890:	f000 ff7e 	bl	8001790 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000894:	46c0      	nop			; (mov r8, r8)
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}
	...

0800089c <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM14_IRQn 0 */

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 80008a0:	4b03      	ldr	r3, [pc, #12]	; (80008b0 <TIM14_IRQHandler+0x14>)
 80008a2:	0018      	movs	r0, r3
 80008a4:	f003 fafa 	bl	8003e9c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 80008a8:	46c0      	nop			; (mov r8, r8)
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	46c0      	nop			; (mov r8, r8)
 80008b0:	20000198 	.word	0x20000198

080008b4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80008b8:	4b03      	ldr	r3, [pc, #12]	; (80008c8 <USART2_IRQHandler+0x14>)
 80008ba:	0018      	movs	r0, r3
 80008bc:	f003 fde0 	bl	8004480 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80008c0:	46c0      	nop			; (mov r8, r8)
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	46c0      	nop			; (mov r8, r8)
 80008c8:	200001e0 	.word	0x200001e0

080008cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b086      	sub	sp, #24
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80008d4:	4a14      	ldr	r2, [pc, #80]	; (8000928 <_sbrk+0x5c>)
 80008d6:	4b15      	ldr	r3, [pc, #84]	; (800092c <_sbrk+0x60>)
 80008d8:	1ad3      	subs	r3, r2, r3
 80008da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80008dc:	697b      	ldr	r3, [r7, #20]
 80008de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80008e0:	4b13      	ldr	r3, [pc, #76]	; (8000930 <_sbrk+0x64>)
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d102      	bne.n	80008ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80008e8:	4b11      	ldr	r3, [pc, #68]	; (8000930 <_sbrk+0x64>)
 80008ea:	4a12      	ldr	r2, [pc, #72]	; (8000934 <_sbrk+0x68>)
 80008ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80008ee:	4b10      	ldr	r3, [pc, #64]	; (8000930 <_sbrk+0x64>)
 80008f0:	681a      	ldr	r2, [r3, #0]
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	18d3      	adds	r3, r2, r3
 80008f6:	693a      	ldr	r2, [r7, #16]
 80008f8:	429a      	cmp	r2, r3
 80008fa:	d207      	bcs.n	800090c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80008fc:	f004 ff28 	bl	8005750 <__errno>
 8000900:	0003      	movs	r3, r0
 8000902:	220c      	movs	r2, #12
 8000904:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000906:	2301      	movs	r3, #1
 8000908:	425b      	negs	r3, r3
 800090a:	e009      	b.n	8000920 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800090c:	4b08      	ldr	r3, [pc, #32]	; (8000930 <_sbrk+0x64>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000912:	4b07      	ldr	r3, [pc, #28]	; (8000930 <_sbrk+0x64>)
 8000914:	681a      	ldr	r2, [r3, #0]
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	18d2      	adds	r2, r2, r3
 800091a:	4b05      	ldr	r3, [pc, #20]	; (8000930 <_sbrk+0x64>)
 800091c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800091e:	68fb      	ldr	r3, [r7, #12]
}
 8000920:	0018      	movs	r0, r3
 8000922:	46bd      	mov	sp, r7
 8000924:	b006      	add	sp, #24
 8000926:	bd80      	pop	{r7, pc}
 8000928:	20001800 	.word	0x20001800
 800092c:	00000400 	.word	0x00000400
 8000930:	20000264 	.word	0x20000264
 8000934:	200002c8 	.word	0x200002c8

08000938 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 800093c:	46c0      	nop			; (mov r8, r8)
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}
	...

08000944 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000944:	4813      	ldr	r0, [pc, #76]	; (8000994 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000946:	4685      	mov	sp, r0

/*Check if boot space corresponds to test memory*/
 
    LDR R0,=0x00000004
 8000948:	4813      	ldr	r0, [pc, #76]	; (8000998 <LoopForever+0x6>)
    LDR R1, [R0]
 800094a:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 800094c:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 800094e:	4a13      	ldr	r2, [pc, #76]	; (800099c <LoopForever+0xa>)
    CMP R1, R2
 8000950:	4291      	cmp	r1, r2
    BNE ApplicationStart
 8000952:	d105      	bne.n	8000960 <ApplicationStart>

 /*SYSCFG clock enable*/

    LDR R0,=0x40021018
 8000954:	4812      	ldr	r0, [pc, #72]	; (80009a0 <LoopForever+0xe>)
    LDR R1,=0x00000001
 8000956:	4913      	ldr	r1, [pc, #76]	; (80009a4 <LoopForever+0x12>)
    STR R1, [R0]
 8000958:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 800095a:	4813      	ldr	r0, [pc, #76]	; (80009a8 <LoopForever+0x16>)
    LDR R1,=0x00000000
 800095c:	4913      	ldr	r1, [pc, #76]	; (80009ac <LoopForever+0x1a>)
    STR R1, [R0]
 800095e:	6001      	str	r1, [r0, #0]

08000960 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000960:	4813      	ldr	r0, [pc, #76]	; (80009b0 <LoopForever+0x1e>)
  ldr r1, =_edata
 8000962:	4914      	ldr	r1, [pc, #80]	; (80009b4 <LoopForever+0x22>)
  ldr r2, =_sidata
 8000964:	4a14      	ldr	r2, [pc, #80]	; (80009b8 <LoopForever+0x26>)
  movs r3, #0
 8000966:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000968:	e002      	b.n	8000970 <LoopCopyDataInit>

0800096a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800096a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800096c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800096e:	3304      	adds	r3, #4

08000970 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000970:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000972:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000974:	d3f9      	bcc.n	800096a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000976:	4a11      	ldr	r2, [pc, #68]	; (80009bc <LoopForever+0x2a>)
  ldr r4, =_ebss
 8000978:	4c11      	ldr	r4, [pc, #68]	; (80009c0 <LoopForever+0x2e>)
  movs r3, #0
 800097a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800097c:	e001      	b.n	8000982 <LoopFillZerobss>

0800097e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800097e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000980:	3204      	adds	r2, #4

08000982 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000982:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000984:	d3fb      	bcc.n	800097e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000986:	f7ff ffd7 	bl	8000938 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800098a:	f004 fee7 	bl	800575c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800098e:	f7ff fc63 	bl	8000258 <main>

08000992 <LoopForever>:

LoopForever:
    b LoopForever
 8000992:	e7fe      	b.n	8000992 <LoopForever>
  ldr   r0, =_estack
 8000994:	20001800 	.word	0x20001800
    LDR R0,=0x00000004
 8000998:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 800099c:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021018
 80009a0:	40021018 	.word	0x40021018
    LDR R1,=0x00000001
 80009a4:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 80009a8:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 80009ac:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 80009b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009b4:	200000f0 	.word	0x200000f0
  ldr r2, =_sidata
 80009b8:	08006730 	.word	0x08006730
  ldr r2, =_sbss
 80009bc:	200000f0 	.word	0x200000f0
  ldr r4, =_ebss
 80009c0:	200002c4 	.word	0x200002c4

080009c4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80009c4:	e7fe      	b.n	80009c4 <ADC1_IRQHandler>
	...

080009c8 <ConfigDS1086>:

// *************************************************************
// ******************** Public function ************************
// *************************************************************

void ConfigDS1086 (uint32_t frequence){ // frequence en KHz
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b086      	sub	sp, #24
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
	uint32_t freq=0 ;
 80009d0:	2300      	movs	r3, #0
 80009d2:	613b      	str	r3, [r7, #16]
	for(int i=0; i < 9;  i++ ){
 80009d4:	2300      	movs	r3, #0
 80009d6:	617b      	str	r3, [r7, #20]
 80009d8:	e0db      	b.n	8000b92 <ConfigDS1086+0x1ca>
		freq = frequence * power(2,i);
 80009da:	697b      	ldr	r3, [r7, #20]
 80009dc:	0019      	movs	r1, r3
 80009de:	2002      	movs	r0, #2
 80009e0:	f000 fdde 	bl	80015a0 <power>
 80009e4:	0002      	movs	r2, r0
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	4353      	muls	r3, r2
 80009ea:	613b      	str	r3, [r7, #16]
		if( (30740 < freq) && (freq < 35860 )){
 80009ec:	693b      	ldr	r3, [r7, #16]
 80009ee:	4aa3      	ldr	r2, [pc, #652]	; (8000c7c <ConfigDS1086+0x2b4>)
 80009f0:	4293      	cmp	r3, r2
 80009f2:	d90b      	bls.n	8000a0c <ConfigDS1086+0x44>
 80009f4:	693b      	ldr	r3, [r7, #16]
 80009f6:	4aa2      	ldr	r2, [pc, #648]	; (8000c80 <ConfigDS1086+0x2b8>)
 80009f8:	4293      	cmp	r3, r2
 80009fa:	d807      	bhi.n	8000a0c <ConfigDS1086+0x44>
			prescaler = i ;
 80009fc:	697b      	ldr	r3, [r7, #20]
 80009fe:	b25a      	sxtb	r2, r3
 8000a00:	4ba0      	ldr	r3, [pc, #640]	; (8000c84 <ConfigDS1086+0x2bc>)
 8000a02:	701a      	strb	r2, [r3, #0]
			range = - 6 ;
 8000a04:	4ba0      	ldr	r3, [pc, #640]	; (8000c88 <ConfigDS1086+0x2c0>)
 8000a06:	22fa      	movs	r2, #250	; 0xfa
 8000a08:	701a      	strb	r2, [r3, #0]
			break ;
 8000a0a:	e0c6      	b.n	8000b9a <ConfigDS1086+0x1d2>
		}
		if( (33300 < freq) && (freq < 38420 )){
 8000a0c:	693b      	ldr	r3, [r7, #16]
 8000a0e:	4a9f      	ldr	r2, [pc, #636]	; (8000c8c <ConfigDS1086+0x2c4>)
 8000a10:	4293      	cmp	r3, r2
 8000a12:	d90b      	bls.n	8000a2c <ConfigDS1086+0x64>
 8000a14:	693b      	ldr	r3, [r7, #16]
 8000a16:	4a9e      	ldr	r2, [pc, #632]	; (8000c90 <ConfigDS1086+0x2c8>)
 8000a18:	4293      	cmp	r3, r2
 8000a1a:	d807      	bhi.n	8000a2c <ConfigDS1086+0x64>
			prescaler = i ;
 8000a1c:	697b      	ldr	r3, [r7, #20]
 8000a1e:	b25a      	sxtb	r2, r3
 8000a20:	4b98      	ldr	r3, [pc, #608]	; (8000c84 <ConfigDS1086+0x2bc>)
 8000a22:	701a      	strb	r2, [r3, #0]
			range = -5 ;
 8000a24:	4b98      	ldr	r3, [pc, #608]	; (8000c88 <ConfigDS1086+0x2c0>)
 8000a26:	22fb      	movs	r2, #251	; 0xfb
 8000a28:	701a      	strb	r2, [r3, #0]
			break ;
 8000a2a:	e0b6      	b.n	8000b9a <ConfigDS1086+0x1d2>
		}
		if( (35860 < freq) && (freq < 40980 )){ //35.86 to 40.98
 8000a2c:	693b      	ldr	r3, [r7, #16]
 8000a2e:	4a99      	ldr	r2, [pc, #612]	; (8000c94 <ConfigDS1086+0x2cc>)
 8000a30:	4293      	cmp	r3, r2
 8000a32:	d90b      	bls.n	8000a4c <ConfigDS1086+0x84>
 8000a34:	693b      	ldr	r3, [r7, #16]
 8000a36:	4a98      	ldr	r2, [pc, #608]	; (8000c98 <ConfigDS1086+0x2d0>)
 8000a38:	4293      	cmp	r3, r2
 8000a3a:	d807      	bhi.n	8000a4c <ConfigDS1086+0x84>
			prescaler = i ;
 8000a3c:	697b      	ldr	r3, [r7, #20]
 8000a3e:	b25a      	sxtb	r2, r3
 8000a40:	4b90      	ldr	r3, [pc, #576]	; (8000c84 <ConfigDS1086+0x2bc>)
 8000a42:	701a      	strb	r2, [r3, #0]
			range = -4 ;
 8000a44:	4b90      	ldr	r3, [pc, #576]	; (8000c88 <ConfigDS1086+0x2c0>)
 8000a46:	22fc      	movs	r2, #252	; 0xfc
 8000a48:	701a      	strb	r2, [r3, #0]
			break ;
 8000a4a:	e0a6      	b.n	8000b9a <ConfigDS1086+0x1d2>
		}
		if( (38420 < freq) && (freq < 43540 )){ //38.42 to 43.54
 8000a4c:	693b      	ldr	r3, [r7, #16]
 8000a4e:	4a93      	ldr	r2, [pc, #588]	; (8000c9c <ConfigDS1086+0x2d4>)
 8000a50:	4293      	cmp	r3, r2
 8000a52:	d90b      	bls.n	8000a6c <ConfigDS1086+0xa4>
 8000a54:	693b      	ldr	r3, [r7, #16]
 8000a56:	4a92      	ldr	r2, [pc, #584]	; (8000ca0 <ConfigDS1086+0x2d8>)
 8000a58:	4293      	cmp	r3, r2
 8000a5a:	d807      	bhi.n	8000a6c <ConfigDS1086+0xa4>
				prescaler = i ;
 8000a5c:	697b      	ldr	r3, [r7, #20]
 8000a5e:	b25a      	sxtb	r2, r3
 8000a60:	4b88      	ldr	r3, [pc, #544]	; (8000c84 <ConfigDS1086+0x2bc>)
 8000a62:	701a      	strb	r2, [r3, #0]
				range = -3 ;
 8000a64:	4b88      	ldr	r3, [pc, #544]	; (8000c88 <ConfigDS1086+0x2c0>)
 8000a66:	22fd      	movs	r2, #253	; 0xfd
 8000a68:	701a      	strb	r2, [r3, #0]
				break ;
 8000a6a:	e096      	b.n	8000b9a <ConfigDS1086+0x1d2>
		}
		if( (40980 < freq) && (freq < 46100 )){ //40.98 to 46.10
 8000a6c:	693b      	ldr	r3, [r7, #16]
 8000a6e:	4a8d      	ldr	r2, [pc, #564]	; (8000ca4 <ConfigDS1086+0x2dc>)
 8000a70:	4293      	cmp	r3, r2
 8000a72:	d90b      	bls.n	8000a8c <ConfigDS1086+0xc4>
 8000a74:	693b      	ldr	r3, [r7, #16]
 8000a76:	4a8c      	ldr	r2, [pc, #560]	; (8000ca8 <ConfigDS1086+0x2e0>)
 8000a78:	4293      	cmp	r3, r2
 8000a7a:	d807      	bhi.n	8000a8c <ConfigDS1086+0xc4>
				prescaler = i ;
 8000a7c:	697b      	ldr	r3, [r7, #20]
 8000a7e:	b25a      	sxtb	r2, r3
 8000a80:	4b80      	ldr	r3, [pc, #512]	; (8000c84 <ConfigDS1086+0x2bc>)
 8000a82:	701a      	strb	r2, [r3, #0]
				range = -2 ;
 8000a84:	4b80      	ldr	r3, [pc, #512]	; (8000c88 <ConfigDS1086+0x2c0>)
 8000a86:	22fe      	movs	r2, #254	; 0xfe
 8000a88:	701a      	strb	r2, [r3, #0]
				break ;
 8000a8a:	e086      	b.n	8000b9a <ConfigDS1086+0x1d2>
		}
		if( (43540 < freq) && (freq < 48660 )){ //43.54 to 48.66
 8000a8c:	693b      	ldr	r3, [r7, #16]
 8000a8e:	4a87      	ldr	r2, [pc, #540]	; (8000cac <ConfigDS1086+0x2e4>)
 8000a90:	4293      	cmp	r3, r2
 8000a92:	d90b      	bls.n	8000aac <ConfigDS1086+0xe4>
 8000a94:	693b      	ldr	r3, [r7, #16]
 8000a96:	4a86      	ldr	r2, [pc, #536]	; (8000cb0 <ConfigDS1086+0x2e8>)
 8000a98:	4293      	cmp	r3, r2
 8000a9a:	d807      	bhi.n	8000aac <ConfigDS1086+0xe4>
				prescaler = i ;
 8000a9c:	697b      	ldr	r3, [r7, #20]
 8000a9e:	b25a      	sxtb	r2, r3
 8000aa0:	4b78      	ldr	r3, [pc, #480]	; (8000c84 <ConfigDS1086+0x2bc>)
 8000aa2:	701a      	strb	r2, [r3, #0]
				range = -1 ;
 8000aa4:	4b78      	ldr	r3, [pc, #480]	; (8000c88 <ConfigDS1086+0x2c0>)
 8000aa6:	22ff      	movs	r2, #255	; 0xff
 8000aa8:	701a      	strb	r2, [r3, #0]
				break ;
 8000aaa:	e076      	b.n	8000b9a <ConfigDS1086+0x1d2>
		}
		if( (46100 < freq) && (freq < 51220 )){ //46.10 to 51.22
 8000aac:	693b      	ldr	r3, [r7, #16]
 8000aae:	4a81      	ldr	r2, [pc, #516]	; (8000cb4 <ConfigDS1086+0x2ec>)
 8000ab0:	4293      	cmp	r3, r2
 8000ab2:	d90b      	bls.n	8000acc <ConfigDS1086+0x104>
 8000ab4:	693b      	ldr	r3, [r7, #16]
 8000ab6:	4a80      	ldr	r2, [pc, #512]	; (8000cb8 <ConfigDS1086+0x2f0>)
 8000ab8:	4293      	cmp	r3, r2
 8000aba:	d807      	bhi.n	8000acc <ConfigDS1086+0x104>
				prescaler = i ;
 8000abc:	697b      	ldr	r3, [r7, #20]
 8000abe:	b25a      	sxtb	r2, r3
 8000ac0:	4b70      	ldr	r3, [pc, #448]	; (8000c84 <ConfigDS1086+0x2bc>)
 8000ac2:	701a      	strb	r2, [r3, #0]
				range = 0 ;
 8000ac4:	4b70      	ldr	r3, [pc, #448]	; (8000c88 <ConfigDS1086+0x2c0>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	701a      	strb	r2, [r3, #0]
				break ;
 8000aca:	e066      	b.n	8000b9a <ConfigDS1086+0x1d2>
		}
		if( (48660 < freq) && (freq < 53780 )){ //48.66 to 53.78
 8000acc:	693b      	ldr	r3, [r7, #16]
 8000ace:	4a7b      	ldr	r2, [pc, #492]	; (8000cbc <ConfigDS1086+0x2f4>)
 8000ad0:	4293      	cmp	r3, r2
 8000ad2:	d90b      	bls.n	8000aec <ConfigDS1086+0x124>
 8000ad4:	693b      	ldr	r3, [r7, #16]
 8000ad6:	4a7a      	ldr	r2, [pc, #488]	; (8000cc0 <ConfigDS1086+0x2f8>)
 8000ad8:	4293      	cmp	r3, r2
 8000ada:	d807      	bhi.n	8000aec <ConfigDS1086+0x124>
				prescaler = i ;
 8000adc:	697b      	ldr	r3, [r7, #20]
 8000ade:	b25a      	sxtb	r2, r3
 8000ae0:	4b68      	ldr	r3, [pc, #416]	; (8000c84 <ConfigDS1086+0x2bc>)
 8000ae2:	701a      	strb	r2, [r3, #0]
				range = 1 ;
 8000ae4:	4b68      	ldr	r3, [pc, #416]	; (8000c88 <ConfigDS1086+0x2c0>)
 8000ae6:	2201      	movs	r2, #1
 8000ae8:	701a      	strb	r2, [r3, #0]
				break ;
 8000aea:	e056      	b.n	8000b9a <ConfigDS1086+0x1d2>
		}
		if( (51220 < freq) && (freq < 56340 )){ //51.22 to 56.34
 8000aec:	693b      	ldr	r3, [r7, #16]
 8000aee:	4a75      	ldr	r2, [pc, #468]	; (8000cc4 <ConfigDS1086+0x2fc>)
 8000af0:	4293      	cmp	r3, r2
 8000af2:	d90b      	bls.n	8000b0c <ConfigDS1086+0x144>
 8000af4:	693b      	ldr	r3, [r7, #16]
 8000af6:	4a74      	ldr	r2, [pc, #464]	; (8000cc8 <ConfigDS1086+0x300>)
 8000af8:	4293      	cmp	r3, r2
 8000afa:	d807      	bhi.n	8000b0c <ConfigDS1086+0x144>
				prescaler = i ;
 8000afc:	697b      	ldr	r3, [r7, #20]
 8000afe:	b25a      	sxtb	r2, r3
 8000b00:	4b60      	ldr	r3, [pc, #384]	; (8000c84 <ConfigDS1086+0x2bc>)
 8000b02:	701a      	strb	r2, [r3, #0]
				range = 2 ;
 8000b04:	4b60      	ldr	r3, [pc, #384]	; (8000c88 <ConfigDS1086+0x2c0>)
 8000b06:	2202      	movs	r2, #2
 8000b08:	701a      	strb	r2, [r3, #0]
				break ;
 8000b0a:	e046      	b.n	8000b9a <ConfigDS1086+0x1d2>
		}
		if( (53780 < freq) && (freq < 58900 )){ //53.78 to 58.90
 8000b0c:	693b      	ldr	r3, [r7, #16]
 8000b0e:	4a6f      	ldr	r2, [pc, #444]	; (8000ccc <ConfigDS1086+0x304>)
 8000b10:	4293      	cmp	r3, r2
 8000b12:	d90b      	bls.n	8000b2c <ConfigDS1086+0x164>
 8000b14:	693b      	ldr	r3, [r7, #16]
 8000b16:	4a6e      	ldr	r2, [pc, #440]	; (8000cd0 <ConfigDS1086+0x308>)
 8000b18:	4293      	cmp	r3, r2
 8000b1a:	d807      	bhi.n	8000b2c <ConfigDS1086+0x164>
				prescaler = i ;
 8000b1c:	697b      	ldr	r3, [r7, #20]
 8000b1e:	b25a      	sxtb	r2, r3
 8000b20:	4b58      	ldr	r3, [pc, #352]	; (8000c84 <ConfigDS1086+0x2bc>)
 8000b22:	701a      	strb	r2, [r3, #0]
				range = 3 ;
 8000b24:	4b58      	ldr	r3, [pc, #352]	; (8000c88 <ConfigDS1086+0x2c0>)
 8000b26:	2203      	movs	r2, #3
 8000b28:	701a      	strb	r2, [r3, #0]
				break ;
 8000b2a:	e036      	b.n	8000b9a <ConfigDS1086+0x1d2>
		}
		if( (56340 < freq) && (freq < 61460 )){ //56.34 to 61.46
 8000b2c:	693b      	ldr	r3, [r7, #16]
 8000b2e:	4a69      	ldr	r2, [pc, #420]	; (8000cd4 <ConfigDS1086+0x30c>)
 8000b30:	4293      	cmp	r3, r2
 8000b32:	d90b      	bls.n	8000b4c <ConfigDS1086+0x184>
 8000b34:	693b      	ldr	r3, [r7, #16]
 8000b36:	4a68      	ldr	r2, [pc, #416]	; (8000cd8 <ConfigDS1086+0x310>)
 8000b38:	4293      	cmp	r3, r2
 8000b3a:	d807      	bhi.n	8000b4c <ConfigDS1086+0x184>
				prescaler = i ;
 8000b3c:	697b      	ldr	r3, [r7, #20]
 8000b3e:	b25a      	sxtb	r2, r3
 8000b40:	4b50      	ldr	r3, [pc, #320]	; (8000c84 <ConfigDS1086+0x2bc>)
 8000b42:	701a      	strb	r2, [r3, #0]
				range = 4 ;
 8000b44:	4b50      	ldr	r3, [pc, #320]	; (8000c88 <ConfigDS1086+0x2c0>)
 8000b46:	2204      	movs	r2, #4
 8000b48:	701a      	strb	r2, [r3, #0]
				break ;
 8000b4a:	e026      	b.n	8000b9a <ConfigDS1086+0x1d2>
		}
		if( (58900 < freq) && (freq < 64020 )){ //58.90 to 64.02
 8000b4c:	693b      	ldr	r3, [r7, #16]
 8000b4e:	4a63      	ldr	r2, [pc, #396]	; (8000cdc <ConfigDS1086+0x314>)
 8000b50:	4293      	cmp	r3, r2
 8000b52:	d90b      	bls.n	8000b6c <ConfigDS1086+0x1a4>
 8000b54:	693b      	ldr	r3, [r7, #16]
 8000b56:	4a62      	ldr	r2, [pc, #392]	; (8000ce0 <ConfigDS1086+0x318>)
 8000b58:	4293      	cmp	r3, r2
 8000b5a:	d807      	bhi.n	8000b6c <ConfigDS1086+0x1a4>
				prescaler = i ;
 8000b5c:	697b      	ldr	r3, [r7, #20]
 8000b5e:	b25a      	sxtb	r2, r3
 8000b60:	4b48      	ldr	r3, [pc, #288]	; (8000c84 <ConfigDS1086+0x2bc>)
 8000b62:	701a      	strb	r2, [r3, #0]
				range = 5 ;
 8000b64:	4b48      	ldr	r3, [pc, #288]	; (8000c88 <ConfigDS1086+0x2c0>)
 8000b66:	2205      	movs	r2, #5
 8000b68:	701a      	strb	r2, [r3, #0]
				break ;
 8000b6a:	e016      	b.n	8000b9a <ConfigDS1086+0x1d2>
		}
		if( (61460 < freq) && (freq < 66580 )){ //61.46 to 66.58
 8000b6c:	693b      	ldr	r3, [r7, #16]
 8000b6e:	4a5d      	ldr	r2, [pc, #372]	; (8000ce4 <ConfigDS1086+0x31c>)
 8000b70:	4293      	cmp	r3, r2
 8000b72:	d90b      	bls.n	8000b8c <ConfigDS1086+0x1c4>
 8000b74:	693b      	ldr	r3, [r7, #16]
 8000b76:	4a5c      	ldr	r2, [pc, #368]	; (8000ce8 <ConfigDS1086+0x320>)
 8000b78:	4293      	cmp	r3, r2
 8000b7a:	d807      	bhi.n	8000b8c <ConfigDS1086+0x1c4>
				prescaler = i ;
 8000b7c:	697b      	ldr	r3, [r7, #20]
 8000b7e:	b25a      	sxtb	r2, r3
 8000b80:	4b40      	ldr	r3, [pc, #256]	; (8000c84 <ConfigDS1086+0x2bc>)
 8000b82:	701a      	strb	r2, [r3, #0]
				range = 6 ;
 8000b84:	4b40      	ldr	r3, [pc, #256]	; (8000c88 <ConfigDS1086+0x2c0>)
 8000b86:	2206      	movs	r2, #6
 8000b88:	701a      	strb	r2, [r3, #0]
				break ;
 8000b8a:	e006      	b.n	8000b9a <ConfigDS1086+0x1d2>
	for(int i=0; i < 9;  i++ ){
 8000b8c:	697b      	ldr	r3, [r7, #20]
 8000b8e:	3301      	adds	r3, #1
 8000b90:	617b      	str	r3, [r7, #20]
 8000b92:	697b      	ldr	r3, [r7, #20]
 8000b94:	2b08      	cmp	r3, #8
 8000b96:	dc00      	bgt.n	8000b9a <ConfigDS1086+0x1d2>
 8000b98:	e71f      	b.n	80009da <ConfigDS1086+0x12>
		}
	}

	if((previousRange!=range)||(previousPrescaler!=prescaler)){
 8000b9a:	4b54      	ldr	r3, [pc, #336]	; (8000cec <ConfigDS1086+0x324>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	569a      	ldrsb	r2, [r3, r2]
 8000ba0:	4b39      	ldr	r3, [pc, #228]	; (8000c88 <ConfigDS1086+0x2c0>)
 8000ba2:	781b      	ldrb	r3, [r3, #0]
 8000ba4:	b25b      	sxtb	r3, r3
 8000ba6:	429a      	cmp	r2, r3
 8000ba8:	d107      	bne.n	8000bba <ConfigDS1086+0x1f2>
 8000baa:	4b51      	ldr	r3, [pc, #324]	; (8000cf0 <ConfigDS1086+0x328>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	569a      	ldrsb	r2, [r3, r2]
 8000bb0:	4b34      	ldr	r3, [pc, #208]	; (8000c84 <ConfigDS1086+0x2bc>)
 8000bb2:	781b      	ldrb	r3, [r3, #0]
 8000bb4:	b25b      	sxtb	r3, r3
 8000bb6:	429a      	cmp	r2, r3
 8000bb8:	d028      	beq.n	8000c0c <ConfigDS1086+0x244>
	data_send[0]=  (0x0C & prescaler) >> 2;
 8000bba:	4b32      	ldr	r3, [pc, #200]	; (8000c84 <ConfigDS1086+0x2bc>)
 8000bbc:	781b      	ldrb	r3, [r3, #0]
 8000bbe:	b25b      	sxtb	r3, r3
 8000bc0:	109b      	asrs	r3, r3, #2
 8000bc2:	b25b      	sxtb	r3, r3
 8000bc4:	b2db      	uxtb	r3, r3
 8000bc6:	2203      	movs	r2, #3
 8000bc8:	4013      	ands	r3, r2
 8000bca:	b2da      	uxtb	r2, r3
 8000bcc:	4b49      	ldr	r3, [pc, #292]	; (8000cf4 <ConfigDS1086+0x32c>)
 8000bce:	701a      	strb	r2, [r3, #0]
	data_send[1]=  (0x03 & prescaler) << 6 ; //
 8000bd0:	4b2c      	ldr	r3, [pc, #176]	; (8000c84 <ConfigDS1086+0x2bc>)
 8000bd2:	781b      	ldrb	r3, [r3, #0]
 8000bd4:	b25b      	sxtb	r3, r3
 8000bd6:	b2db      	uxtb	r3, r3
 8000bd8:	019b      	lsls	r3, r3, #6
 8000bda:	b2da      	uxtb	r2, r3
 8000bdc:	4b45      	ldr	r3, [pc, #276]	; (8000cf4 <ConfigDS1086+0x32c>)
 8000bde:	705a      	strb	r2, [r3, #1]
	WriteTowByte (PRESCALER) ; //fMASTER OSCILLATOR = fDESIRED x prescaler = fDESIRED x 2^x
 8000be0:	2002      	movs	r0, #2
 8000be2:	f000 fc9f 	bl	8001524 <WriteTowByte>
	//WriteEE_Command () ;
	ReadByte(RANGE);
 8000be6:	2037      	movs	r0, #55	; 0x37
 8000be8:	f000 fc60 	bl	80014ac <ReadByte>

	data_send[0]= ((data_read[0] & 0X1F) + range) & 0X1F ; // OFFSET = OS + range
 8000bec:	4b42      	ldr	r3, [pc, #264]	; (8000cf8 <ConfigDS1086+0x330>)
 8000bee:	781a      	ldrb	r2, [r3, #0]
 8000bf0:	4b25      	ldr	r3, [pc, #148]	; (8000c88 <ConfigDS1086+0x2c0>)
 8000bf2:	781b      	ldrb	r3, [r3, #0]
 8000bf4:	b25b      	sxtb	r3, r3
 8000bf6:	b2db      	uxtb	r3, r3
 8000bf8:	18d3      	adds	r3, r2, r3
 8000bfa:	b2db      	uxtb	r3, r3
 8000bfc:	221f      	movs	r2, #31
 8000bfe:	4013      	ands	r3, r2
 8000c00:	b2da      	uxtb	r2, r3
 8000c02:	4b3c      	ldr	r3, [pc, #240]	; (8000cf4 <ConfigDS1086+0x32c>)
 8000c04:	701a      	strb	r2, [r3, #0]
	WriteByte(OFFSET) ;
 8000c06:	200e      	movs	r0, #14
 8000c08:	f000 fc12 	bl	8001430 <WriteByte>
	}

	int32_t DAC_Value = (int32_t )(((frequence * power(2,prescaler))  - Fmin[range+6])/5) ;
 8000c0c:	4b1d      	ldr	r3, [pc, #116]	; (8000c84 <ConfigDS1086+0x2bc>)
 8000c0e:	781b      	ldrb	r3, [r3, #0]
 8000c10:	b25b      	sxtb	r3, r3
 8000c12:	0019      	movs	r1, r3
 8000c14:	2002      	movs	r0, #2
 8000c16:	f000 fcc3 	bl	80015a0 <power>
 8000c1a:	0002      	movs	r2, r0
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	435a      	muls	r2, r3
 8000c20:	4b19      	ldr	r3, [pc, #100]	; (8000c88 <ConfigDS1086+0x2c0>)
 8000c22:	781b      	ldrb	r3, [r3, #0]
 8000c24:	b25b      	sxtb	r3, r3
 8000c26:	1d99      	adds	r1, r3, #6
 8000c28:	4b34      	ldr	r3, [pc, #208]	; (8000cfc <ConfigDS1086+0x334>)
 8000c2a:	0089      	lsls	r1, r1, #2
 8000c2c:	58cb      	ldr	r3, [r1, r3]
 8000c2e:	1ad3      	subs	r3, r2, r3
 8000c30:	2105      	movs	r1, #5
 8000c32:	0018      	movs	r0, r3
 8000c34:	f7ff fa84 	bl	8000140 <__udivsi3>
 8000c38:	0003      	movs	r3, r0
 8000c3a:	60fb      	str	r3, [r7, #12]
	DAC_Value = DAC_Value<<6 ;
 8000c3c:	68fb      	ldr	r3, [r7, #12]
 8000c3e:	019b      	lsls	r3, r3, #6
 8000c40:	60fb      	str	r3, [r7, #12]
	data_send[0]= (DAC_Value & 0xFF00)>>8 ; // F_OUTPUT= (Fmin + DAC * 5kHz )/PRESCALER
 8000c42:	68fb      	ldr	r3, [r7, #12]
 8000c44:	121b      	asrs	r3, r3, #8
 8000c46:	b2da      	uxtb	r2, r3
 8000c48:	4b2a      	ldr	r3, [pc, #168]	; (8000cf4 <ConfigDS1086+0x32c>)
 8000c4a:	701a      	strb	r2, [r3, #0]
	data_send[1]= DAC_Value & 0x00C0 ;
 8000c4c:	68fb      	ldr	r3, [r7, #12]
 8000c4e:	b2db      	uxtb	r3, r3
 8000c50:	223f      	movs	r2, #63	; 0x3f
 8000c52:	4393      	bics	r3, r2
 8000c54:	b2da      	uxtb	r2, r3
 8000c56:	4b27      	ldr	r3, [pc, #156]	; (8000cf4 <ConfigDS1086+0x32c>)
 8000c58:	705a      	strb	r2, [r3, #1]
	WriteTowByte (DACHIGH) ;
 8000c5a:	2008      	movs	r0, #8
 8000c5c:	f000 fc62 	bl	8001524 <WriteTowByte>

	previousRange = range ;
 8000c60:	4b09      	ldr	r3, [pc, #36]	; (8000c88 <ConfigDS1086+0x2c0>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	569a      	ldrsb	r2, [r3, r2]
 8000c66:	4b21      	ldr	r3, [pc, #132]	; (8000cec <ConfigDS1086+0x324>)
 8000c68:	701a      	strb	r2, [r3, #0]
	previousPrescaler = prescaler ;
 8000c6a:	4b06      	ldr	r3, [pc, #24]	; (8000c84 <ConfigDS1086+0x2bc>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	569a      	ldrsb	r2, [r3, r2]
 8000c70:	4b1f      	ldr	r3, [pc, #124]	; (8000cf0 <ConfigDS1086+0x328>)
 8000c72:	701a      	strb	r2, [r3, #0]
}
 8000c74:	46c0      	nop			; (mov r8, r8)
 8000c76:	46bd      	mov	sp, r7
 8000c78:	b006      	add	sp, #24
 8000c7a:	bd80      	pop	{r7, pc}
 8000c7c:	00007814 	.word	0x00007814
 8000c80:	00008c13 	.word	0x00008c13
 8000c84:	20000040 	.word	0x20000040
 8000c88:	2000003f 	.word	0x2000003f
 8000c8c:	00008214 	.word	0x00008214
 8000c90:	00009613 	.word	0x00009613
 8000c94:	00008c14 	.word	0x00008c14
 8000c98:	0000a013 	.word	0x0000a013
 8000c9c:	00009614 	.word	0x00009614
 8000ca0:	0000aa13 	.word	0x0000aa13
 8000ca4:	0000a014 	.word	0x0000a014
 8000ca8:	0000b413 	.word	0x0000b413
 8000cac:	0000aa14 	.word	0x0000aa14
 8000cb0:	0000be13 	.word	0x0000be13
 8000cb4:	0000b414 	.word	0x0000b414
 8000cb8:	0000c813 	.word	0x0000c813
 8000cbc:	0000be14 	.word	0x0000be14
 8000cc0:	0000d213 	.word	0x0000d213
 8000cc4:	0000c814 	.word	0x0000c814
 8000cc8:	0000dc13 	.word	0x0000dc13
 8000ccc:	0000d214 	.word	0x0000d214
 8000cd0:	0000e613 	.word	0x0000e613
 8000cd4:	0000dc14 	.word	0x0000dc14
 8000cd8:	0000f013 	.word	0x0000f013
 8000cdc:	0000e614 	.word	0x0000e614
 8000ce0:	0000fa13 	.word	0x0000fa13
 8000ce4:	0000f014 	.word	0x0000f014
 8000ce8:	00010413 	.word	0x00010413
 8000cec:	200002a8 	.word	0x200002a8
 8000cf0:	200002a9 	.word	0x200002a9
 8000cf4:	20000274 	.word	0x20000274
 8000cf8:	20000268 	.word	0x20000268
 8000cfc:	20000044 	.word	0x20000044

08000d00 <Conversion>:
	memset(data_send,'\0',10*sizeof(char));


}*/

uint32_t Conversion (){
 8000d00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d02:	b091      	sub	sp, #68	; 0x44
 8000d04:	af04      	add	r7, sp, #16
	uint32_t ValeurADC=0 ;
 8000d06:	2300      	movs	r3, #0
 8000d08:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint8_t valeur[20]=" ";
 8000d0a:	2414      	movs	r4, #20
 8000d0c:	193b      	adds	r3, r7, r4
 8000d0e:	2220      	movs	r2, #32
 8000d10:	601a      	str	r2, [r3, #0]
 8000d12:	3304      	adds	r3, #4
 8000d14:	2210      	movs	r2, #16
 8000d16:	2100      	movs	r1, #0
 8000d18:	0018      	movs	r0, r3
 8000d1a:	f004 fd43 	bl	80057a4 <memset>
	uint8_t data[20]=" ";
 8000d1e:	003b      	movs	r3, r7
 8000d20:	2220      	movs	r2, #32
 8000d22:	601a      	str	r2, [r3, #0]
 8000d24:	3304      	adds	r3, #4
 8000d26:	2210      	movs	r2, #16
 8000d28:	2100      	movs	r1, #0
 8000d2a:	0018      	movs	r0, r3
 8000d2c:	f004 fd3a 	bl	80057a4 <memset>

	HAL_GPIO_WritePin(GPIOB, DA_DISCH_Pin, GPIO_PIN_RESET);
 8000d30:	4b60      	ldr	r3, [pc, #384]	; (8000eb4 <Conversion+0x1b4>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	2102      	movs	r1, #2
 8000d36:	0018      	movs	r0, r3
 8000d38:	f001 fbf8 	bl	800252c <HAL_GPIO_WritePin>
	DS_Delay(500) ;
 8000d3c:	23fa      	movs	r3, #250	; 0xfa
 8000d3e:	005b      	lsls	r3, r3, #1
 8000d40:	0018      	movs	r0, r3
 8000d42:	f000 fb47 	bl	80013d4 <DS_Delay>
	HAL_ADC_Start(&hadc);
 8000d46:	4b5c      	ldr	r3, [pc, #368]	; (8000eb8 <Conversion+0x1b8>)
 8000d48:	0018      	movs	r0, r3
 8000d4a:	f000 fea1 	bl	8001a90 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc,HAL_MAX_DELAY);
 8000d4e:	2301      	movs	r3, #1
 8000d50:	425a      	negs	r2, r3
 8000d52:	4b59      	ldr	r3, [pc, #356]	; (8000eb8 <Conversion+0x1b8>)
 8000d54:	0011      	movs	r1, r2
 8000d56:	0018      	movs	r0, r3
 8000d58:	f000 feee 	bl	8001b38 <HAL_ADC_PollForConversion>
	ValeurADC = HAL_ADC_GetValue(&hadc);
 8000d5c:	4b56      	ldr	r3, [pc, #344]	; (8000eb8 <Conversion+0x1b8>)
 8000d5e:	0018      	movs	r0, r3
 8000d60:	f000 ff82 	bl	8001c68 <HAL_ADC_GetValue>
 8000d64:	0003      	movs	r3, r0
 8000d66:	62fb      	str	r3, [r7, #44]	; 0x2c
	DS_Delay(100) ;
 8000d68:	2064      	movs	r0, #100	; 0x64
 8000d6a:	f000 fb33 	bl	80013d4 <DS_Delay>

	uint32_t Vreal= ValeurADC*806 ; // uV pow(2,12)  ADC 12BIT
 8000d6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d70:	4a52      	ldr	r2, [pc, #328]	; (8000ebc <Conversion+0x1bc>)
 8000d72:	4353      	muls	r3, r2
 8000d74:	62bb      	str	r3, [r7, #40]	; 0x28
	memset(valeur,'\0',20*sizeof(char));
 8000d76:	193b      	adds	r3, r7, r4
 8000d78:	2214      	movs	r2, #20
 8000d7a:	2100      	movs	r1, #0
 8000d7c:	0018      	movs	r0, r3
 8000d7e:	f004 fd11 	bl	80057a4 <memset>
	sprintf((char*)valeur,"%"PRIu32"",Vreal); //%"PRIu32"
 8000d82:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000d84:	494e      	ldr	r1, [pc, #312]	; (8000ec0 <Conversion+0x1c0>)
 8000d86:	193b      	adds	r3, r7, r4
 8000d88:	0018      	movs	r0, r3
 8000d8a:	f004 fd13 	bl	80057b4 <siprintf>

	if(strlen((char*)valeur)==4){
 8000d8e:	193b      	adds	r3, r7, r4
 8000d90:	0018      	movs	r0, r3
 8000d92:	f7ff f9c3 	bl	800011c <strlen>
 8000d96:	0003      	movs	r3, r0
 8000d98:	2b04      	cmp	r3, #4
 8000d9a:	d10e      	bne.n	8000dba <Conversion+0xba>
		sprintf((char*)data,"%s%c%s","0,00",valeur[0]," \n\r");
 8000d9c:	193b      	adds	r3, r7, r4
 8000d9e:	781b      	ldrb	r3, [r3, #0]
 8000da0:	001c      	movs	r4, r3
 8000da2:	4a48      	ldr	r2, [pc, #288]	; (8000ec4 <Conversion+0x1c4>)
 8000da4:	4948      	ldr	r1, [pc, #288]	; (8000ec8 <Conversion+0x1c8>)
 8000da6:	0038      	movs	r0, r7
 8000da8:	4b48      	ldr	r3, [pc, #288]	; (8000ecc <Conversion+0x1cc>)
 8000daa:	9300      	str	r3, [sp, #0]
 8000dac:	0023      	movs	r3, r4
 8000dae:	f004 fd01 	bl	80057b4 <siprintf>
		DS_UART_Transmission(data);
 8000db2:	003b      	movs	r3, r7
 8000db4:	0018      	movs	r0, r3
 8000db6:	f000 fc21 	bl	80015fc <DS_UART_Transmission>
	}
	if(strlen((char*)valeur)==5){
 8000dba:	2414      	movs	r4, #20
 8000dbc:	193b      	adds	r3, r7, r4
 8000dbe:	0018      	movs	r0, r3
 8000dc0:	f7ff f9ac 	bl	800011c <strlen>
 8000dc4:	0003      	movs	r3, r0
 8000dc6:	2b05      	cmp	r3, #5
 8000dc8:	d113      	bne.n	8000df2 <Conversion+0xf2>
		sprintf((char*)data,"%s%c%c%s","0,0",valeur[0],valeur[1]," \n\r");
 8000dca:	0022      	movs	r2, r4
 8000dcc:	18bb      	adds	r3, r7, r2
 8000dce:	781b      	ldrb	r3, [r3, #0]
 8000dd0:	001d      	movs	r5, r3
 8000dd2:	18bb      	adds	r3, r7, r2
 8000dd4:	785b      	ldrb	r3, [r3, #1]
 8000dd6:	001c      	movs	r4, r3
 8000dd8:	4a3d      	ldr	r2, [pc, #244]	; (8000ed0 <Conversion+0x1d0>)
 8000dda:	493e      	ldr	r1, [pc, #248]	; (8000ed4 <Conversion+0x1d4>)
 8000ddc:	0038      	movs	r0, r7
 8000dde:	4b3b      	ldr	r3, [pc, #236]	; (8000ecc <Conversion+0x1cc>)
 8000de0:	9301      	str	r3, [sp, #4]
 8000de2:	9400      	str	r4, [sp, #0]
 8000de4:	002b      	movs	r3, r5
 8000de6:	f004 fce5 	bl	80057b4 <siprintf>
		DS_UART_Transmission(data);
 8000dea:	003b      	movs	r3, r7
 8000dec:	0018      	movs	r0, r3
 8000dee:	f000 fc05 	bl	80015fc <DS_UART_Transmission>
	}
	if(strlen((char*)valeur)==6){
 8000df2:	2414      	movs	r4, #20
 8000df4:	193b      	adds	r3, r7, r4
 8000df6:	0018      	movs	r0, r3
 8000df8:	f7ff f990 	bl	800011c <strlen>
 8000dfc:	0003      	movs	r3, r0
 8000dfe:	2b06      	cmp	r3, #6
 8000e00:	d117      	bne.n	8000e32 <Conversion+0x132>
		sprintf((char*)data,"%s%c%c%c%s","0,",valeur[0],valeur[1],valeur[2]," \n\r");
 8000e02:	0022      	movs	r2, r4
 8000e04:	18bb      	adds	r3, r7, r2
 8000e06:	781b      	ldrb	r3, [r3, #0]
 8000e08:	001e      	movs	r6, r3
 8000e0a:	18bb      	adds	r3, r7, r2
 8000e0c:	785b      	ldrb	r3, [r3, #1]
 8000e0e:	001c      	movs	r4, r3
 8000e10:	18bb      	adds	r3, r7, r2
 8000e12:	789b      	ldrb	r3, [r3, #2]
 8000e14:	001d      	movs	r5, r3
 8000e16:	4a30      	ldr	r2, [pc, #192]	; (8000ed8 <Conversion+0x1d8>)
 8000e18:	4930      	ldr	r1, [pc, #192]	; (8000edc <Conversion+0x1dc>)
 8000e1a:	0038      	movs	r0, r7
 8000e1c:	4b2b      	ldr	r3, [pc, #172]	; (8000ecc <Conversion+0x1cc>)
 8000e1e:	9302      	str	r3, [sp, #8]
 8000e20:	9501      	str	r5, [sp, #4]
 8000e22:	9400      	str	r4, [sp, #0]
 8000e24:	0033      	movs	r3, r6
 8000e26:	f004 fcc5 	bl	80057b4 <siprintf>
		DS_UART_Transmission(data);
 8000e2a:	003b      	movs	r3, r7
 8000e2c:	0018      	movs	r0, r3
 8000e2e:	f000 fbe5 	bl	80015fc <DS_UART_Transmission>
	}
	if(strlen((char*)valeur)>6){
 8000e32:	2414      	movs	r4, #20
 8000e34:	193b      	adds	r3, r7, r4
 8000e36:	0018      	movs	r0, r3
 8000e38:	f7ff f970 	bl	800011c <strlen>
 8000e3c:	0003      	movs	r3, r0
 8000e3e:	2b06      	cmp	r3, #6
 8000e40:	d91b      	bls.n	8000e7a <Conversion+0x17a>
		sprintf((char*)data,"%c%c%c%c%c%s",valeur[0],',',valeur[1],valeur[2],valeur[3]," \n\r");
 8000e42:	0021      	movs	r1, r4
 8000e44:	187b      	adds	r3, r7, r1
 8000e46:	781b      	ldrb	r3, [r3, #0]
 8000e48:	001e      	movs	r6, r3
 8000e4a:	187b      	adds	r3, r7, r1
 8000e4c:	785b      	ldrb	r3, [r3, #1]
 8000e4e:	001a      	movs	r2, r3
 8000e50:	187b      	adds	r3, r7, r1
 8000e52:	789b      	ldrb	r3, [r3, #2]
 8000e54:	001c      	movs	r4, r3
 8000e56:	187b      	adds	r3, r7, r1
 8000e58:	78db      	ldrb	r3, [r3, #3]
 8000e5a:	001d      	movs	r5, r3
 8000e5c:	4920      	ldr	r1, [pc, #128]	; (8000ee0 <Conversion+0x1e0>)
 8000e5e:	0038      	movs	r0, r7
 8000e60:	4b1a      	ldr	r3, [pc, #104]	; (8000ecc <Conversion+0x1cc>)
 8000e62:	9303      	str	r3, [sp, #12]
 8000e64:	9502      	str	r5, [sp, #8]
 8000e66:	9401      	str	r4, [sp, #4]
 8000e68:	9200      	str	r2, [sp, #0]
 8000e6a:	232c      	movs	r3, #44	; 0x2c
 8000e6c:	0032      	movs	r2, r6
 8000e6e:	f004 fca1 	bl	80057b4 <siprintf>
		DS_UART_Transmission(data);
 8000e72:	003b      	movs	r3, r7
 8000e74:	0018      	movs	r0, r3
 8000e76:	f000 fbc1 	bl	80015fc <DS_UART_Transmission>
	}
	if(strlen((char*)valeur)<=3) {
 8000e7a:	2314      	movs	r3, #20
 8000e7c:	18fb      	adds	r3, r7, r3
 8000e7e:	0018      	movs	r0, r3
 8000e80:	f7ff f94c 	bl	800011c <strlen>
 8000e84:	0003      	movs	r3, r0
 8000e86:	2b03      	cmp	r3, #3
 8000e88:	d809      	bhi.n	8000e9e <Conversion+0x19e>
		sprintf((char*)data,"%s","0 \n\r");
 8000e8a:	4a16      	ldr	r2, [pc, #88]	; (8000ee4 <Conversion+0x1e4>)
 8000e8c:	4916      	ldr	r1, [pc, #88]	; (8000ee8 <Conversion+0x1e8>)
 8000e8e:	003b      	movs	r3, r7
 8000e90:	0018      	movs	r0, r3
 8000e92:	f004 fc8f 	bl	80057b4 <siprintf>
		DS_UART_Transmission(data);
 8000e96:	003b      	movs	r3, r7
 8000e98:	0018      	movs	r0, r3
 8000e9a:	f000 fbaf 	bl	80015fc <DS_UART_Transmission>
	}



	HAL_GPIO_WritePin(GPIOB, DA_DISCH_Pin, GPIO_PIN_SET);
 8000e9e:	4b05      	ldr	r3, [pc, #20]	; (8000eb4 <Conversion+0x1b4>)
 8000ea0:	2201      	movs	r2, #1
 8000ea2:	2102      	movs	r1, #2
 8000ea4:	0018      	movs	r0, r3
 8000ea6:	f001 fb41 	bl	800252c <HAL_GPIO_WritePin>

	return ValeurADC ;
 8000eaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8000eac:	0018      	movs	r0, r3
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	b00d      	add	sp, #52	; 0x34
 8000eb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000eb4:	48000400 	.word	0x48000400
 8000eb8:	2000010c 	.word	0x2000010c
 8000ebc:	00000326 	.word	0x00000326
 8000ec0:	080060a0 	.word	0x080060a0
 8000ec4:	080060a4 	.word	0x080060a4
 8000ec8:	080060ac 	.word	0x080060ac
 8000ecc:	080060b4 	.word	0x080060b4
 8000ed0:	080060b8 	.word	0x080060b8
 8000ed4:	080060bc 	.word	0x080060bc
 8000ed8:	080060c8 	.word	0x080060c8
 8000edc:	080060cc 	.word	0x080060cc
 8000ee0:	080060d8 	.word	0x080060d8
 8000ee4:	080060e8 	.word	0x080060e8
 8000ee8:	080060f0 	.word	0x080060f0

08000eec <commendHandler>:
	data_send[1]= (data&0XFF00)>>8;
	return data_send;
}*/


void commendHandler (){
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b08a      	sub	sp, #40	; 0x28
 8000ef0:	af00      	add	r7, sp, #0
	uint32_t Val_Cmd=0 ;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	623b      	str	r3, [r7, #32]
	uint8_t data[30] ;

	DS_UART_Reception();
 8000ef6:	f000 fbb1 	bl	800165c <DS_UART_Reception>


	Val_Cmd = (DS_data[1]-48)*10000 +(DS_data[2]-48)*1000 + (DS_data[3]-48)*100 + (DS_data[4]-48)*10 + DS_data[5]-48 ;
 8000efa:	4bc2      	ldr	r3, [pc, #776]	; (8001204 <commendHandler+0x318>)
 8000efc:	785b      	ldrb	r3, [r3, #1]
 8000efe:	3b30      	subs	r3, #48	; 0x30
 8000f00:	4ac1      	ldr	r2, [pc, #772]	; (8001208 <commendHandler+0x31c>)
 8000f02:	435a      	muls	r2, r3
 8000f04:	0011      	movs	r1, r2
 8000f06:	4bbf      	ldr	r3, [pc, #764]	; (8001204 <commendHandler+0x318>)
 8000f08:	789b      	ldrb	r3, [r3, #2]
 8000f0a:	3b30      	subs	r3, #48	; 0x30
 8000f0c:	001a      	movs	r2, r3
 8000f0e:	0013      	movs	r3, r2
 8000f10:	015b      	lsls	r3, r3, #5
 8000f12:	1a9b      	subs	r3, r3, r2
 8000f14:	009b      	lsls	r3, r3, #2
 8000f16:	189b      	adds	r3, r3, r2
 8000f18:	00db      	lsls	r3, r3, #3
 8000f1a:	18ca      	adds	r2, r1, r3
 8000f1c:	4bb9      	ldr	r3, [pc, #740]	; (8001204 <commendHandler+0x318>)
 8000f1e:	78db      	ldrb	r3, [r3, #3]
 8000f20:	3b30      	subs	r3, #48	; 0x30
 8000f22:	2164      	movs	r1, #100	; 0x64
 8000f24:	434b      	muls	r3, r1
 8000f26:	18d1      	adds	r1, r2, r3
 8000f28:	4bb6      	ldr	r3, [pc, #728]	; (8001204 <commendHandler+0x318>)
 8000f2a:	791b      	ldrb	r3, [r3, #4]
 8000f2c:	3b30      	subs	r3, #48	; 0x30
 8000f2e:	001a      	movs	r2, r3
 8000f30:	0013      	movs	r3, r2
 8000f32:	009b      	lsls	r3, r3, #2
 8000f34:	189b      	adds	r3, r3, r2
 8000f36:	005b      	lsls	r3, r3, #1
 8000f38:	18cb      	adds	r3, r1, r3
 8000f3a:	4ab2      	ldr	r2, [pc, #712]	; (8001204 <commendHandler+0x318>)
 8000f3c:	7952      	ldrb	r2, [r2, #5]
 8000f3e:	189b      	adds	r3, r3, r2
 8000f40:	3b30      	subs	r3, #48	; 0x30
 8000f42:	623b      	str	r3, [r7, #32]
	switch(DS_data[0]){
 8000f44:	4baf      	ldr	r3, [pc, #700]	; (8001204 <commendHandler+0x318>)
 8000f46:	781b      	ldrb	r3, [r3, #0]
 8000f48:	3b41      	subs	r3, #65	; 0x41
 8000f4a:	2b17      	cmp	r3, #23
 8000f4c:	d900      	bls.n	8000f50 <commendHandler+0x64>
 8000f4e:	e215      	b.n	800137c <commendHandler+0x490>
 8000f50:	009a      	lsls	r2, r3, #2
 8000f52:	4bae      	ldr	r3, [pc, #696]	; (800120c <commendHandler+0x320>)
 8000f54:	18d3      	adds	r3, r2, r3
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	469f      	mov	pc, r3
	case 'F':
				if(Val_Cmd <= 10000){
 8000f5a:	6a3b      	ldr	r3, [r7, #32]
 8000f5c:	4aaa      	ldr	r2, [pc, #680]	; (8001208 <commendHandler+0x31c>)
 8000f5e:	4293      	cmp	r3, r2
 8000f60:	d80e      	bhi.n	8000f80 <commendHandler+0x94>
					ConfigDS1086 (Val_Cmd) ;
 8000f62:	6a3b      	ldr	r3, [r7, #32]
 8000f64:	0018      	movs	r0, r3
 8000f66:	f7ff fd2f 	bl	80009c8 <ConfigDS1086>
					DS_UART_Transmission (DS_data);
 8000f6a:	4ba6      	ldr	r3, [pc, #664]	; (8001204 <commendHandler+0x318>)
 8000f6c:	0018      	movs	r0, r3
 8000f6e:	f000 fb45 	bl	80015fc <DS_UART_Transmission>
					DS_UART_Transmission ((uint8_t *)" : ");
 8000f72:	4ba7      	ldr	r3, [pc, #668]	; (8001210 <commendHandler+0x324>)
 8000f74:	0018      	movs	r0, r3
 8000f76:	f000 fb41 	bl	80015fc <DS_UART_Transmission>
					Conversion () ;
 8000f7a:	f7ff fec1 	bl	8000d00 <Conversion>
				}
				else {DS_UART_Transmission ((uint8_t *)"Maximum frequency 10MHz\n\r");}
				break ;
 8000f7e:	e20a      	b.n	8001396 <commendHandler+0x4aa>
				else {DS_UART_Transmission ((uint8_t *)"Maximum frequency 10MHz\n\r");}
 8000f80:	4ba4      	ldr	r3, [pc, #656]	; (8001214 <commendHandler+0x328>)
 8000f82:	0018      	movs	r0, r3
 8000f84:	f000 fb3a 	bl	80015fc <DS_UART_Transmission>
				break ;
 8000f88:	e205      	b.n	8001396 <commendHandler+0x4aa>
	case 'T':
				if(Val_Cmd==11111){
 8000f8a:	6a3b      	ldr	r3, [r7, #32]
 8000f8c:	4aa2      	ldr	r2, [pc, #648]	; (8001218 <commendHandler+0x32c>)
 8000f8e:	4293      	cmp	r3, r2
 8000f90:	d10a      	bne.n	8000fa8 <commendHandler+0xbc>
					HAL_GPIO_WritePin(GPIOB, DA_TEST_Pin, GPIO_PIN_SET);
 8000f92:	4ba2      	ldr	r3, [pc, #648]	; (800121c <commendHandler+0x330>)
 8000f94:	2201      	movs	r2, #1
 8000f96:	2110      	movs	r1, #16
 8000f98:	0018      	movs	r0, r3
 8000f9a:	f001 fac7 	bl	800252c <HAL_GPIO_WritePin>
					DS_UART_Transmission((uint8_t *)"Circuit_test_Enable\n\r");
 8000f9e:	4ba0      	ldr	r3, [pc, #640]	; (8001220 <commendHandler+0x334>)
 8000fa0:	0018      	movs	r0, r3
 8000fa2:	f000 fb2b 	bl	80015fc <DS_UART_Transmission>
				}
				else {
					HAL_GPIO_WritePin(GPIOB, DA_TEST_Pin, GPIO_PIN_RESET);
					DS_UART_Transmission((uint8_t *)"Circuit_test_Disable\n\r");
				}
				break ;
 8000fa6:	e1f6      	b.n	8001396 <commendHandler+0x4aa>
					HAL_GPIO_WritePin(GPIOB, DA_TEST_Pin, GPIO_PIN_RESET);
 8000fa8:	4b9c      	ldr	r3, [pc, #624]	; (800121c <commendHandler+0x330>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	2110      	movs	r1, #16
 8000fae:	0018      	movs	r0, r3
 8000fb0:	f001 fabc 	bl	800252c <HAL_GPIO_WritePin>
					DS_UART_Transmission((uint8_t *)"Circuit_test_Disable\n\r");
 8000fb4:	4b9b      	ldr	r3, [pc, #620]	; (8001224 <commendHandler+0x338>)
 8000fb6:	0018      	movs	r0, r3
 8000fb8:	f000 fb20 	bl	80015fc <DS_UART_Transmission>
				break ;
 8000fbc:	e1eb      	b.n	8001396 <commendHandler+0x4aa>
	case 'D':
				if(Val_Cmd==11111){
 8000fbe:	6a3b      	ldr	r3, [r7, #32]
 8000fc0:	4a95      	ldr	r2, [pc, #596]	; (8001218 <commendHandler+0x32c>)
 8000fc2:	4293      	cmp	r3, r2
 8000fc4:	d10a      	bne.n	8000fdc <commendHandler+0xf0>
					HAL_GPIO_WritePin(GPIOB, DA_DISCH_Pin, GPIO_PIN_SET);
 8000fc6:	4b95      	ldr	r3, [pc, #596]	; (800121c <commendHandler+0x330>)
 8000fc8:	2201      	movs	r2, #1
 8000fca:	2102      	movs	r1, #2
 8000fcc:	0018      	movs	r0, r3
 8000fce:	f001 faad 	bl	800252c <HAL_GPIO_WritePin>
					DS_UART_Transmission((uint8_t *)"DA_DISCH_Enable\n\r");
 8000fd2:	4b95      	ldr	r3, [pc, #596]	; (8001228 <commendHandler+0x33c>)
 8000fd4:	0018      	movs	r0, r3
 8000fd6:	f000 fb11 	bl	80015fc <DS_UART_Transmission>
				}
				else {
					HAL_GPIO_WritePin(GPIOB, DA_DISCH_Pin, GPIO_PIN_RESET);
					DS_UART_Transmission((uint8_t *)"DA_DISCH_Disable\n\r");
				}
				break ;
 8000fda:	e1dc      	b.n	8001396 <commendHandler+0x4aa>
					HAL_GPIO_WritePin(GPIOB, DA_DISCH_Pin, GPIO_PIN_RESET);
 8000fdc:	4b8f      	ldr	r3, [pc, #572]	; (800121c <commendHandler+0x330>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	2102      	movs	r1, #2
 8000fe2:	0018      	movs	r0, r3
 8000fe4:	f001 faa2 	bl	800252c <HAL_GPIO_WritePin>
					DS_UART_Transmission((uint8_t *)"DA_DISCH_Disable\n\r");
 8000fe8:	4b90      	ldr	r3, [pc, #576]	; (800122c <commendHandler+0x340>)
 8000fea:	0018      	movs	r0, r3
 8000fec:	f000 fb06 	bl	80015fc <DS_UART_Transmission>
				break ;
 8000ff0:	e1d1      	b.n	8001396 <commendHandler+0x4aa>
	case 'X':
				DS_UART_Transmission (DS_data);
 8000ff2:	4b84      	ldr	r3, [pc, #528]	; (8001204 <commendHandler+0x318>)
 8000ff4:	0018      	movs	r0, r3
 8000ff6:	f000 fb01 	bl	80015fc <DS_UART_Transmission>
				DS_UART_Transmission((uint8_t *)"  ");
 8000ffa:	4b8d      	ldr	r3, [pc, #564]	; (8001230 <commendHandler+0x344>)
 8000ffc:	0018      	movs	r0, r3
 8000ffe:	f000 fafd 	bl	80015fc <DS_UART_Transmission>
				if(Val_Cmd>=400) {
 8001002:	6a3a      	ldr	r2, [r7, #32]
 8001004:	23c8      	movs	r3, #200	; 0xc8
 8001006:	005b      	lsls	r3, r3, #1
 8001008:	429a      	cmp	r2, r3
 800100a:	d30f      	bcc.n	800102c <commendHandler+0x140>
					Sweep_Start=Val_Cmd ;
 800100c:	4b89      	ldr	r3, [pc, #548]	; (8001234 <commendHandler+0x348>)
 800100e:	6a3a      	ldr	r2, [r7, #32]
 8001010:	601a      	str	r2, [r3, #0]
					DS_UART_Transmission ((uint8_t *)"Start_Scan ");
 8001012:	4b89      	ldr	r3, [pc, #548]	; (8001238 <commendHandler+0x34c>)
 8001014:	0018      	movs	r0, r3
 8001016:	f000 faf1 	bl	80015fc <DS_UART_Transmission>
					DS_UART_Transmission (DS_data+1);
 800101a:	4b88      	ldr	r3, [pc, #544]	; (800123c <commendHandler+0x350>)
 800101c:	0018      	movs	r0, r3
 800101e:	f000 faed 	bl	80015fc <DS_UART_Transmission>
					DS_UART_Transmission ((uint8_t *)"\n\r");
 8001022:	4b87      	ldr	r3, [pc, #540]	; (8001240 <commendHandler+0x354>)
 8001024:	0018      	movs	r0, r3
 8001026:	f000 fae9 	bl	80015fc <DS_UART_Transmission>
				}
				else {Sweep_Start=400 ;DS_UART_Transmission ((uint8_t *)"Minimum frequency 400KHz\n\r");}
				break ;
 800102a:	e1b4      	b.n	8001396 <commendHandler+0x4aa>
				else {Sweep_Start=400 ;DS_UART_Transmission ((uint8_t *)"Minimum frequency 400KHz\n\r");}
 800102c:	4b81      	ldr	r3, [pc, #516]	; (8001234 <commendHandler+0x348>)
 800102e:	22c8      	movs	r2, #200	; 0xc8
 8001030:	0052      	lsls	r2, r2, #1
 8001032:	601a      	str	r2, [r3, #0]
 8001034:	4b83      	ldr	r3, [pc, #524]	; (8001244 <commendHandler+0x358>)
 8001036:	0018      	movs	r0, r3
 8001038:	f000 fae0 	bl	80015fc <DS_UART_Transmission>
				break ;
 800103c:	e1ab      	b.n	8001396 <commendHandler+0x4aa>
	case 'C':
				DS_UART_Transmission (DS_data);
 800103e:	4b71      	ldr	r3, [pc, #452]	; (8001204 <commendHandler+0x318>)
 8001040:	0018      	movs	r0, r3
 8001042:	f000 fadb 	bl	80015fc <DS_UART_Transmission>
				DS_UART_Transmission((uint8_t *)"  ");
 8001046:	4b7a      	ldr	r3, [pc, #488]	; (8001230 <commendHandler+0x344>)
 8001048:	0018      	movs	r0, r3
 800104a:	f000 fad7 	bl	80015fc <DS_UART_Transmission>
				if(Val_Cmd<=10000 ) {
 800104e:	6a3b      	ldr	r3, [r7, #32]
 8001050:	4a6d      	ldr	r2, [pc, #436]	; (8001208 <commendHandler+0x31c>)
 8001052:	4293      	cmp	r3, r2
 8001054:	d80f      	bhi.n	8001076 <commendHandler+0x18a>
					Sweep_End=Val_Cmd ;
 8001056:	4b7c      	ldr	r3, [pc, #496]	; (8001248 <commendHandler+0x35c>)
 8001058:	6a3a      	ldr	r2, [r7, #32]
 800105a:	601a      	str	r2, [r3, #0]
					DS_UART_Transmission ((uint8_t *)"End_Scan ");
 800105c:	4b7b      	ldr	r3, [pc, #492]	; (800124c <commendHandler+0x360>)
 800105e:	0018      	movs	r0, r3
 8001060:	f000 facc 	bl	80015fc <DS_UART_Transmission>
					DS_UART_Transmission (DS_data+1);
 8001064:	4b75      	ldr	r3, [pc, #468]	; (800123c <commendHandler+0x350>)
 8001066:	0018      	movs	r0, r3
 8001068:	f000 fac8 	bl	80015fc <DS_UART_Transmission>
					DS_UART_Transmission ((uint8_t *)"\n\r");
 800106c:	4b74      	ldr	r3, [pc, #464]	; (8001240 <commendHandler+0x354>)
 800106e:	0018      	movs	r0, r3
 8001070:	f000 fac4 	bl	80015fc <DS_UART_Transmission>

				}
				else {Sweep_End=10000 ;DS_UART_Transmission ((uint8_t *)"Maximum frequency 10MHz\n\r");}
				break ;
 8001074:	e18f      	b.n	8001396 <commendHandler+0x4aa>
				else {Sweep_End=10000 ;DS_UART_Transmission ((uint8_t *)"Maximum frequency 10MHz\n\r");}
 8001076:	4b74      	ldr	r3, [pc, #464]	; (8001248 <commendHandler+0x35c>)
 8001078:	4a63      	ldr	r2, [pc, #396]	; (8001208 <commendHandler+0x31c>)
 800107a:	601a      	str	r2, [r3, #0]
 800107c:	4b65      	ldr	r3, [pc, #404]	; (8001214 <commendHandler+0x328>)
 800107e:	0018      	movs	r0, r3
 8001080:	f000 fabc 	bl	80015fc <DS_UART_Transmission>
				break ;
 8001084:	e187      	b.n	8001396 <commendHandler+0x4aa>
	case 'S':
				DS_UART_Transmission (DS_data);
 8001086:	4b5f      	ldr	r3, [pc, #380]	; (8001204 <commendHandler+0x318>)
 8001088:	0018      	movs	r0, r3
 800108a:	f000 fab7 	bl	80015fc <DS_UART_Transmission>
				DS_UART_Transmission((uint8_t *)"  ");
 800108e:	4b68      	ldr	r3, [pc, #416]	; (8001230 <commendHandler+0x344>)
 8001090:	0018      	movs	r0, r3
 8001092:	f000 fab3 	bl	80015fc <DS_UART_Transmission>
				if(Val_Cmd>=10) {
 8001096:	6a3b      	ldr	r3, [r7, #32]
 8001098:	2b09      	cmp	r3, #9
 800109a:	d90f      	bls.n	80010bc <commendHandler+0x1d0>
					Sweep_Step=Val_Cmd ;
 800109c:	4b6c      	ldr	r3, [pc, #432]	; (8001250 <commendHandler+0x364>)
 800109e:	6a3a      	ldr	r2, [r7, #32]
 80010a0:	601a      	str	r2, [r3, #0]
					DS_UART_Transmission ((uint8_t *)"Step_Scan ");
 80010a2:	4b6c      	ldr	r3, [pc, #432]	; (8001254 <commendHandler+0x368>)
 80010a4:	0018      	movs	r0, r3
 80010a6:	f000 faa9 	bl	80015fc <DS_UART_Transmission>
					DS_UART_Transmission (DS_data+1);
 80010aa:	4b64      	ldr	r3, [pc, #400]	; (800123c <commendHandler+0x350>)
 80010ac:	0018      	movs	r0, r3
 80010ae:	f000 faa5 	bl	80015fc <DS_UART_Transmission>
					DS_UART_Transmission ((uint8_t *)"\n\r");
 80010b2:	4b63      	ldr	r3, [pc, #396]	; (8001240 <commendHandler+0x354>)
 80010b4:	0018      	movs	r0, r3
 80010b6:	f000 faa1 	bl	80015fc <DS_UART_Transmission>
				}
				else { Sweep_Step=10 ; DS_UART_Transmission ((uint8_t *)"Step min=10\n\r"); }
				break ;
 80010ba:	e16c      	b.n	8001396 <commendHandler+0x4aa>
				else { Sweep_Step=10 ; DS_UART_Transmission ((uint8_t *)"Step min=10\n\r"); }
 80010bc:	4b64      	ldr	r3, [pc, #400]	; (8001250 <commendHandler+0x364>)
 80010be:	220a      	movs	r2, #10
 80010c0:	601a      	str	r2, [r3, #0]
 80010c2:	4b65      	ldr	r3, [pc, #404]	; (8001258 <commendHandler+0x36c>)
 80010c4:	0018      	movs	r0, r3
 80010c6:	f000 fa99 	bl	80015fc <DS_UART_Transmission>
				break ;
 80010ca:	e164      	b.n	8001396 <commendHandler+0x4aa>
	case 'B' :
				DS_UART_Transmission (DS_data);
 80010cc:	4b4d      	ldr	r3, [pc, #308]	; (8001204 <commendHandler+0x318>)
 80010ce:	0018      	movs	r0, r3
 80010d0:	f000 fa94 	bl	80015fc <DS_UART_Transmission>
				DS_UART_Transmission((uint8_t *)"\n\r");
 80010d4:	4b5a      	ldr	r3, [pc, #360]	; (8001240 <commendHandler+0x354>)
 80010d6:	0018      	movs	r0, r3
 80010d8:	f000 fa90 	bl	80015fc <DS_UART_Transmission>
				if(Sweep_Start < Sweep_End){
 80010dc:	4b55      	ldr	r3, [pc, #340]	; (8001234 <commendHandler+0x348>)
 80010de:	681a      	ldr	r2, [r3, #0]
 80010e0:	4b59      	ldr	r3, [pc, #356]	; (8001248 <commendHandler+0x35c>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	429a      	cmp	r2, r3
 80010e6:	d21e      	bcs.n	8001126 <commendHandler+0x23a>
					for(uint32_t i= Sweep_Start; i <= Sweep_End; i+=Sweep_Step) {
 80010e8:	4b52      	ldr	r3, [pc, #328]	; (8001234 <commendHandler+0x348>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	627b      	str	r3, [r7, #36]	; 0x24
 80010ee:	e014      	b.n	800111a <commendHandler+0x22e>
						sprintf((char*)data,"%"PRIu32"%s",i," : ");
 80010f0:	4b47      	ldr	r3, [pc, #284]	; (8001210 <commendHandler+0x324>)
 80010f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80010f4:	4959      	ldr	r1, [pc, #356]	; (800125c <commendHandler+0x370>)
 80010f6:	0038      	movs	r0, r7
 80010f8:	f004 fb5c 	bl	80057b4 <siprintf>
						DS_UART_Transmission(data);
 80010fc:	003b      	movs	r3, r7
 80010fe:	0018      	movs	r0, r3
 8001100:	f000 fa7c 	bl	80015fc <DS_UART_Transmission>
						ConfigDS1086 (i) ;
 8001104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001106:	0018      	movs	r0, r3
 8001108:	f7ff fc5e 	bl	80009c8 <ConfigDS1086>
						Conversion () ;
 800110c:	f7ff fdf8 	bl	8000d00 <Conversion>
					for(uint32_t i= Sweep_Start; i <= Sweep_End; i+=Sweep_Step) {
 8001110:	4b4f      	ldr	r3, [pc, #316]	; (8001250 <commendHandler+0x364>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001116:	18d3      	adds	r3, r2, r3
 8001118:	627b      	str	r3, [r7, #36]	; 0x24
 800111a:	4b4b      	ldr	r3, [pc, #300]	; (8001248 <commendHandler+0x35c>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001120:	429a      	cmp	r2, r3
 8001122:	d9e5      	bls.n	80010f0 <commendHandler+0x204>
					}
			    }
				else {
					DS_UART_Transmission ((uint8_t *)"t'es con ou quoi Sweep_Start > Sweep_End\n\r");
					}
				break;
 8001124:	e137      	b.n	8001396 <commendHandler+0x4aa>
					DS_UART_Transmission ((uint8_t *)"t'es con ou quoi Sweep_Start > Sweep_End\n\r");
 8001126:	4b4e      	ldr	r3, [pc, #312]	; (8001260 <commendHandler+0x374>)
 8001128:	0018      	movs	r0, r3
 800112a:	f000 fa67 	bl	80015fc <DS_UART_Transmission>
				break;
 800112e:	e132      	b.n	8001396 <commendHandler+0x4aa>
	case 'I':
				DS_UART_Transmission((uint8_t *)"Version 10/01/2023 Creator : EL-HOMAINI ISSA \n\r");
 8001130:	4b4c      	ldr	r3, [pc, #304]	; (8001264 <commendHandler+0x378>)
 8001132:	0018      	movs	r0, r3
 8001134:	f000 fa62 	bl	80015fc <DS_UART_Transmission>
				break ;
 8001138:	e12d      	b.n	8001396 <commendHandler+0x4aa>
	case 'H':
				DS_UART_Transmission((uint8_t *)"************************************************\n\r");
 800113a:	4b4b      	ldr	r3, [pc, #300]	; (8001268 <commendHandler+0x37c>)
 800113c:	0018      	movs	r0, r3
 800113e:	f000 fa5d 	bl	80015fc <DS_UART_Transmission>
				DS_UART_Transmission((uint8_t *)"**************ALL AVAILABE COMMAND**************\n\r");
 8001142:	4b4a      	ldr	r3, [pc, #296]	; (800126c <commendHandler+0x380>)
 8001144:	0018      	movs	r0, r3
 8001146:	f000 fa59 	bl	80015fc <DS_UART_Transmission>
				DS_UART_Transmission((uint8_t *)"***+++++++++++++++++++++++++++++++++++++++++****\n\r");
 800114a:	4b49      	ldr	r3, [pc, #292]	; (8001270 <commendHandler+0x384>)
 800114c:	0018      	movs	r0, r3
 800114e:	f000 fa55 	bl	80015fc <DS_UART_Transmission>
				DS_UART_Transmission((uint8_t *)"***+ All command have sex caracter         +****\n\r");
 8001152:	4b48      	ldr	r3, [pc, #288]	; (8001274 <commendHandler+0x388>)
 8001154:	0018      	movs	r0, r3
 8001156:	f000 fa51 	bl	80015fc <DS_UART_Transmission>
				DS_UART_Transmission((uint8_t *)"***+ Fx: Give value at x frequency         +****\n\r");
 800115a:	4b47      	ldr	r3, [pc, #284]	; (8001278 <commendHandler+0x38c>)
 800115c:	0018      	movs	r0, r3
 800115e:	f000 fa4d 	bl	80015fc <DS_UART_Transmission>
				DS_UART_Transmission((uint8_t *)"***+ T11111: Enable Cicuit Test            +****\n\r");
 8001162:	4b46      	ldr	r3, [pc, #280]	; (800127c <commendHandler+0x390>)
 8001164:	0018      	movs	r0, r3
 8001166:	f000 fa49 	bl	80015fc <DS_UART_Transmission>
				DS_UART_Transmission((uint8_t *)"***+ T!: Disnable Cicuit Test              +****\n\r");
 800116a:	4b45      	ldr	r3, [pc, #276]	; (8001280 <commendHandler+0x394>)
 800116c:	0018      	movs	r0, r3
 800116e:	f000 fa45 	bl	80015fc <DS_UART_Transmission>
				DS_UART_Transmission((uint8_t *)"***+ D11111: DA_DISCH Enable               +****\n\r");
 8001172:	4b44      	ldr	r3, [pc, #272]	; (8001284 <commendHandler+0x398>)
 8001174:	0018      	movs	r0, r3
 8001176:	f000 fa41 	bl	80015fc <DS_UART_Transmission>
				DS_UART_Transmission((uint8_t *)"***+ D!: DA_DISCH Disnable                 +****\n\r");
 800117a:	4b43      	ldr	r3, [pc, #268]	; (8001288 <commendHandler+0x39c>)
 800117c:	0018      	movs	r0, r3
 800117e:	f000 fa3d 	bl	80015fc <DS_UART_Transmission>
				DS_UART_Transmission((uint8_t *)"***+ Xx: Start sweeping at x frequency     +****\n\r");
 8001182:	4b42      	ldr	r3, [pc, #264]	; (800128c <commendHandler+0x3a0>)
 8001184:	0018      	movs	r0, r3
 8001186:	f000 fa39 	bl	80015fc <DS_UART_Transmission>
				DS_UART_Transmission((uint8_t *)"***+ Cx: End sweeping at x frequency       +****\n\r");
 800118a:	4b41      	ldr	r3, [pc, #260]	; (8001290 <commendHandler+0x3a4>)
 800118c:	0018      	movs	r0, r3
 800118e:	f000 fa35 	bl	80015fc <DS_UART_Transmission>
				DS_UART_Transmission((uint8_t *)"***+ Sx: Step sweeping x                   +****\n\r");
 8001192:	4b40      	ldr	r3, [pc, #256]	; (8001294 <commendHandler+0x3a8>)
 8001194:	0018      	movs	r0, r3
 8001196:	f000 fa31 	bl	80015fc <DS_UART_Transmission>
				DS_UART_Transmission((uint8_t *)"***+ I!: Version software                  +****\n\r");
 800119a:	4b3f      	ldr	r3, [pc, #252]	; (8001298 <commendHandler+0x3ac>)
 800119c:	0018      	movs	r0, r3
 800119e:	f000 fa2d 	bl	80015fc <DS_UART_Transmission>
				DS_UART_Transmission((uint8_t *)"***+ M!: Mesure consumption                +****\n\r");
 80011a2:	4b3e      	ldr	r3, [pc, #248]	; (800129c <commendHandler+0x3b0>)
 80011a4:	0018      	movs	r0, r3
 80011a6:	f000 fa29 	bl	80015fc <DS_UART_Transmission>
				DS_UART_Transmission((uint8_t *)"***+ A!: Secure mode                       +****\n\r");
 80011aa:	4b3d      	ldr	r3, [pc, #244]	; (80012a0 <commendHandler+0x3b4>)
 80011ac:	0018      	movs	r0, r3
 80011ae:	f000 fa25 	bl	80015fc <DS_UART_Transmission>
				DS_UART_Transmission((uint8_t *)"***+ !:any caracter x:number 5 digits      +****\n\r");
 80011b2:	4b3c      	ldr	r3, [pc, #240]	; (80012a4 <commendHandler+0x3b8>)
 80011b4:	0018      	movs	r0, r3
 80011b6:	f000 fa21 	bl	80015fc <DS_UART_Transmission>
				DS_UART_Transmission((uint8_t *)"***++++++++++++++++++++++++++++++++++++++++*****\n\r");
 80011ba:	4b3b      	ldr	r3, [pc, #236]	; (80012a8 <commendHandler+0x3bc>)
 80011bc:	0018      	movs	r0, r3
 80011be:	f000 fa1d 	bl	80015fc <DS_UART_Transmission>
				DS_UART_Transmission((uint8_t *)"************************************************\n\r");
 80011c2:	4b29      	ldr	r3, [pc, #164]	; (8001268 <commendHandler+0x37c>)
 80011c4:	0018      	movs	r0, r3
 80011c6:	f000 fa19 	bl	80015fc <DS_UART_Transmission>
				break ;
 80011ca:	e0e4      	b.n	8001396 <commendHandler+0x4aa>
	case 'M':
				DS_UART_Transmission (DS_data);
 80011cc:	4b0d      	ldr	r3, [pc, #52]	; (8001204 <commendHandler+0x318>)
 80011ce:	0018      	movs	r0, r3
 80011d0:	f000 fa14 	bl	80015fc <DS_UART_Transmission>
				DS_UART_Transmission((uint8_t *)"\n\r");
 80011d4:	4b1a      	ldr	r3, [pc, #104]	; (8001240 <commendHandler+0x354>)
 80011d6:	0018      	movs	r0, r3
 80011d8:	f000 fa10 	bl	80015fc <DS_UART_Transmission>
				ConfigDS1086 (995) ;
 80011dc:	4b33      	ldr	r3, [pc, #204]	; (80012ac <commendHandler+0x3c0>)
 80011de:	0018      	movs	r0, r3
 80011e0:	f7ff fbf2 	bl	80009c8 <ConfigDS1086>
				HAL_UART_Receive_IT(&huart2,DS_data,1);
 80011e4:	4907      	ldr	r1, [pc, #28]	; (8001204 <commendHandler+0x318>)
 80011e6:	4b32      	ldr	r3, [pc, #200]	; (80012b0 <commendHandler+0x3c4>)
 80011e8:	2201      	movs	r2, #1
 80011ea:	0018      	movs	r0, r3
 80011ec:	f003 f8e6 	bl	80043bc <HAL_UART_Receive_IT>
				DS_Wait_Receiption=0;
 80011f0:	4b30      	ldr	r3, [pc, #192]	; (80012b4 <commendHandler+0x3c8>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	701a      	strb	r2, [r3, #0]
				do{
					Conversion () ;
 80011f6:	f7ff fd83 	bl	8000d00 <Conversion>
				}while(!DS_Wait_Receiption);
 80011fa:	4b2e      	ldr	r3, [pc, #184]	; (80012b4 <commendHandler+0x3c8>)
 80011fc:	781b      	ldrb	r3, [r3, #0]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d0f9      	beq.n	80011f6 <commendHandler+0x30a>
				break ;
 8001202:	e0c8      	b.n	8001396 <commendHandler+0x4aa>
 8001204:	20000020 	.word	0x20000020
 8001208:	00002710 	.word	0x00002710
 800120c:	08006694 	.word	0x08006694
 8001210:	080060f4 	.word	0x080060f4
 8001214:	080060f8 	.word	0x080060f8
 8001218:	00002b67 	.word	0x00002b67
 800121c:	48000400 	.word	0x48000400
 8001220:	08006114 	.word	0x08006114
 8001224:	0800612c 	.word	0x0800612c
 8001228:	08006144 	.word	0x08006144
 800122c:	08006158 	.word	0x08006158
 8001230:	0800616c 	.word	0x0800616c
 8001234:	20000078 	.word	0x20000078
 8001238:	08006170 	.word	0x08006170
 800123c:	20000021 	.word	0x20000021
 8001240:	0800617c 	.word	0x0800617c
 8001244:	08006180 	.word	0x08006180
 8001248:	2000007c 	.word	0x2000007c
 800124c:	0800619c 	.word	0x0800619c
 8001250:	20000080 	.word	0x20000080
 8001254:	080061a8 	.word	0x080061a8
 8001258:	080061b4 	.word	0x080061b4
 800125c:	080061c4 	.word	0x080061c4
 8001260:	080061cc 	.word	0x080061cc
 8001264:	080061f8 	.word	0x080061f8
 8001268:	08006228 	.word	0x08006228
 800126c:	0800625c 	.word	0x0800625c
 8001270:	08006290 	.word	0x08006290
 8001274:	080062c4 	.word	0x080062c4
 8001278:	080062f8 	.word	0x080062f8
 800127c:	0800632c 	.word	0x0800632c
 8001280:	08006360 	.word	0x08006360
 8001284:	08006394 	.word	0x08006394
 8001288:	080063c8 	.word	0x080063c8
 800128c:	080063fc 	.word	0x080063fc
 8001290:	08006430 	.word	0x08006430
 8001294:	08006464 	.word	0x08006464
 8001298:	08006498 	.word	0x08006498
 800129c:	080064cc 	.word	0x080064cc
 80012a0:	08006500 	.word	0x08006500
 80012a4:	08006534 	.word	0x08006534
 80012a8:	08006568 	.word	0x08006568
 80012ac:	000003e3 	.word	0x000003e3
 80012b0:	200001e0 	.word	0x200001e0
 80012b4:	200002a6 	.word	0x200002a6

	case 'A':
				DS_UART_Transmission (DS_data);
 80012b8:	4b39      	ldr	r3, [pc, #228]	; (80013a0 <commendHandler+0x4b4>)
 80012ba:	0018      	movs	r0, r3
 80012bc:	f000 f99e 	bl	80015fc <DS_UART_Transmission>
				DS_UART_Transmission((uint8_t *)"\n\rPassword :");
 80012c0:	4b38      	ldr	r3, [pc, #224]	; (80013a4 <commendHandler+0x4b8>)
 80012c2:	0018      	movs	r0, r3
 80012c4:	f000 f99a 	bl	80015fc <DS_UART_Transmission>
				DS_UART_Reception ();
 80012c8:	f000 f9c8 	bl	800165c <DS_UART_Reception>
				//DS_UART_Transmission((uint8_t *)"\n\r");
				if(!strcmp((char*)DS_data,(char*)"ISSAAA")){
 80012cc:	4a36      	ldr	r2, [pc, #216]	; (80013a8 <commendHandler+0x4bc>)
 80012ce:	4b34      	ldr	r3, [pc, #208]	; (80013a0 <commendHandler+0x4b4>)
 80012d0:	0011      	movs	r1, r2
 80012d2:	0018      	movs	r0, r3
 80012d4:	f7fe ff18 	bl	8000108 <strcmp>
 80012d8:	1e03      	subs	r3, r0, #0
 80012da:	d14a      	bne.n	8001372 <commendHandler+0x486>
					DS_UART_Transmission((uint8_t *)"Correct \n\r");
 80012dc:	4b33      	ldr	r3, [pc, #204]	; (80013ac <commendHandler+0x4c0>)
 80012de:	0018      	movs	r0, r3
 80012e0:	f000 f98c 	bl	80015fc <DS_UART_Transmission>
					DS_UART_Transmission((uint8_t *)"you are in secure mode \n\r");
 80012e4:	4b32      	ldr	r3, [pc, #200]	; (80013b0 <commendHandler+0x4c4>)
 80012e6:	0018      	movs	r0, r3
 80012e8:	f000 f988 	bl	80015fc <DS_UART_Transmission>
					DS_UART_Transmission((uint8_t *)"Now you can configure frequency intel 66MHz  \n\r");
 80012ec:	4b31      	ldr	r3, [pc, #196]	; (80013b4 <commendHandler+0x4c8>)
 80012ee:	0018      	movs	r0, r3
 80012f0:	f000 f984 	bl	80015fc <DS_UART_Transmission>
					//UART_Transmission((uint8_t *)"Now you can configure frequence intel 66MHz  \n\r");
					DS_UART_Reception ();
 80012f4:	f000 f9b2 	bl	800165c <DS_UART_Reception>
					Val_Cmd = (DS_data[1]-48)*10000 +(DS_data[2]-48)*1000 + (DS_data[3]-48)*100 + (DS_data[4]-48)*10 + DS_data[5]-48 ;
 80012f8:	4b29      	ldr	r3, [pc, #164]	; (80013a0 <commendHandler+0x4b4>)
 80012fa:	785b      	ldrb	r3, [r3, #1]
 80012fc:	3b30      	subs	r3, #48	; 0x30
 80012fe:	4a2e      	ldr	r2, [pc, #184]	; (80013b8 <commendHandler+0x4cc>)
 8001300:	435a      	muls	r2, r3
 8001302:	0011      	movs	r1, r2
 8001304:	4b26      	ldr	r3, [pc, #152]	; (80013a0 <commendHandler+0x4b4>)
 8001306:	789b      	ldrb	r3, [r3, #2]
 8001308:	3b30      	subs	r3, #48	; 0x30
 800130a:	001a      	movs	r2, r3
 800130c:	0013      	movs	r3, r2
 800130e:	015b      	lsls	r3, r3, #5
 8001310:	1a9b      	subs	r3, r3, r2
 8001312:	009b      	lsls	r3, r3, #2
 8001314:	189b      	adds	r3, r3, r2
 8001316:	00db      	lsls	r3, r3, #3
 8001318:	18ca      	adds	r2, r1, r3
 800131a:	4b21      	ldr	r3, [pc, #132]	; (80013a0 <commendHandler+0x4b4>)
 800131c:	78db      	ldrb	r3, [r3, #3]
 800131e:	3b30      	subs	r3, #48	; 0x30
 8001320:	2164      	movs	r1, #100	; 0x64
 8001322:	434b      	muls	r3, r1
 8001324:	18d1      	adds	r1, r2, r3
 8001326:	4b1e      	ldr	r3, [pc, #120]	; (80013a0 <commendHandler+0x4b4>)
 8001328:	791b      	ldrb	r3, [r3, #4]
 800132a:	3b30      	subs	r3, #48	; 0x30
 800132c:	001a      	movs	r2, r3
 800132e:	0013      	movs	r3, r2
 8001330:	009b      	lsls	r3, r3, #2
 8001332:	189b      	adds	r3, r3, r2
 8001334:	005b      	lsls	r3, r3, #1
 8001336:	18cb      	adds	r3, r1, r3
 8001338:	4a19      	ldr	r2, [pc, #100]	; (80013a0 <commendHandler+0x4b4>)
 800133a:	7952      	ldrb	r2, [r2, #5]
 800133c:	189b      	adds	r3, r3, r2
 800133e:	3b30      	subs	r3, #48	; 0x30
 8001340:	623b      	str	r3, [r7, #32]
					if(Val_Cmd <= 66000){
 8001342:	6a3b      	ldr	r3, [r7, #32]
 8001344:	4a1d      	ldr	r2, [pc, #116]	; (80013bc <commendHandler+0x4d0>)
 8001346:	4293      	cmp	r3, r2
 8001348:	d80e      	bhi.n	8001368 <commendHandler+0x47c>
						ConfigDS1086 (Val_Cmd) ;
 800134a:	6a3b      	ldr	r3, [r7, #32]
 800134c:	0018      	movs	r0, r3
 800134e:	f7ff fb3b 	bl	80009c8 <ConfigDS1086>
						DS_UART_Transmission (DS_data);
 8001352:	4b13      	ldr	r3, [pc, #76]	; (80013a0 <commendHandler+0x4b4>)
 8001354:	0018      	movs	r0, r3
 8001356:	f000 f951 	bl	80015fc <DS_UART_Transmission>
						DS_UART_Transmission ((uint8_t *)" : ");
 800135a:	4b19      	ldr	r3, [pc, #100]	; (80013c0 <commendHandler+0x4d4>)
 800135c:	0018      	movs	r0, r3
 800135e:	f000 f94d 	bl	80015fc <DS_UART_Transmission>
						Conversion () ;
 8001362:	f7ff fccd 	bl	8000d00 <Conversion>
				}
				else{
					DS_UART_Transmission((uint8_t *)"Eror\n\r");
				}

				break ;
 8001366:	e016      	b.n	8001396 <commendHandler+0x4aa>
					else {DS_UART_Transmission ((uint8_t *)"Maximum frequency 66MHz\n\r");}
 8001368:	4b16      	ldr	r3, [pc, #88]	; (80013c4 <commendHandler+0x4d8>)
 800136a:	0018      	movs	r0, r3
 800136c:	f000 f946 	bl	80015fc <DS_UART_Transmission>
				break ;
 8001370:	e011      	b.n	8001396 <commendHandler+0x4aa>
					DS_UART_Transmission((uint8_t *)"Eror\n\r");
 8001372:	4b15      	ldr	r3, [pc, #84]	; (80013c8 <commendHandler+0x4dc>)
 8001374:	0018      	movs	r0, r3
 8001376:	f000 f941 	bl	80015fc <DS_UART_Transmission>
				break ;
 800137a:	e00c      	b.n	8001396 <commendHandler+0x4aa>
	default :
				DS_UART_Transmission (DS_data);
 800137c:	4b08      	ldr	r3, [pc, #32]	; (80013a0 <commendHandler+0x4b4>)
 800137e:	0018      	movs	r0, r3
 8001380:	f000 f93c 	bl	80015fc <DS_UART_Transmission>
				DS_UART_Transmission ((uint8_t *)"\n\r");
 8001384:	4b11      	ldr	r3, [pc, #68]	; (80013cc <commendHandler+0x4e0>)
 8001386:	0018      	movs	r0, r3
 8001388:	f000 f938 	bl	80015fc <DS_UART_Transmission>
				DS_UART_Transmission ((uint8_t *)"fais attention a ce que tu m'ecris \n\r");
 800138c:	4b10      	ldr	r3, [pc, #64]	; (80013d0 <commendHandler+0x4e4>)
 800138e:	0018      	movs	r0, r3
 8001390:	f000 f934 	bl	80015fc <DS_UART_Transmission>
				break;
 8001394:	46c0      	nop			; (mov r8, r8)

	}


}
 8001396:	46c0      	nop			; (mov r8, r8)
 8001398:	46bd      	mov	sp, r7
 800139a:	b00a      	add	sp, #40	; 0x28
 800139c:	bd80      	pop	{r7, pc}
 800139e:	46c0      	nop			; (mov r8, r8)
 80013a0:	20000020 	.word	0x20000020
 80013a4:	0800659c 	.word	0x0800659c
 80013a8:	080065ac 	.word	0x080065ac
 80013ac:	080065b4 	.word	0x080065b4
 80013b0:	080065c0 	.word	0x080065c0
 80013b4:	080065dc 	.word	0x080065dc
 80013b8:	00002710 	.word	0x00002710
 80013bc:	000101d0 	.word	0x000101d0
 80013c0:	080060f4 	.word	0x080060f4
 80013c4:	0800660c 	.word	0x0800660c
 80013c8:	08006628 	.word	0x08006628
 80013cc:	0800617c 	.word	0x0800617c
 80013d0:	08006630 	.word	0x08006630

080013d4 <DS_Delay>:



void DS_Delay(uint32_t Delay)// Daley en 1us
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b084      	sub	sp, #16
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
  DS_init_TIM14 ();
 80013dc:	f000 f904 	bl	80015e8 <DS_init_TIM14>
  HAL_TIM_Base_Start_IT(&htim14) ;
 80013e0:	4b11      	ldr	r3, [pc, #68]	; (8001428 <DS_Delay+0x54>)
 80013e2:	0018      	movs	r0, r3
 80013e4:	f002 fce0 	bl	8003da8 <HAL_TIM_Base_Start_IT>

  uint32_t tickstart = DS_GetTick();
 80013e8:	f000 f8f4 	bl	80015d4 <DS_GetTick>
 80013ec:	0003      	movs	r3, r0
 80013ee:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	3301      	adds	r3, #1
 80013f8:	d005      	beq.n	8001406 <DS_Delay+0x32>
  {
    wait += (uint32_t)(uwTickFreq);
 80013fa:	4b0c      	ldr	r3, [pc, #48]	; (800142c <DS_Delay+0x58>)
 80013fc:	781b      	ldrb	r3, [r3, #0]
 80013fe:	001a      	movs	r2, r3
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	189b      	adds	r3, r3, r2
 8001404:	60fb      	str	r3, [r7, #12]
  }

  while((DS_GetTick() - tickstart) < wait)
 8001406:	46c0      	nop			; (mov r8, r8)
 8001408:	f000 f8e4 	bl	80015d4 <DS_GetTick>
 800140c:	0002      	movs	r2, r0
 800140e:	68bb      	ldr	r3, [r7, #8]
 8001410:	1ad3      	subs	r3, r2, r3
 8001412:	68fa      	ldr	r2, [r7, #12]
 8001414:	429a      	cmp	r2, r3
 8001416:	d8f7      	bhi.n	8001408 <DS_Delay+0x34>
  {
  }
  HAL_TIM_Base_Stop_IT(&htim14) ;
 8001418:	4b03      	ldr	r3, [pc, #12]	; (8001428 <DS_Delay+0x54>)
 800141a:	0018      	movs	r0, r3
 800141c:	f002 fd10 	bl	8003e40 <HAL_TIM_Base_Stop_IT>
}
 8001420:	46c0      	nop			; (mov r8, r8)
 8001422:	46bd      	mov	sp, r7
 8001424:	b004      	add	sp, #16
 8001426:	bd80      	pop	{r7, pc}
 8001428:	20000198 	.word	0x20000198
 800142c:	20000088 	.word	0x20000088

08001430 <WriteByte>:
// *************************************************************
// ***************** private function **************************
// *************************************************************

static void WriteByte (uint8_t Adresse ){
 8001430:	b580      	push	{r7, lr}
 8001432:	b086      	sub	sp, #24
 8001434:	af04      	add	r7, sp, #16
 8001436:	0002      	movs	r2, r0
 8001438:	1dfb      	adds	r3, r7, #7
 800143a:	701a      	strb	r2, [r3, #0]

	if(HAL_OK!=HAL_I2C_Mem_Write(&hi2c1, ADD_Device , Adresse,1, data_send, 1, HAL_MAX_DELAY)) {
 800143c:	4b15      	ldr	r3, [pc, #84]	; (8001494 <WriteByte+0x64>)
 800143e:	781b      	ldrb	r3, [r3, #0]
 8001440:	b299      	uxth	r1, r3
 8001442:	1dfb      	adds	r3, r7, #7
 8001444:	781b      	ldrb	r3, [r3, #0]
 8001446:	b29a      	uxth	r2, r3
 8001448:	4813      	ldr	r0, [pc, #76]	; (8001498 <WriteByte+0x68>)
 800144a:	2301      	movs	r3, #1
 800144c:	425b      	negs	r3, r3
 800144e:	9302      	str	r3, [sp, #8]
 8001450:	2301      	movs	r3, #1
 8001452:	9301      	str	r3, [sp, #4]
 8001454:	4b11      	ldr	r3, [pc, #68]	; (800149c <WriteByte+0x6c>)
 8001456:	9300      	str	r3, [sp, #0]
 8001458:	2301      	movs	r3, #1
 800145a:	f001 f91b 	bl	8002694 <HAL_I2C_Mem_Write>
 800145e:	1e03      	subs	r3, r0, #0
 8001460:	d013      	beq.n	800148a <WriteByte+0x5a>
		strcpy((char*)data_read,"Er");
 8001462:	4b0f      	ldr	r3, [pc, #60]	; (80014a0 <WriteByte+0x70>)
 8001464:	4a0f      	ldr	r2, [pc, #60]	; (80014a4 <WriteByte+0x74>)
 8001466:	8811      	ldrh	r1, [r2, #0]
 8001468:	8019      	strh	r1, [r3, #0]
 800146a:	7892      	ldrb	r2, [r2, #2]
 800146c:	709a      	strb	r2, [r3, #2]
		HAL_UART_Transmit_IT(&huart2,data_read ,strlen((char*)data_read));
 800146e:	4b0c      	ldr	r3, [pc, #48]	; (80014a0 <WriteByte+0x70>)
 8001470:	0018      	movs	r0, r3
 8001472:	f7fe fe53 	bl	800011c <strlen>
 8001476:	0003      	movs	r3, r0
 8001478:	b29a      	uxth	r2, r3
 800147a:	4909      	ldr	r1, [pc, #36]	; (80014a0 <WriteByte+0x70>)
 800147c:	4b0a      	ldr	r3, [pc, #40]	; (80014a8 <WriteByte+0x78>)
 800147e:	0018      	movs	r0, r3
 8001480:	f002 ff1c 	bl	80042bc <HAL_UART_Transmit_IT>
		HAL_Delay(100);
 8001484:	2064      	movs	r0, #100	; 0x64
 8001486:	f000 f99f 	bl	80017c8 <HAL_Delay>
	}

}
 800148a:	46c0      	nop			; (mov r8, r8)
 800148c:	46bd      	mov	sp, r7
 800148e:	b002      	add	sp, #8
 8001490:	bd80      	pop	{r7, pc}
 8001492:	46c0      	nop			; (mov r8, r8)
 8001494:	2000003e 	.word	0x2000003e
 8001498:	2000014c 	.word	0x2000014c
 800149c:	20000274 	.word	0x20000274
 80014a0:	20000268 	.word	0x20000268
 80014a4:	08006658 	.word	0x08006658
 80014a8:	200001e0 	.word	0x200001e0

080014ac <ReadByte>:

static void ReadByte (uint8_t Adresse){
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b086      	sub	sp, #24
 80014b0:	af04      	add	r7, sp, #16
 80014b2:	0002      	movs	r2, r0
 80014b4:	1dfb      	adds	r3, r7, #7
 80014b6:	701a      	strb	r2, [r3, #0]

	if(HAL_OK!=HAL_I2C_Mem_Read(&hi2c1,ADD_Device, Adresse ,1, data_read, 1, HAL_MAX_DELAY)) {
 80014b8:	4b15      	ldr	r3, [pc, #84]	; (8001510 <ReadByte+0x64>)
 80014ba:	781b      	ldrb	r3, [r3, #0]
 80014bc:	b299      	uxth	r1, r3
 80014be:	1dfb      	adds	r3, r7, #7
 80014c0:	781b      	ldrb	r3, [r3, #0]
 80014c2:	b29a      	uxth	r2, r3
 80014c4:	4813      	ldr	r0, [pc, #76]	; (8001514 <ReadByte+0x68>)
 80014c6:	2301      	movs	r3, #1
 80014c8:	425b      	negs	r3, r3
 80014ca:	9302      	str	r3, [sp, #8]
 80014cc:	2301      	movs	r3, #1
 80014ce:	9301      	str	r3, [sp, #4]
 80014d0:	4b11      	ldr	r3, [pc, #68]	; (8001518 <ReadByte+0x6c>)
 80014d2:	9300      	str	r3, [sp, #0]
 80014d4:	2301      	movs	r3, #1
 80014d6:	f001 fa0b 	bl	80028f0 <HAL_I2C_Mem_Read>
 80014da:	1e03      	subs	r3, r0, #0
 80014dc:	d013      	beq.n	8001506 <ReadByte+0x5a>
		strcpy((char*)data_read,"Er");
 80014de:	4b0e      	ldr	r3, [pc, #56]	; (8001518 <ReadByte+0x6c>)
 80014e0:	4a0e      	ldr	r2, [pc, #56]	; (800151c <ReadByte+0x70>)
 80014e2:	8811      	ldrh	r1, [r2, #0]
 80014e4:	8019      	strh	r1, [r3, #0]
 80014e6:	7892      	ldrb	r2, [r2, #2]
 80014e8:	709a      	strb	r2, [r3, #2]
		HAL_UART_Transmit_IT(&huart2,data_read ,strlen((char*)data_read));
 80014ea:	4b0b      	ldr	r3, [pc, #44]	; (8001518 <ReadByte+0x6c>)
 80014ec:	0018      	movs	r0, r3
 80014ee:	f7fe fe15 	bl	800011c <strlen>
 80014f2:	0003      	movs	r3, r0
 80014f4:	b29a      	uxth	r2, r3
 80014f6:	4908      	ldr	r1, [pc, #32]	; (8001518 <ReadByte+0x6c>)
 80014f8:	4b09      	ldr	r3, [pc, #36]	; (8001520 <ReadByte+0x74>)
 80014fa:	0018      	movs	r0, r3
 80014fc:	f002 fede 	bl	80042bc <HAL_UART_Transmit_IT>
		HAL_Delay(100);
 8001500:	2064      	movs	r0, #100	; 0x64
 8001502:	f000 f961 	bl	80017c8 <HAL_Delay>
	}
}
 8001506:	46c0      	nop			; (mov r8, r8)
 8001508:	46bd      	mov	sp, r7
 800150a:	b002      	add	sp, #8
 800150c:	bd80      	pop	{r7, pc}
 800150e:	46c0      	nop			; (mov r8, r8)
 8001510:	2000003e 	.word	0x2000003e
 8001514:	2000014c 	.word	0x2000014c
 8001518:	20000268 	.word	0x20000268
 800151c:	08006658 	.word	0x08006658
 8001520:	200001e0 	.word	0x200001e0

08001524 <WriteTowByte>:

static void WriteTowByte (uint8_t Adresse){
 8001524:	b580      	push	{r7, lr}
 8001526:	b086      	sub	sp, #24
 8001528:	af04      	add	r7, sp, #16
 800152a:	0002      	movs	r2, r0
 800152c:	1dfb      	adds	r3, r7, #7
 800152e:	701a      	strb	r2, [r3, #0]

	if(HAL_OK!=HAL_I2C_Mem_Write(&hi2c1, ADD_Device , Adresse,1, data_send,2, HAL_MAX_DELAY)) {
 8001530:	4b15      	ldr	r3, [pc, #84]	; (8001588 <WriteTowByte+0x64>)
 8001532:	781b      	ldrb	r3, [r3, #0]
 8001534:	b299      	uxth	r1, r3
 8001536:	1dfb      	adds	r3, r7, #7
 8001538:	781b      	ldrb	r3, [r3, #0]
 800153a:	b29a      	uxth	r2, r3
 800153c:	4813      	ldr	r0, [pc, #76]	; (800158c <WriteTowByte+0x68>)
 800153e:	2301      	movs	r3, #1
 8001540:	425b      	negs	r3, r3
 8001542:	9302      	str	r3, [sp, #8]
 8001544:	2302      	movs	r3, #2
 8001546:	9301      	str	r3, [sp, #4]
 8001548:	4b11      	ldr	r3, [pc, #68]	; (8001590 <WriteTowByte+0x6c>)
 800154a:	9300      	str	r3, [sp, #0]
 800154c:	2301      	movs	r3, #1
 800154e:	f001 f8a1 	bl	8002694 <HAL_I2C_Mem_Write>
 8001552:	1e03      	subs	r3, r0, #0
 8001554:	d013      	beq.n	800157e <WriteTowByte+0x5a>
		strcpy((char*)data_read,"Er");
 8001556:	4b0f      	ldr	r3, [pc, #60]	; (8001594 <WriteTowByte+0x70>)
 8001558:	4a0f      	ldr	r2, [pc, #60]	; (8001598 <WriteTowByte+0x74>)
 800155a:	8811      	ldrh	r1, [r2, #0]
 800155c:	8019      	strh	r1, [r3, #0]
 800155e:	7892      	ldrb	r2, [r2, #2]
 8001560:	709a      	strb	r2, [r3, #2]
		HAL_UART_Transmit_IT(&huart2,data_read ,strlen((char*)data_read));
 8001562:	4b0c      	ldr	r3, [pc, #48]	; (8001594 <WriteTowByte+0x70>)
 8001564:	0018      	movs	r0, r3
 8001566:	f7fe fdd9 	bl	800011c <strlen>
 800156a:	0003      	movs	r3, r0
 800156c:	b29a      	uxth	r2, r3
 800156e:	4909      	ldr	r1, [pc, #36]	; (8001594 <WriteTowByte+0x70>)
 8001570:	4b0a      	ldr	r3, [pc, #40]	; (800159c <WriteTowByte+0x78>)
 8001572:	0018      	movs	r0, r3
 8001574:	f002 fea2 	bl	80042bc <HAL_UART_Transmit_IT>
		HAL_Delay(100);
 8001578:	2064      	movs	r0, #100	; 0x64
 800157a:	f000 f925 	bl	80017c8 <HAL_Delay>
	}

}
 800157e:	46c0      	nop			; (mov r8, r8)
 8001580:	46bd      	mov	sp, r7
 8001582:	b002      	add	sp, #8
 8001584:	bd80      	pop	{r7, pc}
 8001586:	46c0      	nop			; (mov r8, r8)
 8001588:	2000003e 	.word	0x2000003e
 800158c:	2000014c 	.word	0x2000014c
 8001590:	20000274 	.word	0x20000274
 8001594:	20000268 	.word	0x20000268
 8001598:	08006658 	.word	0x08006658
 800159c:	200001e0 	.word	0x200001e0

080015a0 <power>:

static uint32_t power(uint32_t x , uint32_t n ) {
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b084      	sub	sp, #16
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
 80015a8:	6039      	str	r1, [r7, #0]
	uint32_t p=1;
 80015aa:	2301      	movs	r3, #1
 80015ac:	60fb      	str	r3, [r7, #12]
	for(int i = 0 ; i < n ; i++){
 80015ae:	2300      	movs	r3, #0
 80015b0:	60bb      	str	r3, [r7, #8]
 80015b2:	e006      	b.n	80015c2 <power+0x22>
		p*=x;
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	687a      	ldr	r2, [r7, #4]
 80015b8:	4353      	muls	r3, r2
 80015ba:	60fb      	str	r3, [r7, #12]
	for(int i = 0 ; i < n ; i++){
 80015bc:	68bb      	ldr	r3, [r7, #8]
 80015be:	3301      	adds	r3, #1
 80015c0:	60bb      	str	r3, [r7, #8]
 80015c2:	68bb      	ldr	r3, [r7, #8]
 80015c4:	683a      	ldr	r2, [r7, #0]
 80015c6:	429a      	cmp	r2, r3
 80015c8:	d8f4      	bhi.n	80015b4 <power+0x14>
	}
	return p;
 80015ca:	68fb      	ldr	r3, [r7, #12]
}
 80015cc:	0018      	movs	r0, r3
 80015ce:	46bd      	mov	sp, r7
 80015d0:	b004      	add	sp, #16
 80015d2:	bd80      	pop	{r7, pc}

080015d4 <DS_GetTick>:

static uint32_t DS_GetTick(){
 80015d4:	b580      	push	{r7, lr}
 80015d6:	af00      	add	r7, sp, #0
	return DS_TIM14_Count ;
 80015d8:	4b02      	ldr	r3, [pc, #8]	; (80015e4 <DS_GetTick+0x10>)
 80015da:	681b      	ldr	r3, [r3, #0]
}
 80015dc:	0018      	movs	r0, r3
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}
 80015e2:	46c0      	nop			; (mov r8, r8)
 80015e4:	200002ac 	.word	0x200002ac

080015e8 <DS_init_TIM14>:
static void DS_init_TIM14 (){
 80015e8:	b580      	push	{r7, lr}
 80015ea:	af00      	add	r7, sp, #0
	DS_TIM14_Count=0 ;
 80015ec:	4b02      	ldr	r3, [pc, #8]	; (80015f8 <DS_init_TIM14+0x10>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	601a      	str	r2, [r3, #0]
}
 80015f2:	46c0      	nop			; (mov r8, r8)
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}
 80015f8:	200002ac 	.word	0x200002ac

080015fc <DS_UART_Transmission>:
// *************************************************************
// ************************* Callback **************************
// *************************************************************

static void DS_UART_Transmission (uint8_t * data){
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b082      	sub	sp, #8
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
	memset(data_send,'\0',50*sizeof(char));
 8001604:	4b11      	ldr	r3, [pc, #68]	; (800164c <DS_UART_Transmission+0x50>)
 8001606:	2232      	movs	r2, #50	; 0x32
 8001608:	2100      	movs	r1, #0
 800160a:	0018      	movs	r0, r3
 800160c:	f004 f8ca 	bl	80057a4 <memset>
	sprintf((char*)data_send,"%s",data);
 8001610:	687a      	ldr	r2, [r7, #4]
 8001612:	490f      	ldr	r1, [pc, #60]	; (8001650 <DS_UART_Transmission+0x54>)
 8001614:	4b0d      	ldr	r3, [pc, #52]	; (800164c <DS_UART_Transmission+0x50>)
 8001616:	0018      	movs	r0, r3
 8001618:	f004 f8cc 	bl	80057b4 <siprintf>

	DS_Wait_Transmission=0;
 800161c:	4b0d      	ldr	r3, [pc, #52]	; (8001654 <DS_UART_Transmission+0x58>)
 800161e:	2200      	movs	r2, #0
 8001620:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit_IT(&huart2,data_send , strlen((char *)data_send));
 8001622:	4b0a      	ldr	r3, [pc, #40]	; (800164c <DS_UART_Transmission+0x50>)
 8001624:	0018      	movs	r0, r3
 8001626:	f7fe fd79 	bl	800011c <strlen>
 800162a:	0003      	movs	r3, r0
 800162c:	b29a      	uxth	r2, r3
 800162e:	4907      	ldr	r1, [pc, #28]	; (800164c <DS_UART_Transmission+0x50>)
 8001630:	4b09      	ldr	r3, [pc, #36]	; (8001658 <DS_UART_Transmission+0x5c>)
 8001632:	0018      	movs	r0, r3
 8001634:	f002 fe42 	bl	80042bc <HAL_UART_Transmit_IT>
	while(!DS_Wait_Transmission);
 8001638:	46c0      	nop			; (mov r8, r8)
 800163a:	4b06      	ldr	r3, [pc, #24]	; (8001654 <DS_UART_Transmission+0x58>)
 800163c:	781b      	ldrb	r3, [r3, #0]
 800163e:	2b00      	cmp	r3, #0
 8001640:	d0fb      	beq.n	800163a <DS_UART_Transmission+0x3e>
}
 8001642:	46c0      	nop			; (mov r8, r8)
 8001644:	46c0      	nop			; (mov r8, r8)
 8001646:	46bd      	mov	sp, r7
 8001648:	b002      	add	sp, #8
 800164a:	bd80      	pop	{r7, pc}
 800164c:	20000274 	.word	0x20000274
 8001650:	080060f0 	.word	0x080060f0
 8001654:	200002a7 	.word	0x200002a7
 8001658:	200001e0 	.word	0x200001e0

0800165c <DS_UART_Reception>:

static void DS_UART_Reception (){
 800165c:	b580      	push	{r7, lr}
 800165e:	af00      	add	r7, sp, #0
	DS_Wait_Receiption=0;
 8001660:	4b0b      	ldr	r3, [pc, #44]	; (8001690 <DS_UART_Reception+0x34>)
 8001662:	2200      	movs	r2, #0
 8001664:	701a      	strb	r2, [r3, #0]
	memset(DS_data,'\0',10*sizeof(char));
 8001666:	4b0b      	ldr	r3, [pc, #44]	; (8001694 <DS_UART_Reception+0x38>)
 8001668:	220a      	movs	r2, #10
 800166a:	2100      	movs	r1, #0
 800166c:	0018      	movs	r0, r3
 800166e:	f004 f899 	bl	80057a4 <memset>
	HAL_UART_Receive_IT(&huart2,DS_data,6);
 8001672:	4908      	ldr	r1, [pc, #32]	; (8001694 <DS_UART_Reception+0x38>)
 8001674:	4b08      	ldr	r3, [pc, #32]	; (8001698 <DS_UART_Reception+0x3c>)
 8001676:	2206      	movs	r2, #6
 8001678:	0018      	movs	r0, r3
 800167a:	f002 fe9f 	bl	80043bc <HAL_UART_Receive_IT>
	while(!DS_Wait_Receiption);
 800167e:	46c0      	nop			; (mov r8, r8)
 8001680:	4b03      	ldr	r3, [pc, #12]	; (8001690 <DS_UART_Reception+0x34>)
 8001682:	781b      	ldrb	r3, [r3, #0]
 8001684:	2b00      	cmp	r3, #0
 8001686:	d0fb      	beq.n	8001680 <DS_UART_Reception+0x24>
}
 8001688:	46c0      	nop			; (mov r8, r8)
 800168a:	46c0      	nop			; (mov r8, r8)
 800168c:	46bd      	mov	sp, r7
 800168e:	bd80      	pop	{r7, pc}
 8001690:	200002a6 	.word	0x200002a6
 8001694:	20000020 	.word	0x20000020
 8001698:	200001e0 	.word	0x200001e0

0800169c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b082      	sub	sp, #8
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
	DS_Wait_Receiption=1;
 80016a4:	4b03      	ldr	r3, [pc, #12]	; (80016b4 <HAL_UART_RxCpltCallback+0x18>)
 80016a6:	2201      	movs	r2, #1
 80016a8:	701a      	strb	r2, [r3, #0]
}
 80016aa:	46c0      	nop			; (mov r8, r8)
 80016ac:	46bd      	mov	sp, r7
 80016ae:	b002      	add	sp, #8
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	46c0      	nop			; (mov r8, r8)
 80016b4:	200002a6 	.word	0x200002a6

080016b8 <HAL_UART_TxCpltCallback>:
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b082      	sub	sp, #8
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
	DS_Wait_Transmission=1;
 80016c0:	4b03      	ldr	r3, [pc, #12]	; (80016d0 <HAL_UART_TxCpltCallback+0x18>)
 80016c2:	2201      	movs	r2, #1
 80016c4:	701a      	strb	r2, [r3, #0]
}
 80016c6:	46c0      	nop			; (mov r8, r8)
 80016c8:	46bd      	mov	sp, r7
 80016ca:	b002      	add	sp, #8
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	46c0      	nop			; (mov r8, r8)
 80016d0:	200002a7 	.word	0x200002a7

080016d4 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b082      	sub	sp, #8
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
	if( htim==&htim14){
 80016dc:	687a      	ldr	r2, [r7, #4]
 80016de:	4b06      	ldr	r3, [pc, #24]	; (80016f8 <HAL_TIM_PeriodElapsedCallback+0x24>)
 80016e0:	429a      	cmp	r2, r3
 80016e2:	d105      	bne.n	80016f0 <HAL_TIM_PeriodElapsedCallback+0x1c>
		DS_TIM14_Count+=10;
 80016e4:	4b05      	ldr	r3, [pc, #20]	; (80016fc <HAL_TIM_PeriodElapsedCallback+0x28>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	330a      	adds	r3, #10
 80016ea:	001a      	movs	r2, r3
 80016ec:	4b03      	ldr	r3, [pc, #12]	; (80016fc <HAL_TIM_PeriodElapsedCallback+0x28>)
 80016ee:	601a      	str	r2, [r3, #0]
	}
}
 80016f0:	46c0      	nop			; (mov r8, r8)
 80016f2:	46bd      	mov	sp, r7
 80016f4:	b002      	add	sp, #8
 80016f6:	bd80      	pop	{r7, pc}
 80016f8:	20000198 	.word	0x20000198
 80016fc:	200002ac 	.word	0x200002ac

08001700 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001704:	4b07      	ldr	r3, [pc, #28]	; (8001724 <HAL_Init+0x24>)
 8001706:	681a      	ldr	r2, [r3, #0]
 8001708:	4b06      	ldr	r3, [pc, #24]	; (8001724 <HAL_Init+0x24>)
 800170a:	2110      	movs	r1, #16
 800170c:	430a      	orrs	r2, r1
 800170e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8001710:	2003      	movs	r0, #3
 8001712:	f000 f809 	bl	8001728 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001716:	f7fe ff73 	bl	8000600 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800171a:	2300      	movs	r3, #0
}
 800171c:	0018      	movs	r0, r3
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}
 8001722:	46c0      	nop			; (mov r8, r8)
 8001724:	40022000 	.word	0x40022000

08001728 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001728:	b590      	push	{r4, r7, lr}
 800172a:	b083      	sub	sp, #12
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001730:	4b14      	ldr	r3, [pc, #80]	; (8001784 <HAL_InitTick+0x5c>)
 8001732:	681c      	ldr	r4, [r3, #0]
 8001734:	4b14      	ldr	r3, [pc, #80]	; (8001788 <HAL_InitTick+0x60>)
 8001736:	781b      	ldrb	r3, [r3, #0]
 8001738:	0019      	movs	r1, r3
 800173a:	23fa      	movs	r3, #250	; 0xfa
 800173c:	0098      	lsls	r0, r3, #2
 800173e:	f7fe fcff 	bl	8000140 <__udivsi3>
 8001742:	0003      	movs	r3, r0
 8001744:	0019      	movs	r1, r3
 8001746:	0020      	movs	r0, r4
 8001748:	f7fe fcfa 	bl	8000140 <__udivsi3>
 800174c:	0003      	movs	r3, r0
 800174e:	0018      	movs	r0, r3
 8001750:	f000 fcf9 	bl	8002146 <HAL_SYSTICK_Config>
 8001754:	1e03      	subs	r3, r0, #0
 8001756:	d001      	beq.n	800175c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001758:	2301      	movs	r3, #1
 800175a:	e00f      	b.n	800177c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	2b03      	cmp	r3, #3
 8001760:	d80b      	bhi.n	800177a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001762:	6879      	ldr	r1, [r7, #4]
 8001764:	2301      	movs	r3, #1
 8001766:	425b      	negs	r3, r3
 8001768:	2200      	movs	r2, #0
 800176a:	0018      	movs	r0, r3
 800176c:	f000 fcc6 	bl	80020fc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001770:	4b06      	ldr	r3, [pc, #24]	; (800178c <HAL_InitTick+0x64>)
 8001772:	687a      	ldr	r2, [r7, #4]
 8001774:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8001776:	2300      	movs	r3, #0
 8001778:	e000      	b.n	800177c <HAL_InitTick+0x54>
    return HAL_ERROR;
 800177a:	2301      	movs	r3, #1
}
 800177c:	0018      	movs	r0, r3
 800177e:	46bd      	mov	sp, r7
 8001780:	b003      	add	sp, #12
 8001782:	bd90      	pop	{r4, r7, pc}
 8001784:	2000001c 	.word	0x2000001c
 8001788:	20000088 	.word	0x20000088
 800178c:	20000084 	.word	0x20000084

08001790 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001794:	4b05      	ldr	r3, [pc, #20]	; (80017ac <HAL_IncTick+0x1c>)
 8001796:	781b      	ldrb	r3, [r3, #0]
 8001798:	001a      	movs	r2, r3
 800179a:	4b05      	ldr	r3, [pc, #20]	; (80017b0 <HAL_IncTick+0x20>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	18d2      	adds	r2, r2, r3
 80017a0:	4b03      	ldr	r3, [pc, #12]	; (80017b0 <HAL_IncTick+0x20>)
 80017a2:	601a      	str	r2, [r3, #0]
}
 80017a4:	46c0      	nop			; (mov r8, r8)
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	46c0      	nop			; (mov r8, r8)
 80017ac:	20000088 	.word	0x20000088
 80017b0:	200002b0 	.word	0x200002b0

080017b4 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	af00      	add	r7, sp, #0
  return uwTick;
 80017b8:	4b02      	ldr	r3, [pc, #8]	; (80017c4 <HAL_GetTick+0x10>)
 80017ba:	681b      	ldr	r3, [r3, #0]
}
 80017bc:	0018      	movs	r0, r3
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	46c0      	nop			; (mov r8, r8)
 80017c4:	200002b0 	.word	0x200002b0

080017c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b084      	sub	sp, #16
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017d0:	f7ff fff0 	bl	80017b4 <HAL_GetTick>
 80017d4:	0003      	movs	r3, r0
 80017d6:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	3301      	adds	r3, #1
 80017e0:	d005      	beq.n	80017ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80017e2:	4b0a      	ldr	r3, [pc, #40]	; (800180c <HAL_Delay+0x44>)
 80017e4:	781b      	ldrb	r3, [r3, #0]
 80017e6:	001a      	movs	r2, r3
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	189b      	adds	r3, r3, r2
 80017ec:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80017ee:	46c0      	nop			; (mov r8, r8)
 80017f0:	f7ff ffe0 	bl	80017b4 <HAL_GetTick>
 80017f4:	0002      	movs	r2, r0
 80017f6:	68bb      	ldr	r3, [r7, #8]
 80017f8:	1ad3      	subs	r3, r2, r3
 80017fa:	68fa      	ldr	r2, [r7, #12]
 80017fc:	429a      	cmp	r2, r3
 80017fe:	d8f7      	bhi.n	80017f0 <HAL_Delay+0x28>
  {
  }
}
 8001800:	46c0      	nop			; (mov r8, r8)
 8001802:	46c0      	nop			; (mov r8, r8)
 8001804:	46bd      	mov	sp, r7
 8001806:	b004      	add	sp, #16
 8001808:	bd80      	pop	{r7, pc}
 800180a:	46c0      	nop			; (mov r8, r8)
 800180c:	20000088 	.word	0x20000088

08001810 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b084      	sub	sp, #16
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001818:	230f      	movs	r3, #15
 800181a:	18fb      	adds	r3, r7, r3
 800181c:	2200      	movs	r2, #0
 800181e:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8001820:	2300      	movs	r3, #0
 8001822:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	2b00      	cmp	r3, #0
 8001828:	d101      	bne.n	800182e <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 800182a:	2301      	movs	r3, #1
 800182c:	e125      	b.n	8001a7a <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001832:	2b00      	cmp	r3, #0
 8001834:	d10a      	bne.n	800184c <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	2200      	movs	r2, #0
 800183a:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	2234      	movs	r2, #52	; 0x34
 8001840:	2100      	movs	r1, #0
 8001842:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	0018      	movs	r0, r3
 8001848:	f7fe fefe 	bl	8000648 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001850:	2210      	movs	r2, #16
 8001852:	4013      	ands	r3, r2
 8001854:	d000      	beq.n	8001858 <HAL_ADC_Init+0x48>
 8001856:	e103      	b.n	8001a60 <HAL_ADC_Init+0x250>
 8001858:	230f      	movs	r3, #15
 800185a:	18fb      	adds	r3, r7, r3
 800185c:	781b      	ldrb	r3, [r3, #0]
 800185e:	2b00      	cmp	r3, #0
 8001860:	d000      	beq.n	8001864 <HAL_ADC_Init+0x54>
 8001862:	e0fd      	b.n	8001a60 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	689b      	ldr	r3, [r3, #8]
 800186a:	2204      	movs	r2, #4
 800186c:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 800186e:	d000      	beq.n	8001872 <HAL_ADC_Init+0x62>
 8001870:	e0f6      	b.n	8001a60 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001876:	4a83      	ldr	r2, [pc, #524]	; (8001a84 <HAL_ADC_Init+0x274>)
 8001878:	4013      	ands	r3, r2
 800187a:	2202      	movs	r2, #2
 800187c:	431a      	orrs	r2, r3
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	689b      	ldr	r3, [r3, #8]
 8001888:	2203      	movs	r2, #3
 800188a:	4013      	ands	r3, r2
 800188c:	2b01      	cmp	r3, #1
 800188e:	d112      	bne.n	80018b6 <HAL_ADC_Init+0xa6>
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	2201      	movs	r2, #1
 8001898:	4013      	ands	r3, r2
 800189a:	2b01      	cmp	r3, #1
 800189c:	d009      	beq.n	80018b2 <HAL_ADC_Init+0xa2>
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	68da      	ldr	r2, [r3, #12]
 80018a4:	2380      	movs	r3, #128	; 0x80
 80018a6:	021b      	lsls	r3, r3, #8
 80018a8:	401a      	ands	r2, r3
 80018aa:	2380      	movs	r3, #128	; 0x80
 80018ac:	021b      	lsls	r3, r3, #8
 80018ae:	429a      	cmp	r2, r3
 80018b0:	d101      	bne.n	80018b6 <HAL_ADC_Init+0xa6>
 80018b2:	2301      	movs	r3, #1
 80018b4:	e000      	b.n	80018b8 <HAL_ADC_Init+0xa8>
 80018b6:	2300      	movs	r3, #0
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d116      	bne.n	80018ea <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	68db      	ldr	r3, [r3, #12]
 80018c2:	2218      	movs	r2, #24
 80018c4:	4393      	bics	r3, r2
 80018c6:	0019      	movs	r1, r3
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	689a      	ldr	r2, [r3, #8]
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	430a      	orrs	r2, r1
 80018d2:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	691b      	ldr	r3, [r3, #16]
 80018da:	009b      	lsls	r3, r3, #2
 80018dc:	0899      	lsrs	r1, r3, #2
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	685a      	ldr	r2, [r3, #4]
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	430a      	orrs	r2, r1
 80018e8:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	68da      	ldr	r2, [r3, #12]
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	4964      	ldr	r1, [pc, #400]	; (8001a88 <HAL_ADC_Init+0x278>)
 80018f6:	400a      	ands	r2, r1
 80018f8:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	7e1b      	ldrb	r3, [r3, #24]
 80018fe:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	7e5b      	ldrb	r3, [r3, #25]
 8001904:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001906:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	7e9b      	ldrb	r3, [r3, #26]
 800190c:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 800190e:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001914:	2b01      	cmp	r3, #1
 8001916:	d002      	beq.n	800191e <HAL_ADC_Init+0x10e>
 8001918:	2380      	movs	r3, #128	; 0x80
 800191a:	015b      	lsls	r3, r3, #5
 800191c:	e000      	b.n	8001920 <HAL_ADC_Init+0x110>
 800191e:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001920:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8001926:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	691b      	ldr	r3, [r3, #16]
 800192c:	2b02      	cmp	r3, #2
 800192e:	d101      	bne.n	8001934 <HAL_ADC_Init+0x124>
 8001930:	2304      	movs	r3, #4
 8001932:	e000      	b.n	8001936 <HAL_ADC_Init+0x126>
 8001934:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 8001936:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	2124      	movs	r1, #36	; 0x24
 800193c:	5c5b      	ldrb	r3, [r3, r1]
 800193e:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8001940:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001942:	68ba      	ldr	r2, [r7, #8]
 8001944:	4313      	orrs	r3, r2
 8001946:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	7edb      	ldrb	r3, [r3, #27]
 800194c:	2b01      	cmp	r3, #1
 800194e:	d115      	bne.n	800197c <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	7e9b      	ldrb	r3, [r3, #26]
 8001954:	2b00      	cmp	r3, #0
 8001956:	d105      	bne.n	8001964 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8001958:	68bb      	ldr	r3, [r7, #8]
 800195a:	2280      	movs	r2, #128	; 0x80
 800195c:	0252      	lsls	r2, r2, #9
 800195e:	4313      	orrs	r3, r2
 8001960:	60bb      	str	r3, [r7, #8]
 8001962:	e00b      	b.n	800197c <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001968:	2220      	movs	r2, #32
 800196a:	431a      	orrs	r2, r3
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001974:	2201      	movs	r2, #1
 8001976:	431a      	orrs	r2, r3
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	69da      	ldr	r2, [r3, #28]
 8001980:	23c2      	movs	r3, #194	; 0xc2
 8001982:	33ff      	adds	r3, #255	; 0xff
 8001984:	429a      	cmp	r2, r3
 8001986:	d007      	beq.n	8001998 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8001990:	4313      	orrs	r3, r2
 8001992:	68ba      	ldr	r2, [r7, #8]
 8001994:	4313      	orrs	r3, r2
 8001996:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	68d9      	ldr	r1, [r3, #12]
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	68ba      	ldr	r2, [r7, #8]
 80019a4:	430a      	orrs	r2, r1
 80019a6:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80019ac:	2380      	movs	r3, #128	; 0x80
 80019ae:	055b      	lsls	r3, r3, #21
 80019b0:	429a      	cmp	r2, r3
 80019b2:	d01b      	beq.n	80019ec <HAL_ADC_Init+0x1dc>
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019b8:	2b01      	cmp	r3, #1
 80019ba:	d017      	beq.n	80019ec <HAL_ADC_Init+0x1dc>
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019c0:	2b02      	cmp	r3, #2
 80019c2:	d013      	beq.n	80019ec <HAL_ADC_Init+0x1dc>
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019c8:	2b03      	cmp	r3, #3
 80019ca:	d00f      	beq.n	80019ec <HAL_ADC_Init+0x1dc>
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019d0:	2b04      	cmp	r3, #4
 80019d2:	d00b      	beq.n	80019ec <HAL_ADC_Init+0x1dc>
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019d8:	2b05      	cmp	r3, #5
 80019da:	d007      	beq.n	80019ec <HAL_ADC_Init+0x1dc>
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019e0:	2b06      	cmp	r3, #6
 80019e2:	d003      	beq.n	80019ec <HAL_ADC_Init+0x1dc>
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019e8:	2b07      	cmp	r3, #7
 80019ea:	d112      	bne.n	8001a12 <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	695a      	ldr	r2, [r3, #20]
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	2107      	movs	r1, #7
 80019f8:	438a      	bics	r2, r1
 80019fa:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	6959      	ldr	r1, [r3, #20]
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a06:	2207      	movs	r2, #7
 8001a08:	401a      	ands	r2, r3
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	430a      	orrs	r2, r1
 8001a10:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	68db      	ldr	r3, [r3, #12]
 8001a18:	4a1c      	ldr	r2, [pc, #112]	; (8001a8c <HAL_ADC_Init+0x27c>)
 8001a1a:	4013      	ands	r3, r2
 8001a1c:	68ba      	ldr	r2, [r7, #8]
 8001a1e:	429a      	cmp	r2, r3
 8001a20:	d10b      	bne.n	8001a3a <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	2200      	movs	r2, #0
 8001a26:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a2c:	2203      	movs	r2, #3
 8001a2e:	4393      	bics	r3, r2
 8001a30:	2201      	movs	r2, #1
 8001a32:	431a      	orrs	r2, r3
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8001a38:	e01c      	b.n	8001a74 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a3e:	2212      	movs	r2, #18
 8001a40:	4393      	bics	r3, r2
 8001a42:	2210      	movs	r2, #16
 8001a44:	431a      	orrs	r2, r3
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a4e:	2201      	movs	r2, #1
 8001a50:	431a      	orrs	r2, r3
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 8001a56:	230f      	movs	r3, #15
 8001a58:	18fb      	adds	r3, r7, r3
 8001a5a:	2201      	movs	r2, #1
 8001a5c:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8001a5e:	e009      	b.n	8001a74 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a64:	2210      	movs	r2, #16
 8001a66:	431a      	orrs	r2, r3
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 8001a6c:	230f      	movs	r3, #15
 8001a6e:	18fb      	adds	r3, r7, r3
 8001a70:	2201      	movs	r2, #1
 8001a72:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001a74:	230f      	movs	r3, #15
 8001a76:	18fb      	adds	r3, r7, r3
 8001a78:	781b      	ldrb	r3, [r3, #0]
}
 8001a7a:	0018      	movs	r0, r3
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	b004      	add	sp, #16
 8001a80:	bd80      	pop	{r7, pc}
 8001a82:	46c0      	nop			; (mov r8, r8)
 8001a84:	fffffefd 	.word	0xfffffefd
 8001a88:	fffe0219 	.word	0xfffe0219
 8001a8c:	833fffe7 	.word	0x833fffe7

08001a90 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001a90:	b590      	push	{r4, r7, lr}
 8001a92:	b085      	sub	sp, #20
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a98:	230f      	movs	r3, #15
 8001a9a:	18fb      	adds	r3, r7, r3
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	689b      	ldr	r3, [r3, #8]
 8001aa6:	2204      	movs	r2, #4
 8001aa8:	4013      	ands	r3, r2
 8001aaa:	d138      	bne.n	8001b1e <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2234      	movs	r2, #52	; 0x34
 8001ab0:	5c9b      	ldrb	r3, [r3, r2]
 8001ab2:	2b01      	cmp	r3, #1
 8001ab4:	d101      	bne.n	8001aba <HAL_ADC_Start+0x2a>
 8001ab6:	2302      	movs	r3, #2
 8001ab8:	e038      	b.n	8001b2c <HAL_ADC_Start+0x9c>
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	2234      	movs	r2, #52	; 0x34
 8001abe:	2101      	movs	r1, #1
 8001ac0:	5499      	strb	r1, [r3, r2]
      
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	7e5b      	ldrb	r3, [r3, #25]
 8001ac6:	2b01      	cmp	r3, #1
 8001ac8:	d007      	beq.n	8001ada <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8001aca:	230f      	movs	r3, #15
 8001acc:	18fc      	adds	r4, r7, r3
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	0018      	movs	r0, r3
 8001ad2:	f000 f9e3 	bl	8001e9c <ADC_Enable>
 8001ad6:	0003      	movs	r3, r0
 8001ad8:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001ada:	230f      	movs	r3, #15
 8001adc:	18fb      	adds	r3, r7, r3
 8001ade:	781b      	ldrb	r3, [r3, #0]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d120      	bne.n	8001b26 <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ae8:	4a12      	ldr	r2, [pc, #72]	; (8001b34 <HAL_ADC_Start+0xa4>)
 8001aea:	4013      	ands	r3, r2
 8001aec:	2280      	movs	r2, #128	; 0x80
 8001aee:	0052      	lsls	r2, r2, #1
 8001af0:	431a      	orrs	r2, r3
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	2200      	movs	r2, #0
 8001afa:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2234      	movs	r2, #52	; 0x34
 8001b00:	2100      	movs	r1, #0
 8001b02:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	221c      	movs	r2, #28
 8001b0a:	601a      	str	r2, [r3, #0]
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	689a      	ldr	r2, [r3, #8]
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	2104      	movs	r1, #4
 8001b18:	430a      	orrs	r2, r1
 8001b1a:	609a      	str	r2, [r3, #8]
 8001b1c:	e003      	b.n	8001b26 <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001b1e:	230f      	movs	r3, #15
 8001b20:	18fb      	adds	r3, r7, r3
 8001b22:	2202      	movs	r2, #2
 8001b24:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001b26:	230f      	movs	r3, #15
 8001b28:	18fb      	adds	r3, r7, r3
 8001b2a:	781b      	ldrb	r3, [r3, #0]
}
 8001b2c:	0018      	movs	r0, r3
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	b005      	add	sp, #20
 8001b32:	bd90      	pop	{r4, r7, pc}
 8001b34:	fffff0fe 	.word	0xfffff0fe

08001b38 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b084      	sub	sp, #16
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
 8001b40:	6039      	str	r1, [r7, #0]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	695b      	ldr	r3, [r3, #20]
 8001b46:	2b08      	cmp	r3, #8
 8001b48:	d102      	bne.n	8001b50 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8001b4a:	2308      	movs	r3, #8
 8001b4c:	60fb      	str	r3, [r7, #12]
 8001b4e:	e014      	b.n	8001b7a <HAL_ADC_PollForConversion+0x42>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	68db      	ldr	r3, [r3, #12]
 8001b56:	2201      	movs	r2, #1
 8001b58:	4013      	ands	r3, r2
 8001b5a:	2b01      	cmp	r3, #1
 8001b5c:	d10b      	bne.n	8001b76 <HAL_ADC_PollForConversion+0x3e>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b62:	2220      	movs	r2, #32
 8001b64:	431a      	orrs	r2, r3
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	2234      	movs	r2, #52	; 0x34
 8001b6e:	2100      	movs	r1, #0
 8001b70:	5499      	strb	r1, [r3, r2]
      
      return HAL_ERROR;
 8001b72:	2301      	movs	r3, #1
 8001b74:	e071      	b.n	8001c5a <HAL_ADC_PollForConversion+0x122>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8001b76:	230c      	movs	r3, #12
 8001b78:	60fb      	str	r3, [r7, #12]
    }
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8001b7a:	f7ff fe1b 	bl	80017b4 <HAL_GetTick>
 8001b7e:	0003      	movs	r3, r0
 8001b80:	60bb      	str	r3, [r7, #8]
  
  /* Wait until End of Conversion flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001b82:	e01f      	b.n	8001bc4 <HAL_ADC_PollForConversion+0x8c>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	3301      	adds	r3, #1
 8001b88:	d01c      	beq.n	8001bc4 <HAL_ADC_PollForConversion+0x8c>
    {
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d007      	beq.n	8001ba0 <HAL_ADC_PollForConversion+0x68>
 8001b90:	f7ff fe10 	bl	80017b4 <HAL_GetTick>
 8001b94:	0002      	movs	r2, r0
 8001b96:	68bb      	ldr	r3, [r7, #8]
 8001b98:	1ad3      	subs	r3, r2, r3
 8001b9a:	683a      	ldr	r2, [r7, #0]
 8001b9c:	429a      	cmp	r2, r3
 8001b9e:	d211      	bcs.n	8001bc4 <HAL_ADC_PollForConversion+0x8c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	68fa      	ldr	r2, [r7, #12]
 8001ba8:	4013      	ands	r3, r2
 8001baa:	d10b      	bne.n	8001bc4 <HAL_ADC_PollForConversion+0x8c>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bb0:	2204      	movs	r2, #4
 8001bb2:	431a      	orrs	r2, r3
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	639a      	str	r2, [r3, #56]	; 0x38

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2234      	movs	r2, #52	; 0x34
 8001bbc:	2100      	movs	r1, #0
 8001bbe:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8001bc0:	2303      	movs	r3, #3
 8001bc2:	e04a      	b.n	8001c5a <HAL_ADC_PollForConversion+0x122>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	68fa      	ldr	r2, [r7, #12]
 8001bcc:	4013      	ands	r3, r2
 8001bce:	d0d9      	beq.n	8001b84 <HAL_ADC_PollForConversion+0x4c>
      }
    }
  }
    
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bd4:	2280      	movs	r2, #128	; 0x80
 8001bd6:	0092      	lsls	r2, r2, #2
 8001bd8:	431a      	orrs	r2, r3
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	68da      	ldr	r2, [r3, #12]
 8001be4:	23c0      	movs	r3, #192	; 0xc0
 8001be6:	011b      	lsls	r3, r3, #4
 8001be8:	4013      	ands	r3, r2
 8001bea:	d12d      	bne.n	8001c48 <HAL_ADC_PollForConversion+0x110>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	7e9b      	ldrb	r3, [r3, #26]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d129      	bne.n	8001c48 <HAL_ADC_PollForConversion+0x110>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	2208      	movs	r2, #8
 8001bfc:	4013      	ands	r3, r2
 8001bfe:	2b08      	cmp	r3, #8
 8001c00:	d122      	bne.n	8001c48 <HAL_ADC_PollForConversion+0x110>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	689b      	ldr	r3, [r3, #8]
 8001c08:	2204      	movs	r2, #4
 8001c0a:	4013      	ands	r3, r2
 8001c0c:	d110      	bne.n	8001c30 <HAL_ADC_PollForConversion+0xf8>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	685a      	ldr	r2, [r3, #4]
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	210c      	movs	r1, #12
 8001c1a:	438a      	bics	r2, r1
 8001c1c:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c22:	4a10      	ldr	r2, [pc, #64]	; (8001c64 <HAL_ADC_PollForConversion+0x12c>)
 8001c24:	4013      	ands	r3, r2
 8001c26:	2201      	movs	r2, #1
 8001c28:	431a      	orrs	r2, r3
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	639a      	str	r2, [r3, #56]	; 0x38
 8001c2e:	e00b      	b.n	8001c48 <HAL_ADC_PollForConversion+0x110>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c34:	2220      	movs	r2, #32
 8001c36:	431a      	orrs	r2, r3
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c40:	2201      	movs	r2, #1
 8001c42:	431a      	orrs	r2, r3
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	7e1b      	ldrb	r3, [r3, #24]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d103      	bne.n	8001c58 <HAL_ADC_PollForConversion+0x120>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	220c      	movs	r2, #12
 8001c56:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001c58:	2300      	movs	r3, #0
}
 8001c5a:	0018      	movs	r0, r3
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	b004      	add	sp, #16
 8001c60:	bd80      	pop	{r7, pc}
 8001c62:	46c0      	nop			; (mov r8, r8)
 8001c64:	fffffefe 	.word	0xfffffefe

08001c68 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b082      	sub	sp, #8
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001c76:	0018      	movs	r0, r3
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	b002      	add	sp, #8
 8001c7c:	bd80      	pop	{r7, pc}
	...

08001c80 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b084      	sub	sp, #16
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
 8001c88:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c8a:	230f      	movs	r3, #15
 8001c8c:	18fb      	adds	r3, r7, r3
 8001c8e:	2200      	movs	r2, #0
 8001c90:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 8001c92:	2300      	movs	r3, #0
 8001c94:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c9a:	2380      	movs	r3, #128	; 0x80
 8001c9c:	055b      	lsls	r3, r3, #21
 8001c9e:	429a      	cmp	r2, r3
 8001ca0:	d011      	beq.n	8001cc6 <HAL_ADC_ConfigChannel+0x46>
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ca6:	2b01      	cmp	r3, #1
 8001ca8:	d00d      	beq.n	8001cc6 <HAL_ADC_ConfigChannel+0x46>
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cae:	2b02      	cmp	r3, #2
 8001cb0:	d009      	beq.n	8001cc6 <HAL_ADC_ConfigChannel+0x46>
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cb6:	2b03      	cmp	r3, #3
 8001cb8:	d005      	beq.n	8001cc6 <HAL_ADC_ConfigChannel+0x46>
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cbe:	2b04      	cmp	r3, #4
 8001cc0:	d001      	beq.n	8001cc6 <HAL_ADC_ConfigChannel+0x46>
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	2234      	movs	r2, #52	; 0x34
 8001cca:	5c9b      	ldrb	r3, [r3, r2]
 8001ccc:	2b01      	cmp	r3, #1
 8001cce:	d101      	bne.n	8001cd4 <HAL_ADC_ConfigChannel+0x54>
 8001cd0:	2302      	movs	r3, #2
 8001cd2:	e0d0      	b.n	8001e76 <HAL_ADC_ConfigChannel+0x1f6>
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2234      	movs	r2, #52	; 0x34
 8001cd8:	2101      	movs	r1, #1
 8001cda:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	689b      	ldr	r3, [r3, #8]
 8001ce2:	2204      	movs	r2, #4
 8001ce4:	4013      	ands	r3, r2
 8001ce6:	d000      	beq.n	8001cea <HAL_ADC_ConfigChannel+0x6a>
 8001ce8:	e0b4      	b.n	8001e54 <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	4a64      	ldr	r2, [pc, #400]	; (8001e80 <HAL_ADC_ConfigChannel+0x200>)
 8001cf0:	4293      	cmp	r3, r2
 8001cf2:	d100      	bne.n	8001cf6 <HAL_ADC_ConfigChannel+0x76>
 8001cf4:	e082      	b.n	8001dfc <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	2201      	movs	r2, #1
 8001d02:	409a      	lsls	r2, r3
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	430a      	orrs	r2, r1
 8001d0a:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d10:	2380      	movs	r3, #128	; 0x80
 8001d12:	055b      	lsls	r3, r3, #21
 8001d14:	429a      	cmp	r2, r3
 8001d16:	d037      	beq.n	8001d88 <HAL_ADC_ConfigChannel+0x108>
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d1c:	2b01      	cmp	r3, #1
 8001d1e:	d033      	beq.n	8001d88 <HAL_ADC_ConfigChannel+0x108>
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d24:	2b02      	cmp	r3, #2
 8001d26:	d02f      	beq.n	8001d88 <HAL_ADC_ConfigChannel+0x108>
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d2c:	2b03      	cmp	r3, #3
 8001d2e:	d02b      	beq.n	8001d88 <HAL_ADC_ConfigChannel+0x108>
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d34:	2b04      	cmp	r3, #4
 8001d36:	d027      	beq.n	8001d88 <HAL_ADC_ConfigChannel+0x108>
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d3c:	2b05      	cmp	r3, #5
 8001d3e:	d023      	beq.n	8001d88 <HAL_ADC_ConfigChannel+0x108>
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d44:	2b06      	cmp	r3, #6
 8001d46:	d01f      	beq.n	8001d88 <HAL_ADC_ConfigChannel+0x108>
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d4c:	2b07      	cmp	r3, #7
 8001d4e:	d01b      	beq.n	8001d88 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	689a      	ldr	r2, [r3, #8]
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	695b      	ldr	r3, [r3, #20]
 8001d5a:	2107      	movs	r1, #7
 8001d5c:	400b      	ands	r3, r1
 8001d5e:	429a      	cmp	r2, r3
 8001d60:	d012      	beq.n	8001d88 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	695a      	ldr	r2, [r3, #20]
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	2107      	movs	r1, #7
 8001d6e:	438a      	bics	r2, r1
 8001d70:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	6959      	ldr	r1, [r3, #20]
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	689b      	ldr	r3, [r3, #8]
 8001d7c:	2207      	movs	r2, #7
 8001d7e:	401a      	ands	r2, r3
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	430a      	orrs	r2, r1
 8001d86:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	2b10      	cmp	r3, #16
 8001d8e:	d007      	beq.n	8001da0 <HAL_ADC_ConfigChannel+0x120>
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	2b11      	cmp	r3, #17
 8001d96:	d003      	beq.n	8001da0 <HAL_ADC_ConfigChannel+0x120>
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	2b12      	cmp	r3, #18
 8001d9e:	d163      	bne.n	8001e68 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8001da0:	4b38      	ldr	r3, [pc, #224]	; (8001e84 <HAL_ADC_ConfigChannel+0x204>)
 8001da2:	6819      	ldr	r1, [r3, #0]
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	2b10      	cmp	r3, #16
 8001daa:	d009      	beq.n	8001dc0 <HAL_ADC_ConfigChannel+0x140>
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	2b11      	cmp	r3, #17
 8001db2:	d102      	bne.n	8001dba <HAL_ADC_ConfigChannel+0x13a>
 8001db4:	2380      	movs	r3, #128	; 0x80
 8001db6:	03db      	lsls	r3, r3, #15
 8001db8:	e004      	b.n	8001dc4 <HAL_ADC_ConfigChannel+0x144>
 8001dba:	2380      	movs	r3, #128	; 0x80
 8001dbc:	045b      	lsls	r3, r3, #17
 8001dbe:	e001      	b.n	8001dc4 <HAL_ADC_ConfigChannel+0x144>
 8001dc0:	2380      	movs	r3, #128	; 0x80
 8001dc2:	041b      	lsls	r3, r3, #16
 8001dc4:	4a2f      	ldr	r2, [pc, #188]	; (8001e84 <HAL_ADC_ConfigChannel+0x204>)
 8001dc6:	430b      	orrs	r3, r1
 8001dc8:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	2b10      	cmp	r3, #16
 8001dd0:	d14a      	bne.n	8001e68 <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001dd2:	4b2d      	ldr	r3, [pc, #180]	; (8001e88 <HAL_ADC_ConfigChannel+0x208>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	492d      	ldr	r1, [pc, #180]	; (8001e8c <HAL_ADC_ConfigChannel+0x20c>)
 8001dd8:	0018      	movs	r0, r3
 8001dda:	f7fe f9b1 	bl	8000140 <__udivsi3>
 8001dde:	0003      	movs	r3, r0
 8001de0:	001a      	movs	r2, r3
 8001de2:	0013      	movs	r3, r2
 8001de4:	009b      	lsls	r3, r3, #2
 8001de6:	189b      	adds	r3, r3, r2
 8001de8:	005b      	lsls	r3, r3, #1
 8001dea:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001dec:	e002      	b.n	8001df4 <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 8001dee:	68bb      	ldr	r3, [r7, #8]
 8001df0:	3b01      	subs	r3, #1
 8001df2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001df4:	68bb      	ldr	r3, [r7, #8]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d1f9      	bne.n	8001dee <HAL_ADC_ConfigChannel+0x16e>
 8001dfa:	e035      	b.n	8001e68 <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	2101      	movs	r1, #1
 8001e08:	4099      	lsls	r1, r3
 8001e0a:	000b      	movs	r3, r1
 8001e0c:	43d9      	mvns	r1, r3
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	400a      	ands	r2, r1
 8001e14:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	2b10      	cmp	r3, #16
 8001e1c:	d007      	beq.n	8001e2e <HAL_ADC_ConfigChannel+0x1ae>
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	2b11      	cmp	r3, #17
 8001e24:	d003      	beq.n	8001e2e <HAL_ADC_ConfigChannel+0x1ae>
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	2b12      	cmp	r3, #18
 8001e2c:	d11c      	bne.n	8001e68 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8001e2e:	4b15      	ldr	r3, [pc, #84]	; (8001e84 <HAL_ADC_ConfigChannel+0x204>)
 8001e30:	6819      	ldr	r1, [r3, #0]
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	2b10      	cmp	r3, #16
 8001e38:	d007      	beq.n	8001e4a <HAL_ADC_ConfigChannel+0x1ca>
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	2b11      	cmp	r3, #17
 8001e40:	d101      	bne.n	8001e46 <HAL_ADC_ConfigChannel+0x1c6>
 8001e42:	4b13      	ldr	r3, [pc, #76]	; (8001e90 <HAL_ADC_ConfigChannel+0x210>)
 8001e44:	e002      	b.n	8001e4c <HAL_ADC_ConfigChannel+0x1cc>
 8001e46:	4b13      	ldr	r3, [pc, #76]	; (8001e94 <HAL_ADC_ConfigChannel+0x214>)
 8001e48:	e000      	b.n	8001e4c <HAL_ADC_ConfigChannel+0x1cc>
 8001e4a:	4b13      	ldr	r3, [pc, #76]	; (8001e98 <HAL_ADC_ConfigChannel+0x218>)
 8001e4c:	4a0d      	ldr	r2, [pc, #52]	; (8001e84 <HAL_ADC_ConfigChannel+0x204>)
 8001e4e:	400b      	ands	r3, r1
 8001e50:	6013      	str	r3, [r2, #0]
 8001e52:	e009      	b.n	8001e68 <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e58:	2220      	movs	r2, #32
 8001e5a:	431a      	orrs	r2, r3
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 8001e60:	230f      	movs	r3, #15
 8001e62:	18fb      	adds	r3, r7, r3
 8001e64:	2201      	movs	r2, #1
 8001e66:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2234      	movs	r2, #52	; 0x34
 8001e6c:	2100      	movs	r1, #0
 8001e6e:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8001e70:	230f      	movs	r3, #15
 8001e72:	18fb      	adds	r3, r7, r3
 8001e74:	781b      	ldrb	r3, [r3, #0]
}
 8001e76:	0018      	movs	r0, r3
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	b004      	add	sp, #16
 8001e7c:	bd80      	pop	{r7, pc}
 8001e7e:	46c0      	nop			; (mov r8, r8)
 8001e80:	00001001 	.word	0x00001001
 8001e84:	40012708 	.word	0x40012708
 8001e88:	2000001c 	.word	0x2000001c
 8001e8c:	000f4240 	.word	0x000f4240
 8001e90:	ffbfffff 	.word	0xffbfffff
 8001e94:	feffffff 	.word	0xfeffffff
 8001e98:	ff7fffff 	.word	0xff7fffff

08001e9c <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b084      	sub	sp, #16
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	689b      	ldr	r3, [r3, #8]
 8001eb2:	2203      	movs	r2, #3
 8001eb4:	4013      	ands	r3, r2
 8001eb6:	2b01      	cmp	r3, #1
 8001eb8:	d112      	bne.n	8001ee0 <ADC_Enable+0x44>
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	2201      	movs	r2, #1
 8001ec2:	4013      	ands	r3, r2
 8001ec4:	2b01      	cmp	r3, #1
 8001ec6:	d009      	beq.n	8001edc <ADC_Enable+0x40>
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	68da      	ldr	r2, [r3, #12]
 8001ece:	2380      	movs	r3, #128	; 0x80
 8001ed0:	021b      	lsls	r3, r3, #8
 8001ed2:	401a      	ands	r2, r3
 8001ed4:	2380      	movs	r3, #128	; 0x80
 8001ed6:	021b      	lsls	r3, r3, #8
 8001ed8:	429a      	cmp	r2, r3
 8001eda:	d101      	bne.n	8001ee0 <ADC_Enable+0x44>
 8001edc:	2301      	movs	r3, #1
 8001ede:	e000      	b.n	8001ee2 <ADC_Enable+0x46>
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d152      	bne.n	8001f8c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	689b      	ldr	r3, [r3, #8]
 8001eec:	4a2a      	ldr	r2, [pc, #168]	; (8001f98 <ADC_Enable+0xfc>)
 8001eee:	4013      	ands	r3, r2
 8001ef0:	d00d      	beq.n	8001f0e <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ef6:	2210      	movs	r2, #16
 8001ef8:	431a      	orrs	r2, r3
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	639a      	str	r2, [r3, #56]	; 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f02:	2201      	movs	r2, #1
 8001f04:	431a      	orrs	r2, r3
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	63da      	str	r2, [r3, #60]	; 0x3c
      
      return HAL_ERROR;
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	e03f      	b.n	8001f8e <ADC_Enable+0xf2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	689a      	ldr	r2, [r3, #8]
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	2101      	movs	r1, #1
 8001f1a:	430a      	orrs	r2, r1
 8001f1c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001f1e:	4b1f      	ldr	r3, [pc, #124]	; (8001f9c <ADC_Enable+0x100>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	491f      	ldr	r1, [pc, #124]	; (8001fa0 <ADC_Enable+0x104>)
 8001f24:	0018      	movs	r0, r3
 8001f26:	f7fe f90b 	bl	8000140 <__udivsi3>
 8001f2a:	0003      	movs	r3, r0
 8001f2c:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001f2e:	e002      	b.n	8001f36 <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 8001f30:	68bb      	ldr	r3, [r7, #8]
 8001f32:	3b01      	subs	r3, #1
 8001f34:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001f36:	68bb      	ldr	r3, [r7, #8]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d1f9      	bne.n	8001f30 <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 8001f3c:	f7ff fc3a 	bl	80017b4 <HAL_GetTick>
 8001f40:	0003      	movs	r3, r0
 8001f42:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001f44:	e01b      	b.n	8001f7e <ADC_Enable+0xe2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001f46:	f7ff fc35 	bl	80017b4 <HAL_GetTick>
 8001f4a:	0002      	movs	r2, r0
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	1ad3      	subs	r3, r2, r3
 8001f50:	2b02      	cmp	r3, #2
 8001f52:	d914      	bls.n	8001f7e <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	2201      	movs	r2, #1
 8001f5c:	4013      	ands	r3, r2
 8001f5e:	2b01      	cmp	r3, #1
 8001f60:	d00d      	beq.n	8001f7e <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f66:	2210      	movs	r2, #16
 8001f68:	431a      	orrs	r2, r3
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f72:	2201      	movs	r2, #1
 8001f74:	431a      	orrs	r2, r3
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	e007      	b.n	8001f8e <ADC_Enable+0xf2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	2201      	movs	r2, #1
 8001f86:	4013      	ands	r3, r2
 8001f88:	2b01      	cmp	r3, #1
 8001f8a:	d1dc      	bne.n	8001f46 <ADC_Enable+0xaa>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001f8c:	2300      	movs	r3, #0
}
 8001f8e:	0018      	movs	r0, r3
 8001f90:	46bd      	mov	sp, r7
 8001f92:	b004      	add	sp, #16
 8001f94:	bd80      	pop	{r7, pc}
 8001f96:	46c0      	nop			; (mov r8, r8)
 8001f98:	80000017 	.word	0x80000017
 8001f9c:	2000001c 	.word	0x2000001c
 8001fa0:	000f4240 	.word	0x000f4240

08001fa4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b082      	sub	sp, #8
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	0002      	movs	r2, r0
 8001fac:	1dfb      	adds	r3, r7, #7
 8001fae:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001fb0:	1dfb      	adds	r3, r7, #7
 8001fb2:	781b      	ldrb	r3, [r3, #0]
 8001fb4:	2b7f      	cmp	r3, #127	; 0x7f
 8001fb6:	d809      	bhi.n	8001fcc <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001fb8:	1dfb      	adds	r3, r7, #7
 8001fba:	781b      	ldrb	r3, [r3, #0]
 8001fbc:	001a      	movs	r2, r3
 8001fbe:	231f      	movs	r3, #31
 8001fc0:	401a      	ands	r2, r3
 8001fc2:	4b04      	ldr	r3, [pc, #16]	; (8001fd4 <__NVIC_EnableIRQ+0x30>)
 8001fc4:	2101      	movs	r1, #1
 8001fc6:	4091      	lsls	r1, r2
 8001fc8:	000a      	movs	r2, r1
 8001fca:	601a      	str	r2, [r3, #0]
  }
}
 8001fcc:	46c0      	nop			; (mov r8, r8)
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	b002      	add	sp, #8
 8001fd2:	bd80      	pop	{r7, pc}
 8001fd4:	e000e100 	.word	0xe000e100

08001fd8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fd8:	b590      	push	{r4, r7, lr}
 8001fda:	b083      	sub	sp, #12
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	0002      	movs	r2, r0
 8001fe0:	6039      	str	r1, [r7, #0]
 8001fe2:	1dfb      	adds	r3, r7, #7
 8001fe4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001fe6:	1dfb      	adds	r3, r7, #7
 8001fe8:	781b      	ldrb	r3, [r3, #0]
 8001fea:	2b7f      	cmp	r3, #127	; 0x7f
 8001fec:	d828      	bhi.n	8002040 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001fee:	4a2f      	ldr	r2, [pc, #188]	; (80020ac <__NVIC_SetPriority+0xd4>)
 8001ff0:	1dfb      	adds	r3, r7, #7
 8001ff2:	781b      	ldrb	r3, [r3, #0]
 8001ff4:	b25b      	sxtb	r3, r3
 8001ff6:	089b      	lsrs	r3, r3, #2
 8001ff8:	33c0      	adds	r3, #192	; 0xc0
 8001ffa:	009b      	lsls	r3, r3, #2
 8001ffc:	589b      	ldr	r3, [r3, r2]
 8001ffe:	1dfa      	adds	r2, r7, #7
 8002000:	7812      	ldrb	r2, [r2, #0]
 8002002:	0011      	movs	r1, r2
 8002004:	2203      	movs	r2, #3
 8002006:	400a      	ands	r2, r1
 8002008:	00d2      	lsls	r2, r2, #3
 800200a:	21ff      	movs	r1, #255	; 0xff
 800200c:	4091      	lsls	r1, r2
 800200e:	000a      	movs	r2, r1
 8002010:	43d2      	mvns	r2, r2
 8002012:	401a      	ands	r2, r3
 8002014:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	019b      	lsls	r3, r3, #6
 800201a:	22ff      	movs	r2, #255	; 0xff
 800201c:	401a      	ands	r2, r3
 800201e:	1dfb      	adds	r3, r7, #7
 8002020:	781b      	ldrb	r3, [r3, #0]
 8002022:	0018      	movs	r0, r3
 8002024:	2303      	movs	r3, #3
 8002026:	4003      	ands	r3, r0
 8002028:	00db      	lsls	r3, r3, #3
 800202a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800202c:	481f      	ldr	r0, [pc, #124]	; (80020ac <__NVIC_SetPriority+0xd4>)
 800202e:	1dfb      	adds	r3, r7, #7
 8002030:	781b      	ldrb	r3, [r3, #0]
 8002032:	b25b      	sxtb	r3, r3
 8002034:	089b      	lsrs	r3, r3, #2
 8002036:	430a      	orrs	r2, r1
 8002038:	33c0      	adds	r3, #192	; 0xc0
 800203a:	009b      	lsls	r3, r3, #2
 800203c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800203e:	e031      	b.n	80020a4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002040:	4a1b      	ldr	r2, [pc, #108]	; (80020b0 <__NVIC_SetPriority+0xd8>)
 8002042:	1dfb      	adds	r3, r7, #7
 8002044:	781b      	ldrb	r3, [r3, #0]
 8002046:	0019      	movs	r1, r3
 8002048:	230f      	movs	r3, #15
 800204a:	400b      	ands	r3, r1
 800204c:	3b08      	subs	r3, #8
 800204e:	089b      	lsrs	r3, r3, #2
 8002050:	3306      	adds	r3, #6
 8002052:	009b      	lsls	r3, r3, #2
 8002054:	18d3      	adds	r3, r2, r3
 8002056:	3304      	adds	r3, #4
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	1dfa      	adds	r2, r7, #7
 800205c:	7812      	ldrb	r2, [r2, #0]
 800205e:	0011      	movs	r1, r2
 8002060:	2203      	movs	r2, #3
 8002062:	400a      	ands	r2, r1
 8002064:	00d2      	lsls	r2, r2, #3
 8002066:	21ff      	movs	r1, #255	; 0xff
 8002068:	4091      	lsls	r1, r2
 800206a:	000a      	movs	r2, r1
 800206c:	43d2      	mvns	r2, r2
 800206e:	401a      	ands	r2, r3
 8002070:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	019b      	lsls	r3, r3, #6
 8002076:	22ff      	movs	r2, #255	; 0xff
 8002078:	401a      	ands	r2, r3
 800207a:	1dfb      	adds	r3, r7, #7
 800207c:	781b      	ldrb	r3, [r3, #0]
 800207e:	0018      	movs	r0, r3
 8002080:	2303      	movs	r3, #3
 8002082:	4003      	ands	r3, r0
 8002084:	00db      	lsls	r3, r3, #3
 8002086:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002088:	4809      	ldr	r0, [pc, #36]	; (80020b0 <__NVIC_SetPriority+0xd8>)
 800208a:	1dfb      	adds	r3, r7, #7
 800208c:	781b      	ldrb	r3, [r3, #0]
 800208e:	001c      	movs	r4, r3
 8002090:	230f      	movs	r3, #15
 8002092:	4023      	ands	r3, r4
 8002094:	3b08      	subs	r3, #8
 8002096:	089b      	lsrs	r3, r3, #2
 8002098:	430a      	orrs	r2, r1
 800209a:	3306      	adds	r3, #6
 800209c:	009b      	lsls	r3, r3, #2
 800209e:	18c3      	adds	r3, r0, r3
 80020a0:	3304      	adds	r3, #4
 80020a2:	601a      	str	r2, [r3, #0]
}
 80020a4:	46c0      	nop			; (mov r8, r8)
 80020a6:	46bd      	mov	sp, r7
 80020a8:	b003      	add	sp, #12
 80020aa:	bd90      	pop	{r4, r7, pc}
 80020ac:	e000e100 	.word	0xe000e100
 80020b0:	e000ed00 	.word	0xe000ed00

080020b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b082      	sub	sp, #8
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	1e5a      	subs	r2, r3, #1
 80020c0:	2380      	movs	r3, #128	; 0x80
 80020c2:	045b      	lsls	r3, r3, #17
 80020c4:	429a      	cmp	r2, r3
 80020c6:	d301      	bcc.n	80020cc <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80020c8:	2301      	movs	r3, #1
 80020ca:	e010      	b.n	80020ee <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020cc:	4b0a      	ldr	r3, [pc, #40]	; (80020f8 <SysTick_Config+0x44>)
 80020ce:	687a      	ldr	r2, [r7, #4]
 80020d0:	3a01      	subs	r2, #1
 80020d2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80020d4:	2301      	movs	r3, #1
 80020d6:	425b      	negs	r3, r3
 80020d8:	2103      	movs	r1, #3
 80020da:	0018      	movs	r0, r3
 80020dc:	f7ff ff7c 	bl	8001fd8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80020e0:	4b05      	ldr	r3, [pc, #20]	; (80020f8 <SysTick_Config+0x44>)
 80020e2:	2200      	movs	r2, #0
 80020e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020e6:	4b04      	ldr	r3, [pc, #16]	; (80020f8 <SysTick_Config+0x44>)
 80020e8:	2207      	movs	r2, #7
 80020ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020ec:	2300      	movs	r3, #0
}
 80020ee:	0018      	movs	r0, r3
 80020f0:	46bd      	mov	sp, r7
 80020f2:	b002      	add	sp, #8
 80020f4:	bd80      	pop	{r7, pc}
 80020f6:	46c0      	nop			; (mov r8, r8)
 80020f8:	e000e010 	.word	0xe000e010

080020fc <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b084      	sub	sp, #16
 8002100:	af00      	add	r7, sp, #0
 8002102:	60b9      	str	r1, [r7, #8]
 8002104:	607a      	str	r2, [r7, #4]
 8002106:	210f      	movs	r1, #15
 8002108:	187b      	adds	r3, r7, r1
 800210a:	1c02      	adds	r2, r0, #0
 800210c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800210e:	68ba      	ldr	r2, [r7, #8]
 8002110:	187b      	adds	r3, r7, r1
 8002112:	781b      	ldrb	r3, [r3, #0]
 8002114:	b25b      	sxtb	r3, r3
 8002116:	0011      	movs	r1, r2
 8002118:	0018      	movs	r0, r3
 800211a:	f7ff ff5d 	bl	8001fd8 <__NVIC_SetPriority>
}
 800211e:	46c0      	nop			; (mov r8, r8)
 8002120:	46bd      	mov	sp, r7
 8002122:	b004      	add	sp, #16
 8002124:	bd80      	pop	{r7, pc}

08002126 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002126:	b580      	push	{r7, lr}
 8002128:	b082      	sub	sp, #8
 800212a:	af00      	add	r7, sp, #0
 800212c:	0002      	movs	r2, r0
 800212e:	1dfb      	adds	r3, r7, #7
 8002130:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002132:	1dfb      	adds	r3, r7, #7
 8002134:	781b      	ldrb	r3, [r3, #0]
 8002136:	b25b      	sxtb	r3, r3
 8002138:	0018      	movs	r0, r3
 800213a:	f7ff ff33 	bl	8001fa4 <__NVIC_EnableIRQ>
}
 800213e:	46c0      	nop			; (mov r8, r8)
 8002140:	46bd      	mov	sp, r7
 8002142:	b002      	add	sp, #8
 8002144:	bd80      	pop	{r7, pc}

08002146 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002146:	b580      	push	{r7, lr}
 8002148:	b082      	sub	sp, #8
 800214a:	af00      	add	r7, sp, #0
 800214c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	0018      	movs	r0, r3
 8002152:	f7ff ffaf 	bl	80020b4 <SysTick_Config>
 8002156:	0003      	movs	r3, r0
}
 8002158:	0018      	movs	r0, r3
 800215a:	46bd      	mov	sp, r7
 800215c:	b002      	add	sp, #8
 800215e:	bd80      	pop	{r7, pc}

08002160 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b082      	sub	sp, #8
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2221      	movs	r2, #33	; 0x21
 800216c:	5c9b      	ldrb	r3, [r3, r2]
 800216e:	b2db      	uxtb	r3, r3
 8002170:	2b02      	cmp	r3, #2
 8002172:	d008      	beq.n	8002186 <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2204      	movs	r2, #4
 8002178:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2220      	movs	r2, #32
 800217e:	2100      	movs	r1, #0
 8002180:	5499      	strb	r1, [r3, r2]
    
    return HAL_ERROR;
 8002182:	2301      	movs	r3, #1
 8002184:	e020      	b.n	80021c8 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	681a      	ldr	r2, [r3, #0]
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	210e      	movs	r1, #14
 8002192:	438a      	bics	r2, r1
 8002194:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	681a      	ldr	r2, [r3, #0]
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	2101      	movs	r1, #1
 80021a2:	438a      	bics	r2, r1
 80021a4:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021ae:	2101      	movs	r1, #1
 80021b0:	4091      	lsls	r1, r2
 80021b2:	000a      	movs	r2, r1
 80021b4:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	2221      	movs	r2, #33	; 0x21
 80021ba:	2101      	movs	r1, #1
 80021bc:	5499      	strb	r1, [r3, r2]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	2220      	movs	r2, #32
 80021c2:	2100      	movs	r1, #0
 80021c4:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 80021c6:	2300      	movs	r3, #0
}
 80021c8:	0018      	movs	r0, r3
 80021ca:	46bd      	mov	sp, r7
 80021cc:	b002      	add	sp, #8
 80021ce:	bd80      	pop	{r7, pc}

080021d0 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b084      	sub	sp, #16
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80021d8:	210f      	movs	r1, #15
 80021da:	187b      	adds	r3, r7, r1
 80021dc:	2200      	movs	r2, #0
 80021de:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2221      	movs	r2, #33	; 0x21
 80021e4:	5c9b      	ldrb	r3, [r3, r2]
 80021e6:	b2db      	uxtb	r3, r3
 80021e8:	2b02      	cmp	r3, #2
 80021ea:	d006      	beq.n	80021fa <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2204      	movs	r2, #4
 80021f0:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80021f2:	187b      	adds	r3, r7, r1
 80021f4:	2201      	movs	r2, #1
 80021f6:	701a      	strb	r2, [r3, #0]
 80021f8:	e028      	b.n	800224c <HAL_DMA_Abort_IT+0x7c>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	681a      	ldr	r2, [r3, #0]
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	210e      	movs	r1, #14
 8002206:	438a      	bics	r2, r1
 8002208:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	681a      	ldr	r2, [r3, #0]
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	2101      	movs	r1, #1
 8002216:	438a      	bics	r2, r1
 8002218:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002222:	2101      	movs	r1, #1
 8002224:	4091      	lsls	r1, r2
 8002226:	000a      	movs	r2, r1
 8002228:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	2221      	movs	r2, #33	; 0x21
 800222e:	2101      	movs	r1, #1
 8002230:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	2220      	movs	r2, #32
 8002236:	2100      	movs	r1, #0
 8002238:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800223e:	2b00      	cmp	r3, #0
 8002240:	d004      	beq.n	800224c <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002246:	687a      	ldr	r2, [r7, #4]
 8002248:	0010      	movs	r0, r2
 800224a:	4798      	blx	r3
    } 
  }
  return status;
 800224c:	230f      	movs	r3, #15
 800224e:	18fb      	adds	r3, r7, r3
 8002250:	781b      	ldrb	r3, [r3, #0]
}
 8002252:	0018      	movs	r0, r3
 8002254:	46bd      	mov	sp, r7
 8002256:	b004      	add	sp, #16
 8002258:	bd80      	pop	{r7, pc}
	...

0800225c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b086      	sub	sp, #24
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
 8002264:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002266:	2300      	movs	r3, #0
 8002268:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800226a:	e149      	b.n	8002500 <HAL_GPIO_Init+0x2a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	2101      	movs	r1, #1
 8002272:	697a      	ldr	r2, [r7, #20]
 8002274:	4091      	lsls	r1, r2
 8002276:	000a      	movs	r2, r1
 8002278:	4013      	ands	r3, r2
 800227a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d100      	bne.n	8002284 <HAL_GPIO_Init+0x28>
 8002282:	e13a      	b.n	80024fa <HAL_GPIO_Init+0x29e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	2203      	movs	r2, #3
 800228a:	4013      	ands	r3, r2
 800228c:	2b01      	cmp	r3, #1
 800228e:	d005      	beq.n	800229c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	2203      	movs	r2, #3
 8002296:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002298:	2b02      	cmp	r3, #2
 800229a:	d130      	bne.n	80022fe <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	689b      	ldr	r3, [r3, #8]
 80022a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80022a2:	697b      	ldr	r3, [r7, #20]
 80022a4:	005b      	lsls	r3, r3, #1
 80022a6:	2203      	movs	r2, #3
 80022a8:	409a      	lsls	r2, r3
 80022aa:	0013      	movs	r3, r2
 80022ac:	43da      	mvns	r2, r3
 80022ae:	693b      	ldr	r3, [r7, #16]
 80022b0:	4013      	ands	r3, r2
 80022b2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	68da      	ldr	r2, [r3, #12]
 80022b8:	697b      	ldr	r3, [r7, #20]
 80022ba:	005b      	lsls	r3, r3, #1
 80022bc:	409a      	lsls	r2, r3
 80022be:	0013      	movs	r3, r2
 80022c0:	693a      	ldr	r2, [r7, #16]
 80022c2:	4313      	orrs	r3, r2
 80022c4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	693a      	ldr	r2, [r7, #16]
 80022ca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80022d2:	2201      	movs	r2, #1
 80022d4:	697b      	ldr	r3, [r7, #20]
 80022d6:	409a      	lsls	r2, r3
 80022d8:	0013      	movs	r3, r2
 80022da:	43da      	mvns	r2, r3
 80022dc:	693b      	ldr	r3, [r7, #16]
 80022de:	4013      	ands	r3, r2
 80022e0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	091b      	lsrs	r3, r3, #4
 80022e8:	2201      	movs	r2, #1
 80022ea:	401a      	ands	r2, r3
 80022ec:	697b      	ldr	r3, [r7, #20]
 80022ee:	409a      	lsls	r2, r3
 80022f0:	0013      	movs	r3, r2
 80022f2:	693a      	ldr	r2, [r7, #16]
 80022f4:	4313      	orrs	r3, r2
 80022f6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	693a      	ldr	r2, [r7, #16]
 80022fc:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	2203      	movs	r2, #3
 8002304:	4013      	ands	r3, r2
 8002306:	2b03      	cmp	r3, #3
 8002308:	d017      	beq.n	800233a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	68db      	ldr	r3, [r3, #12]
 800230e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002310:	697b      	ldr	r3, [r7, #20]
 8002312:	005b      	lsls	r3, r3, #1
 8002314:	2203      	movs	r2, #3
 8002316:	409a      	lsls	r2, r3
 8002318:	0013      	movs	r3, r2
 800231a:	43da      	mvns	r2, r3
 800231c:	693b      	ldr	r3, [r7, #16]
 800231e:	4013      	ands	r3, r2
 8002320:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	689a      	ldr	r2, [r3, #8]
 8002326:	697b      	ldr	r3, [r7, #20]
 8002328:	005b      	lsls	r3, r3, #1
 800232a:	409a      	lsls	r2, r3
 800232c:	0013      	movs	r3, r2
 800232e:	693a      	ldr	r2, [r7, #16]
 8002330:	4313      	orrs	r3, r2
 8002332:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	693a      	ldr	r2, [r7, #16]
 8002338:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	685b      	ldr	r3, [r3, #4]
 800233e:	2203      	movs	r2, #3
 8002340:	4013      	ands	r3, r2
 8002342:	2b02      	cmp	r3, #2
 8002344:	d123      	bne.n	800238e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002346:	697b      	ldr	r3, [r7, #20]
 8002348:	08da      	lsrs	r2, r3, #3
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	3208      	adds	r2, #8
 800234e:	0092      	lsls	r2, r2, #2
 8002350:	58d3      	ldr	r3, [r2, r3]
 8002352:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002354:	697b      	ldr	r3, [r7, #20]
 8002356:	2207      	movs	r2, #7
 8002358:	4013      	ands	r3, r2
 800235a:	009b      	lsls	r3, r3, #2
 800235c:	220f      	movs	r2, #15
 800235e:	409a      	lsls	r2, r3
 8002360:	0013      	movs	r3, r2
 8002362:	43da      	mvns	r2, r3
 8002364:	693b      	ldr	r3, [r7, #16]
 8002366:	4013      	ands	r3, r2
 8002368:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	691a      	ldr	r2, [r3, #16]
 800236e:	697b      	ldr	r3, [r7, #20]
 8002370:	2107      	movs	r1, #7
 8002372:	400b      	ands	r3, r1
 8002374:	009b      	lsls	r3, r3, #2
 8002376:	409a      	lsls	r2, r3
 8002378:	0013      	movs	r3, r2
 800237a:	693a      	ldr	r2, [r7, #16]
 800237c:	4313      	orrs	r3, r2
 800237e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002380:	697b      	ldr	r3, [r7, #20]
 8002382:	08da      	lsrs	r2, r3, #3
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	3208      	adds	r2, #8
 8002388:	0092      	lsls	r2, r2, #2
 800238a:	6939      	ldr	r1, [r7, #16]
 800238c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002394:	697b      	ldr	r3, [r7, #20]
 8002396:	005b      	lsls	r3, r3, #1
 8002398:	2203      	movs	r2, #3
 800239a:	409a      	lsls	r2, r3
 800239c:	0013      	movs	r3, r2
 800239e:	43da      	mvns	r2, r3
 80023a0:	693b      	ldr	r3, [r7, #16]
 80023a2:	4013      	ands	r3, r2
 80023a4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	2203      	movs	r2, #3
 80023ac:	401a      	ands	r2, r3
 80023ae:	697b      	ldr	r3, [r7, #20]
 80023b0:	005b      	lsls	r3, r3, #1
 80023b2:	409a      	lsls	r2, r3
 80023b4:	0013      	movs	r3, r2
 80023b6:	693a      	ldr	r2, [r7, #16]
 80023b8:	4313      	orrs	r3, r2
 80023ba:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	693a      	ldr	r2, [r7, #16]
 80023c0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	685a      	ldr	r2, [r3, #4]
 80023c6:	23c0      	movs	r3, #192	; 0xc0
 80023c8:	029b      	lsls	r3, r3, #10
 80023ca:	4013      	ands	r3, r2
 80023cc:	d100      	bne.n	80023d0 <HAL_GPIO_Init+0x174>
 80023ce:	e094      	b.n	80024fa <HAL_GPIO_Init+0x29e>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023d0:	4b51      	ldr	r3, [pc, #324]	; (8002518 <HAL_GPIO_Init+0x2bc>)
 80023d2:	699a      	ldr	r2, [r3, #24]
 80023d4:	4b50      	ldr	r3, [pc, #320]	; (8002518 <HAL_GPIO_Init+0x2bc>)
 80023d6:	2101      	movs	r1, #1
 80023d8:	430a      	orrs	r2, r1
 80023da:	619a      	str	r2, [r3, #24]
 80023dc:	4b4e      	ldr	r3, [pc, #312]	; (8002518 <HAL_GPIO_Init+0x2bc>)
 80023de:	699b      	ldr	r3, [r3, #24]
 80023e0:	2201      	movs	r2, #1
 80023e2:	4013      	ands	r3, r2
 80023e4:	60bb      	str	r3, [r7, #8]
 80023e6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80023e8:	4a4c      	ldr	r2, [pc, #304]	; (800251c <HAL_GPIO_Init+0x2c0>)
 80023ea:	697b      	ldr	r3, [r7, #20]
 80023ec:	089b      	lsrs	r3, r3, #2
 80023ee:	3302      	adds	r3, #2
 80023f0:	009b      	lsls	r3, r3, #2
 80023f2:	589b      	ldr	r3, [r3, r2]
 80023f4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80023f6:	697b      	ldr	r3, [r7, #20]
 80023f8:	2203      	movs	r2, #3
 80023fa:	4013      	ands	r3, r2
 80023fc:	009b      	lsls	r3, r3, #2
 80023fe:	220f      	movs	r2, #15
 8002400:	409a      	lsls	r2, r3
 8002402:	0013      	movs	r3, r2
 8002404:	43da      	mvns	r2, r3
 8002406:	693b      	ldr	r3, [r7, #16]
 8002408:	4013      	ands	r3, r2
 800240a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800240c:	687a      	ldr	r2, [r7, #4]
 800240e:	2390      	movs	r3, #144	; 0x90
 8002410:	05db      	lsls	r3, r3, #23
 8002412:	429a      	cmp	r2, r3
 8002414:	d00d      	beq.n	8002432 <HAL_GPIO_Init+0x1d6>
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	4a41      	ldr	r2, [pc, #260]	; (8002520 <HAL_GPIO_Init+0x2c4>)
 800241a:	4293      	cmp	r3, r2
 800241c:	d007      	beq.n	800242e <HAL_GPIO_Init+0x1d2>
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	4a40      	ldr	r2, [pc, #256]	; (8002524 <HAL_GPIO_Init+0x2c8>)
 8002422:	4293      	cmp	r3, r2
 8002424:	d101      	bne.n	800242a <HAL_GPIO_Init+0x1ce>
 8002426:	2302      	movs	r3, #2
 8002428:	e004      	b.n	8002434 <HAL_GPIO_Init+0x1d8>
 800242a:	2305      	movs	r3, #5
 800242c:	e002      	b.n	8002434 <HAL_GPIO_Init+0x1d8>
 800242e:	2301      	movs	r3, #1
 8002430:	e000      	b.n	8002434 <HAL_GPIO_Init+0x1d8>
 8002432:	2300      	movs	r3, #0
 8002434:	697a      	ldr	r2, [r7, #20]
 8002436:	2103      	movs	r1, #3
 8002438:	400a      	ands	r2, r1
 800243a:	0092      	lsls	r2, r2, #2
 800243c:	4093      	lsls	r3, r2
 800243e:	693a      	ldr	r2, [r7, #16]
 8002440:	4313      	orrs	r3, r2
 8002442:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002444:	4935      	ldr	r1, [pc, #212]	; (800251c <HAL_GPIO_Init+0x2c0>)
 8002446:	697b      	ldr	r3, [r7, #20]
 8002448:	089b      	lsrs	r3, r3, #2
 800244a:	3302      	adds	r3, #2
 800244c:	009b      	lsls	r3, r3, #2
 800244e:	693a      	ldr	r2, [r7, #16]
 8002450:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002452:	4b35      	ldr	r3, [pc, #212]	; (8002528 <HAL_GPIO_Init+0x2cc>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	43da      	mvns	r2, r3
 800245c:	693b      	ldr	r3, [r7, #16]
 800245e:	4013      	ands	r3, r2
 8002460:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	685a      	ldr	r2, [r3, #4]
 8002466:	2380      	movs	r3, #128	; 0x80
 8002468:	025b      	lsls	r3, r3, #9
 800246a:	4013      	ands	r3, r2
 800246c:	d003      	beq.n	8002476 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 800246e:	693a      	ldr	r2, [r7, #16]
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	4313      	orrs	r3, r2
 8002474:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002476:	4b2c      	ldr	r3, [pc, #176]	; (8002528 <HAL_GPIO_Init+0x2cc>)
 8002478:	693a      	ldr	r2, [r7, #16]
 800247a:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 800247c:	4b2a      	ldr	r3, [pc, #168]	; (8002528 <HAL_GPIO_Init+0x2cc>)
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	43da      	mvns	r2, r3
 8002486:	693b      	ldr	r3, [r7, #16]
 8002488:	4013      	ands	r3, r2
 800248a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	685a      	ldr	r2, [r3, #4]
 8002490:	2380      	movs	r3, #128	; 0x80
 8002492:	029b      	lsls	r3, r3, #10
 8002494:	4013      	ands	r3, r2
 8002496:	d003      	beq.n	80024a0 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8002498:	693a      	ldr	r2, [r7, #16]
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	4313      	orrs	r3, r2
 800249e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80024a0:	4b21      	ldr	r3, [pc, #132]	; (8002528 <HAL_GPIO_Init+0x2cc>)
 80024a2:	693a      	ldr	r2, [r7, #16]
 80024a4:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80024a6:	4b20      	ldr	r3, [pc, #128]	; (8002528 <HAL_GPIO_Init+0x2cc>)
 80024a8:	689b      	ldr	r3, [r3, #8]
 80024aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	43da      	mvns	r2, r3
 80024b0:	693b      	ldr	r3, [r7, #16]
 80024b2:	4013      	ands	r3, r2
 80024b4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	685a      	ldr	r2, [r3, #4]
 80024ba:	2380      	movs	r3, #128	; 0x80
 80024bc:	035b      	lsls	r3, r3, #13
 80024be:	4013      	ands	r3, r2
 80024c0:	d003      	beq.n	80024ca <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 80024c2:	693a      	ldr	r2, [r7, #16]
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	4313      	orrs	r3, r2
 80024c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80024ca:	4b17      	ldr	r3, [pc, #92]	; (8002528 <HAL_GPIO_Init+0x2cc>)
 80024cc:	693a      	ldr	r2, [r7, #16]
 80024ce:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80024d0:	4b15      	ldr	r3, [pc, #84]	; (8002528 <HAL_GPIO_Init+0x2cc>)
 80024d2:	68db      	ldr	r3, [r3, #12]
 80024d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	43da      	mvns	r2, r3
 80024da:	693b      	ldr	r3, [r7, #16]
 80024dc:	4013      	ands	r3, r2
 80024de:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	685a      	ldr	r2, [r3, #4]
 80024e4:	2380      	movs	r3, #128	; 0x80
 80024e6:	039b      	lsls	r3, r3, #14
 80024e8:	4013      	ands	r3, r2
 80024ea:	d003      	beq.n	80024f4 <HAL_GPIO_Init+0x298>
        {
          temp |= iocurrent;
 80024ec:	693a      	ldr	r2, [r7, #16]
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	4313      	orrs	r3, r2
 80024f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80024f4:	4b0c      	ldr	r3, [pc, #48]	; (8002528 <HAL_GPIO_Init+0x2cc>)
 80024f6:	693a      	ldr	r2, [r7, #16]
 80024f8:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 80024fa:	697b      	ldr	r3, [r7, #20]
 80024fc:	3301      	adds	r3, #1
 80024fe:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	681a      	ldr	r2, [r3, #0]
 8002504:	697b      	ldr	r3, [r7, #20]
 8002506:	40da      	lsrs	r2, r3
 8002508:	1e13      	subs	r3, r2, #0
 800250a:	d000      	beq.n	800250e <HAL_GPIO_Init+0x2b2>
 800250c:	e6ae      	b.n	800226c <HAL_GPIO_Init+0x10>
  } 
}
 800250e:	46c0      	nop			; (mov r8, r8)
 8002510:	46c0      	nop			; (mov r8, r8)
 8002512:	46bd      	mov	sp, r7
 8002514:	b006      	add	sp, #24
 8002516:	bd80      	pop	{r7, pc}
 8002518:	40021000 	.word	0x40021000
 800251c:	40010000 	.word	0x40010000
 8002520:	48000400 	.word	0x48000400
 8002524:	48000800 	.word	0x48000800
 8002528:	40010400 	.word	0x40010400

0800252c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b082      	sub	sp, #8
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
 8002534:	0008      	movs	r0, r1
 8002536:	0011      	movs	r1, r2
 8002538:	1cbb      	adds	r3, r7, #2
 800253a:	1c02      	adds	r2, r0, #0
 800253c:	801a      	strh	r2, [r3, #0]
 800253e:	1c7b      	adds	r3, r7, #1
 8002540:	1c0a      	adds	r2, r1, #0
 8002542:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002544:	1c7b      	adds	r3, r7, #1
 8002546:	781b      	ldrb	r3, [r3, #0]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d004      	beq.n	8002556 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800254c:	1cbb      	adds	r3, r7, #2
 800254e:	881a      	ldrh	r2, [r3, #0]
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002554:	e003      	b.n	800255e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002556:	1cbb      	adds	r3, r7, #2
 8002558:	881a      	ldrh	r2, [r3, #0]
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800255e:	46c0      	nop			; (mov r8, r8)
 8002560:	46bd      	mov	sp, r7
 8002562:	b002      	add	sp, #8
 8002564:	bd80      	pop	{r7, pc}
	...

08002568 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b082      	sub	sp, #8
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d101      	bne.n	800257a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002576:	2301      	movs	r3, #1
 8002578:	e082      	b.n	8002680 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2241      	movs	r2, #65	; 0x41
 800257e:	5c9b      	ldrb	r3, [r3, r2]
 8002580:	b2db      	uxtb	r3, r3
 8002582:	2b00      	cmp	r3, #0
 8002584:	d107      	bne.n	8002596 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2240      	movs	r2, #64	; 0x40
 800258a:	2100      	movs	r1, #0
 800258c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	0018      	movs	r0, r3
 8002592:	f7fe f89f 	bl	80006d4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2241      	movs	r2, #65	; 0x41
 800259a:	2124      	movs	r1, #36	; 0x24
 800259c:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	681a      	ldr	r2, [r3, #0]
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	2101      	movs	r1, #1
 80025aa:	438a      	bics	r2, r1
 80025ac:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	685a      	ldr	r2, [r3, #4]
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4934      	ldr	r1, [pc, #208]	; (8002688 <HAL_I2C_Init+0x120>)
 80025b8:	400a      	ands	r2, r1
 80025ba:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	689a      	ldr	r2, [r3, #8]
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4931      	ldr	r1, [pc, #196]	; (800268c <HAL_I2C_Init+0x124>)
 80025c8:	400a      	ands	r2, r1
 80025ca:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	68db      	ldr	r3, [r3, #12]
 80025d0:	2b01      	cmp	r3, #1
 80025d2:	d108      	bne.n	80025e6 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	689a      	ldr	r2, [r3, #8]
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	2180      	movs	r1, #128	; 0x80
 80025de:	0209      	lsls	r1, r1, #8
 80025e0:	430a      	orrs	r2, r1
 80025e2:	609a      	str	r2, [r3, #8]
 80025e4:	e007      	b.n	80025f6 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	689a      	ldr	r2, [r3, #8]
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	2184      	movs	r1, #132	; 0x84
 80025f0:	0209      	lsls	r1, r1, #8
 80025f2:	430a      	orrs	r2, r1
 80025f4:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	68db      	ldr	r3, [r3, #12]
 80025fa:	2b02      	cmp	r3, #2
 80025fc:	d104      	bne.n	8002608 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	2280      	movs	r2, #128	; 0x80
 8002604:	0112      	lsls	r2, r2, #4
 8002606:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	685a      	ldr	r2, [r3, #4]
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	491f      	ldr	r1, [pc, #124]	; (8002690 <HAL_I2C_Init+0x128>)
 8002614:	430a      	orrs	r2, r1
 8002616:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	68da      	ldr	r2, [r3, #12]
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	491a      	ldr	r1, [pc, #104]	; (800268c <HAL_I2C_Init+0x124>)
 8002624:	400a      	ands	r2, r1
 8002626:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	691a      	ldr	r2, [r3, #16]
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	695b      	ldr	r3, [r3, #20]
 8002630:	431a      	orrs	r2, r3
 8002632:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	699b      	ldr	r3, [r3, #24]
 8002638:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	430a      	orrs	r2, r1
 8002640:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	69d9      	ldr	r1, [r3, #28]
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6a1a      	ldr	r2, [r3, #32]
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	430a      	orrs	r2, r1
 8002650:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	681a      	ldr	r2, [r3, #0]
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	2101      	movs	r1, #1
 800265e:	430a      	orrs	r2, r1
 8002660:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2200      	movs	r2, #0
 8002666:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2241      	movs	r2, #65	; 0x41
 800266c:	2120      	movs	r1, #32
 800266e:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2200      	movs	r2, #0
 8002674:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2242      	movs	r2, #66	; 0x42
 800267a:	2100      	movs	r1, #0
 800267c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800267e:	2300      	movs	r3, #0
}
 8002680:	0018      	movs	r0, r3
 8002682:	46bd      	mov	sp, r7
 8002684:	b002      	add	sp, #8
 8002686:	bd80      	pop	{r7, pc}
 8002688:	f0ffffff 	.word	0xf0ffffff
 800268c:	ffff7fff 	.word	0xffff7fff
 8002690:	02008000 	.word	0x02008000

08002694 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002694:	b590      	push	{r4, r7, lr}
 8002696:	b089      	sub	sp, #36	; 0x24
 8002698:	af02      	add	r7, sp, #8
 800269a:	60f8      	str	r0, [r7, #12]
 800269c:	000c      	movs	r4, r1
 800269e:	0010      	movs	r0, r2
 80026a0:	0019      	movs	r1, r3
 80026a2:	230a      	movs	r3, #10
 80026a4:	18fb      	adds	r3, r7, r3
 80026a6:	1c22      	adds	r2, r4, #0
 80026a8:	801a      	strh	r2, [r3, #0]
 80026aa:	2308      	movs	r3, #8
 80026ac:	18fb      	adds	r3, r7, r3
 80026ae:	1c02      	adds	r2, r0, #0
 80026b0:	801a      	strh	r2, [r3, #0]
 80026b2:	1dbb      	adds	r3, r7, #6
 80026b4:	1c0a      	adds	r2, r1, #0
 80026b6:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	2241      	movs	r2, #65	; 0x41
 80026bc:	5c9b      	ldrb	r3, [r3, r2]
 80026be:	b2db      	uxtb	r3, r3
 80026c0:	2b20      	cmp	r3, #32
 80026c2:	d000      	beq.n	80026c6 <HAL_I2C_Mem_Write+0x32>
 80026c4:	e10c      	b.n	80028e0 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 80026c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d004      	beq.n	80026d6 <HAL_I2C_Mem_Write+0x42>
 80026cc:	232c      	movs	r3, #44	; 0x2c
 80026ce:	18fb      	adds	r3, r7, r3
 80026d0:	881b      	ldrh	r3, [r3, #0]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d105      	bne.n	80026e2 <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	2280      	movs	r2, #128	; 0x80
 80026da:	0092      	lsls	r2, r2, #2
 80026dc:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80026de:	2301      	movs	r3, #1
 80026e0:	e0ff      	b.n	80028e2 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	2240      	movs	r2, #64	; 0x40
 80026e6:	5c9b      	ldrb	r3, [r3, r2]
 80026e8:	2b01      	cmp	r3, #1
 80026ea:	d101      	bne.n	80026f0 <HAL_I2C_Mem_Write+0x5c>
 80026ec:	2302      	movs	r3, #2
 80026ee:	e0f8      	b.n	80028e2 <HAL_I2C_Mem_Write+0x24e>
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	2240      	movs	r2, #64	; 0x40
 80026f4:	2101      	movs	r1, #1
 80026f6:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80026f8:	f7ff f85c 	bl	80017b4 <HAL_GetTick>
 80026fc:	0003      	movs	r3, r0
 80026fe:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002700:	2380      	movs	r3, #128	; 0x80
 8002702:	0219      	lsls	r1, r3, #8
 8002704:	68f8      	ldr	r0, [r7, #12]
 8002706:	697b      	ldr	r3, [r7, #20]
 8002708:	9300      	str	r3, [sp, #0]
 800270a:	2319      	movs	r3, #25
 800270c:	2201      	movs	r2, #1
 800270e:	f000 fb0b 	bl	8002d28 <I2C_WaitOnFlagUntilTimeout>
 8002712:	1e03      	subs	r3, r0, #0
 8002714:	d001      	beq.n	800271a <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 8002716:	2301      	movs	r3, #1
 8002718:	e0e3      	b.n	80028e2 <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	2241      	movs	r2, #65	; 0x41
 800271e:	2121      	movs	r1, #33	; 0x21
 8002720:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	2242      	movs	r2, #66	; 0x42
 8002726:	2140      	movs	r1, #64	; 0x40
 8002728:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	2200      	movs	r2, #0
 800272e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002734:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	222c      	movs	r2, #44	; 0x2c
 800273a:	18ba      	adds	r2, r7, r2
 800273c:	8812      	ldrh	r2, [r2, #0]
 800273e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	2200      	movs	r2, #0
 8002744:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002746:	1dbb      	adds	r3, r7, #6
 8002748:	881c      	ldrh	r4, [r3, #0]
 800274a:	2308      	movs	r3, #8
 800274c:	18fb      	adds	r3, r7, r3
 800274e:	881a      	ldrh	r2, [r3, #0]
 8002750:	230a      	movs	r3, #10
 8002752:	18fb      	adds	r3, r7, r3
 8002754:	8819      	ldrh	r1, [r3, #0]
 8002756:	68f8      	ldr	r0, [r7, #12]
 8002758:	697b      	ldr	r3, [r7, #20]
 800275a:	9301      	str	r3, [sp, #4]
 800275c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800275e:	9300      	str	r3, [sp, #0]
 8002760:	0023      	movs	r3, r4
 8002762:	f000 f9f9 	bl	8002b58 <I2C_RequestMemoryWrite>
 8002766:	1e03      	subs	r3, r0, #0
 8002768:	d005      	beq.n	8002776 <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	2240      	movs	r2, #64	; 0x40
 800276e:	2100      	movs	r1, #0
 8002770:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8002772:	2301      	movs	r3, #1
 8002774:	e0b5      	b.n	80028e2 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800277a:	b29b      	uxth	r3, r3
 800277c:	2bff      	cmp	r3, #255	; 0xff
 800277e:	d911      	bls.n	80027a4 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	22ff      	movs	r2, #255	; 0xff
 8002784:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800278a:	b2da      	uxtb	r2, r3
 800278c:	2380      	movs	r3, #128	; 0x80
 800278e:	045c      	lsls	r4, r3, #17
 8002790:	230a      	movs	r3, #10
 8002792:	18fb      	adds	r3, r7, r3
 8002794:	8819      	ldrh	r1, [r3, #0]
 8002796:	68f8      	ldr	r0, [r7, #12]
 8002798:	2300      	movs	r3, #0
 800279a:	9300      	str	r3, [sp, #0]
 800279c:	0023      	movs	r3, r4
 800279e:	f000 fbf7 	bl	8002f90 <I2C_TransferConfig>
 80027a2:	e012      	b.n	80027ca <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027a8:	b29a      	uxth	r2, r3
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027b2:	b2da      	uxtb	r2, r3
 80027b4:	2380      	movs	r3, #128	; 0x80
 80027b6:	049c      	lsls	r4, r3, #18
 80027b8:	230a      	movs	r3, #10
 80027ba:	18fb      	adds	r3, r7, r3
 80027bc:	8819      	ldrh	r1, [r3, #0]
 80027be:	68f8      	ldr	r0, [r7, #12]
 80027c0:	2300      	movs	r3, #0
 80027c2:	9300      	str	r3, [sp, #0]
 80027c4:	0023      	movs	r3, r4
 80027c6:	f000 fbe3 	bl	8002f90 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80027ca:	697a      	ldr	r2, [r7, #20]
 80027cc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	0018      	movs	r0, r3
 80027d2:	f000 fae8 	bl	8002da6 <I2C_WaitOnTXISFlagUntilTimeout>
 80027d6:	1e03      	subs	r3, r0, #0
 80027d8:	d001      	beq.n	80027de <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 80027da:	2301      	movs	r3, #1
 80027dc:	e081      	b.n	80028e2 <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027e2:	781a      	ldrb	r2, [r3, #0]
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ee:	1c5a      	adds	r2, r3, #1
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027f8:	b29b      	uxth	r3, r3
 80027fa:	3b01      	subs	r3, #1
 80027fc:	b29a      	uxth	r2, r3
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002806:	3b01      	subs	r3, #1
 8002808:	b29a      	uxth	r2, r3
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002812:	b29b      	uxth	r3, r3
 8002814:	2b00      	cmp	r3, #0
 8002816:	d03a      	beq.n	800288e <HAL_I2C_Mem_Write+0x1fa>
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800281c:	2b00      	cmp	r3, #0
 800281e:	d136      	bne.n	800288e <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002820:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002822:	68f8      	ldr	r0, [r7, #12]
 8002824:	697b      	ldr	r3, [r7, #20]
 8002826:	9300      	str	r3, [sp, #0]
 8002828:	0013      	movs	r3, r2
 800282a:	2200      	movs	r2, #0
 800282c:	2180      	movs	r1, #128	; 0x80
 800282e:	f000 fa7b 	bl	8002d28 <I2C_WaitOnFlagUntilTimeout>
 8002832:	1e03      	subs	r3, r0, #0
 8002834:	d001      	beq.n	800283a <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 8002836:	2301      	movs	r3, #1
 8002838:	e053      	b.n	80028e2 <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800283e:	b29b      	uxth	r3, r3
 8002840:	2bff      	cmp	r3, #255	; 0xff
 8002842:	d911      	bls.n	8002868 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	22ff      	movs	r2, #255	; 0xff
 8002848:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800284e:	b2da      	uxtb	r2, r3
 8002850:	2380      	movs	r3, #128	; 0x80
 8002852:	045c      	lsls	r4, r3, #17
 8002854:	230a      	movs	r3, #10
 8002856:	18fb      	adds	r3, r7, r3
 8002858:	8819      	ldrh	r1, [r3, #0]
 800285a:	68f8      	ldr	r0, [r7, #12]
 800285c:	2300      	movs	r3, #0
 800285e:	9300      	str	r3, [sp, #0]
 8002860:	0023      	movs	r3, r4
 8002862:	f000 fb95 	bl	8002f90 <I2C_TransferConfig>
 8002866:	e012      	b.n	800288e <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800286c:	b29a      	uxth	r2, r3
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002876:	b2da      	uxtb	r2, r3
 8002878:	2380      	movs	r3, #128	; 0x80
 800287a:	049c      	lsls	r4, r3, #18
 800287c:	230a      	movs	r3, #10
 800287e:	18fb      	adds	r3, r7, r3
 8002880:	8819      	ldrh	r1, [r3, #0]
 8002882:	68f8      	ldr	r0, [r7, #12]
 8002884:	2300      	movs	r3, #0
 8002886:	9300      	str	r3, [sp, #0]
 8002888:	0023      	movs	r3, r4
 800288a:	f000 fb81 	bl	8002f90 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002892:	b29b      	uxth	r3, r3
 8002894:	2b00      	cmp	r3, #0
 8002896:	d198      	bne.n	80027ca <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002898:	697a      	ldr	r2, [r7, #20]
 800289a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	0018      	movs	r0, r3
 80028a0:	f000 fac0 	bl	8002e24 <I2C_WaitOnSTOPFlagUntilTimeout>
 80028a4:	1e03      	subs	r3, r0, #0
 80028a6:	d001      	beq.n	80028ac <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 80028a8:	2301      	movs	r3, #1
 80028aa:	e01a      	b.n	80028e2 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	2220      	movs	r2, #32
 80028b2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	685a      	ldr	r2, [r3, #4]
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	490b      	ldr	r1, [pc, #44]	; (80028ec <HAL_I2C_Mem_Write+0x258>)
 80028c0:	400a      	ands	r2, r1
 80028c2:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	2241      	movs	r2, #65	; 0x41
 80028c8:	2120      	movs	r1, #32
 80028ca:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	2242      	movs	r2, #66	; 0x42
 80028d0:	2100      	movs	r1, #0
 80028d2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	2240      	movs	r2, #64	; 0x40
 80028d8:	2100      	movs	r1, #0
 80028da:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80028dc:	2300      	movs	r3, #0
 80028de:	e000      	b.n	80028e2 <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 80028e0:	2302      	movs	r3, #2
  }
}
 80028e2:	0018      	movs	r0, r3
 80028e4:	46bd      	mov	sp, r7
 80028e6:	b007      	add	sp, #28
 80028e8:	bd90      	pop	{r4, r7, pc}
 80028ea:	46c0      	nop			; (mov r8, r8)
 80028ec:	fe00e800 	.word	0xfe00e800

080028f0 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80028f0:	b590      	push	{r4, r7, lr}
 80028f2:	b089      	sub	sp, #36	; 0x24
 80028f4:	af02      	add	r7, sp, #8
 80028f6:	60f8      	str	r0, [r7, #12]
 80028f8:	000c      	movs	r4, r1
 80028fa:	0010      	movs	r0, r2
 80028fc:	0019      	movs	r1, r3
 80028fe:	230a      	movs	r3, #10
 8002900:	18fb      	adds	r3, r7, r3
 8002902:	1c22      	adds	r2, r4, #0
 8002904:	801a      	strh	r2, [r3, #0]
 8002906:	2308      	movs	r3, #8
 8002908:	18fb      	adds	r3, r7, r3
 800290a:	1c02      	adds	r2, r0, #0
 800290c:	801a      	strh	r2, [r3, #0]
 800290e:	1dbb      	adds	r3, r7, #6
 8002910:	1c0a      	adds	r2, r1, #0
 8002912:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	2241      	movs	r2, #65	; 0x41
 8002918:	5c9b      	ldrb	r3, [r3, r2]
 800291a:	b2db      	uxtb	r3, r3
 800291c:	2b20      	cmp	r3, #32
 800291e:	d000      	beq.n	8002922 <HAL_I2C_Mem_Read+0x32>
 8002920:	e110      	b.n	8002b44 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 8002922:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002924:	2b00      	cmp	r3, #0
 8002926:	d004      	beq.n	8002932 <HAL_I2C_Mem_Read+0x42>
 8002928:	232c      	movs	r3, #44	; 0x2c
 800292a:	18fb      	adds	r3, r7, r3
 800292c:	881b      	ldrh	r3, [r3, #0]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d105      	bne.n	800293e <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	2280      	movs	r2, #128	; 0x80
 8002936:	0092      	lsls	r2, r2, #2
 8002938:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800293a:	2301      	movs	r3, #1
 800293c:	e103      	b.n	8002b46 <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	2240      	movs	r2, #64	; 0x40
 8002942:	5c9b      	ldrb	r3, [r3, r2]
 8002944:	2b01      	cmp	r3, #1
 8002946:	d101      	bne.n	800294c <HAL_I2C_Mem_Read+0x5c>
 8002948:	2302      	movs	r3, #2
 800294a:	e0fc      	b.n	8002b46 <HAL_I2C_Mem_Read+0x256>
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	2240      	movs	r2, #64	; 0x40
 8002950:	2101      	movs	r1, #1
 8002952:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002954:	f7fe ff2e 	bl	80017b4 <HAL_GetTick>
 8002958:	0003      	movs	r3, r0
 800295a:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800295c:	2380      	movs	r3, #128	; 0x80
 800295e:	0219      	lsls	r1, r3, #8
 8002960:	68f8      	ldr	r0, [r7, #12]
 8002962:	697b      	ldr	r3, [r7, #20]
 8002964:	9300      	str	r3, [sp, #0]
 8002966:	2319      	movs	r3, #25
 8002968:	2201      	movs	r2, #1
 800296a:	f000 f9dd 	bl	8002d28 <I2C_WaitOnFlagUntilTimeout>
 800296e:	1e03      	subs	r3, r0, #0
 8002970:	d001      	beq.n	8002976 <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 8002972:	2301      	movs	r3, #1
 8002974:	e0e7      	b.n	8002b46 <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	2241      	movs	r2, #65	; 0x41
 800297a:	2122      	movs	r1, #34	; 0x22
 800297c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	2242      	movs	r2, #66	; 0x42
 8002982:	2140      	movs	r1, #64	; 0x40
 8002984:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	2200      	movs	r2, #0
 800298a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002990:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	222c      	movs	r2, #44	; 0x2c
 8002996:	18ba      	adds	r2, r7, r2
 8002998:	8812      	ldrh	r2, [r2, #0]
 800299a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	2200      	movs	r2, #0
 80029a0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80029a2:	1dbb      	adds	r3, r7, #6
 80029a4:	881c      	ldrh	r4, [r3, #0]
 80029a6:	2308      	movs	r3, #8
 80029a8:	18fb      	adds	r3, r7, r3
 80029aa:	881a      	ldrh	r2, [r3, #0]
 80029ac:	230a      	movs	r3, #10
 80029ae:	18fb      	adds	r3, r7, r3
 80029b0:	8819      	ldrh	r1, [r3, #0]
 80029b2:	68f8      	ldr	r0, [r7, #12]
 80029b4:	697b      	ldr	r3, [r7, #20]
 80029b6:	9301      	str	r3, [sp, #4]
 80029b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029ba:	9300      	str	r3, [sp, #0]
 80029bc:	0023      	movs	r3, r4
 80029be:	f000 f92f 	bl	8002c20 <I2C_RequestMemoryRead>
 80029c2:	1e03      	subs	r3, r0, #0
 80029c4:	d005      	beq.n	80029d2 <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	2240      	movs	r2, #64	; 0x40
 80029ca:	2100      	movs	r1, #0
 80029cc:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 80029ce:	2301      	movs	r3, #1
 80029d0:	e0b9      	b.n	8002b46 <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029d6:	b29b      	uxth	r3, r3
 80029d8:	2bff      	cmp	r3, #255	; 0xff
 80029da:	d911      	bls.n	8002a00 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	22ff      	movs	r2, #255	; 0xff
 80029e0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029e6:	b2da      	uxtb	r2, r3
 80029e8:	2380      	movs	r3, #128	; 0x80
 80029ea:	045c      	lsls	r4, r3, #17
 80029ec:	230a      	movs	r3, #10
 80029ee:	18fb      	adds	r3, r7, r3
 80029f0:	8819      	ldrh	r1, [r3, #0]
 80029f2:	68f8      	ldr	r0, [r7, #12]
 80029f4:	4b56      	ldr	r3, [pc, #344]	; (8002b50 <HAL_I2C_Mem_Read+0x260>)
 80029f6:	9300      	str	r3, [sp, #0]
 80029f8:	0023      	movs	r3, r4
 80029fa:	f000 fac9 	bl	8002f90 <I2C_TransferConfig>
 80029fe:	e012      	b.n	8002a26 <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a04:	b29a      	uxth	r2, r3
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a0e:	b2da      	uxtb	r2, r3
 8002a10:	2380      	movs	r3, #128	; 0x80
 8002a12:	049c      	lsls	r4, r3, #18
 8002a14:	230a      	movs	r3, #10
 8002a16:	18fb      	adds	r3, r7, r3
 8002a18:	8819      	ldrh	r1, [r3, #0]
 8002a1a:	68f8      	ldr	r0, [r7, #12]
 8002a1c:	4b4c      	ldr	r3, [pc, #304]	; (8002b50 <HAL_I2C_Mem_Read+0x260>)
 8002a1e:	9300      	str	r3, [sp, #0]
 8002a20:	0023      	movs	r3, r4
 8002a22:	f000 fab5 	bl	8002f90 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002a26:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002a28:	68f8      	ldr	r0, [r7, #12]
 8002a2a:	697b      	ldr	r3, [r7, #20]
 8002a2c:	9300      	str	r3, [sp, #0]
 8002a2e:	0013      	movs	r3, r2
 8002a30:	2200      	movs	r2, #0
 8002a32:	2104      	movs	r1, #4
 8002a34:	f000 f978 	bl	8002d28 <I2C_WaitOnFlagUntilTimeout>
 8002a38:	1e03      	subs	r3, r0, #0
 8002a3a:	d001      	beq.n	8002a40 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	e082      	b.n	8002b46 <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a4a:	b2d2      	uxtb	r2, r2
 8002a4c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a52:	1c5a      	adds	r2, r3, #1
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a5c:	3b01      	subs	r3, #1
 8002a5e:	b29a      	uxth	r2, r3
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a68:	b29b      	uxth	r3, r3
 8002a6a:	3b01      	subs	r3, #1
 8002a6c:	b29a      	uxth	r2, r3
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a76:	b29b      	uxth	r3, r3
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d03a      	beq.n	8002af2 <HAL_I2C_Mem_Read+0x202>
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d136      	bne.n	8002af2 <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002a84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002a86:	68f8      	ldr	r0, [r7, #12]
 8002a88:	697b      	ldr	r3, [r7, #20]
 8002a8a:	9300      	str	r3, [sp, #0]
 8002a8c:	0013      	movs	r3, r2
 8002a8e:	2200      	movs	r2, #0
 8002a90:	2180      	movs	r1, #128	; 0x80
 8002a92:	f000 f949 	bl	8002d28 <I2C_WaitOnFlagUntilTimeout>
 8002a96:	1e03      	subs	r3, r0, #0
 8002a98:	d001      	beq.n	8002a9e <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	e053      	b.n	8002b46 <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002aa2:	b29b      	uxth	r3, r3
 8002aa4:	2bff      	cmp	r3, #255	; 0xff
 8002aa6:	d911      	bls.n	8002acc <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	22ff      	movs	r2, #255	; 0xff
 8002aac:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ab2:	b2da      	uxtb	r2, r3
 8002ab4:	2380      	movs	r3, #128	; 0x80
 8002ab6:	045c      	lsls	r4, r3, #17
 8002ab8:	230a      	movs	r3, #10
 8002aba:	18fb      	adds	r3, r7, r3
 8002abc:	8819      	ldrh	r1, [r3, #0]
 8002abe:	68f8      	ldr	r0, [r7, #12]
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	9300      	str	r3, [sp, #0]
 8002ac4:	0023      	movs	r3, r4
 8002ac6:	f000 fa63 	bl	8002f90 <I2C_TransferConfig>
 8002aca:	e012      	b.n	8002af2 <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ad0:	b29a      	uxth	r2, r3
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ada:	b2da      	uxtb	r2, r3
 8002adc:	2380      	movs	r3, #128	; 0x80
 8002ade:	049c      	lsls	r4, r3, #18
 8002ae0:	230a      	movs	r3, #10
 8002ae2:	18fb      	adds	r3, r7, r3
 8002ae4:	8819      	ldrh	r1, [r3, #0]
 8002ae6:	68f8      	ldr	r0, [r7, #12]
 8002ae8:	2300      	movs	r3, #0
 8002aea:	9300      	str	r3, [sp, #0]
 8002aec:	0023      	movs	r3, r4
 8002aee:	f000 fa4f 	bl	8002f90 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002af6:	b29b      	uxth	r3, r3
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d194      	bne.n	8002a26 <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002afc:	697a      	ldr	r2, [r7, #20]
 8002afe:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	0018      	movs	r0, r3
 8002b04:	f000 f98e 	bl	8002e24 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002b08:	1e03      	subs	r3, r0, #0
 8002b0a:	d001      	beq.n	8002b10 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	e01a      	b.n	8002b46 <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	2220      	movs	r2, #32
 8002b16:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	685a      	ldr	r2, [r3, #4]
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	490c      	ldr	r1, [pc, #48]	; (8002b54 <HAL_I2C_Mem_Read+0x264>)
 8002b24:	400a      	ands	r2, r1
 8002b26:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	2241      	movs	r2, #65	; 0x41
 8002b2c:	2120      	movs	r1, #32
 8002b2e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	2242      	movs	r2, #66	; 0x42
 8002b34:	2100      	movs	r1, #0
 8002b36:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	2240      	movs	r2, #64	; 0x40
 8002b3c:	2100      	movs	r1, #0
 8002b3e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002b40:	2300      	movs	r3, #0
 8002b42:	e000      	b.n	8002b46 <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 8002b44:	2302      	movs	r3, #2
  }
}
 8002b46:	0018      	movs	r0, r3
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	b007      	add	sp, #28
 8002b4c:	bd90      	pop	{r4, r7, pc}
 8002b4e:	46c0      	nop			; (mov r8, r8)
 8002b50:	80002400 	.word	0x80002400
 8002b54:	fe00e800 	.word	0xfe00e800

08002b58 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002b58:	b5b0      	push	{r4, r5, r7, lr}
 8002b5a:	b086      	sub	sp, #24
 8002b5c:	af02      	add	r7, sp, #8
 8002b5e:	60f8      	str	r0, [r7, #12]
 8002b60:	000c      	movs	r4, r1
 8002b62:	0010      	movs	r0, r2
 8002b64:	0019      	movs	r1, r3
 8002b66:	250a      	movs	r5, #10
 8002b68:	197b      	adds	r3, r7, r5
 8002b6a:	1c22      	adds	r2, r4, #0
 8002b6c:	801a      	strh	r2, [r3, #0]
 8002b6e:	2308      	movs	r3, #8
 8002b70:	18fb      	adds	r3, r7, r3
 8002b72:	1c02      	adds	r2, r0, #0
 8002b74:	801a      	strh	r2, [r3, #0]
 8002b76:	1dbb      	adds	r3, r7, #6
 8002b78:	1c0a      	adds	r2, r1, #0
 8002b7a:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002b7c:	1dbb      	adds	r3, r7, #6
 8002b7e:	881b      	ldrh	r3, [r3, #0]
 8002b80:	b2da      	uxtb	r2, r3
 8002b82:	2380      	movs	r3, #128	; 0x80
 8002b84:	045c      	lsls	r4, r3, #17
 8002b86:	197b      	adds	r3, r7, r5
 8002b88:	8819      	ldrh	r1, [r3, #0]
 8002b8a:	68f8      	ldr	r0, [r7, #12]
 8002b8c:	4b23      	ldr	r3, [pc, #140]	; (8002c1c <I2C_RequestMemoryWrite+0xc4>)
 8002b8e:	9300      	str	r3, [sp, #0]
 8002b90:	0023      	movs	r3, r4
 8002b92:	f000 f9fd 	bl	8002f90 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b98:	6a39      	ldr	r1, [r7, #32]
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	0018      	movs	r0, r3
 8002b9e:	f000 f902 	bl	8002da6 <I2C_WaitOnTXISFlagUntilTimeout>
 8002ba2:	1e03      	subs	r3, r0, #0
 8002ba4:	d001      	beq.n	8002baa <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	e033      	b.n	8002c12 <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002baa:	1dbb      	adds	r3, r7, #6
 8002bac:	881b      	ldrh	r3, [r3, #0]
 8002bae:	2b01      	cmp	r3, #1
 8002bb0:	d107      	bne.n	8002bc2 <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002bb2:	2308      	movs	r3, #8
 8002bb4:	18fb      	adds	r3, r7, r3
 8002bb6:	881b      	ldrh	r3, [r3, #0]
 8002bb8:	b2da      	uxtb	r2, r3
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	629a      	str	r2, [r3, #40]	; 0x28
 8002bc0:	e019      	b.n	8002bf6 <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002bc2:	2308      	movs	r3, #8
 8002bc4:	18fb      	adds	r3, r7, r3
 8002bc6:	881b      	ldrh	r3, [r3, #0]
 8002bc8:	0a1b      	lsrs	r3, r3, #8
 8002bca:	b29b      	uxth	r3, r3
 8002bcc:	b2da      	uxtb	r2, r3
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002bd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bd6:	6a39      	ldr	r1, [r7, #32]
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	0018      	movs	r0, r3
 8002bdc:	f000 f8e3 	bl	8002da6 <I2C_WaitOnTXISFlagUntilTimeout>
 8002be0:	1e03      	subs	r3, r0, #0
 8002be2:	d001      	beq.n	8002be8 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 8002be4:	2301      	movs	r3, #1
 8002be6:	e014      	b.n	8002c12 <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002be8:	2308      	movs	r3, #8
 8002bea:	18fb      	adds	r3, r7, r3
 8002bec:	881b      	ldrh	r3, [r3, #0]
 8002bee:	b2da      	uxtb	r2, r3
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002bf6:	6a3a      	ldr	r2, [r7, #32]
 8002bf8:	68f8      	ldr	r0, [r7, #12]
 8002bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bfc:	9300      	str	r3, [sp, #0]
 8002bfe:	0013      	movs	r3, r2
 8002c00:	2200      	movs	r2, #0
 8002c02:	2180      	movs	r1, #128	; 0x80
 8002c04:	f000 f890 	bl	8002d28 <I2C_WaitOnFlagUntilTimeout>
 8002c08:	1e03      	subs	r3, r0, #0
 8002c0a:	d001      	beq.n	8002c10 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	e000      	b.n	8002c12 <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 8002c10:	2300      	movs	r3, #0
}
 8002c12:	0018      	movs	r0, r3
 8002c14:	46bd      	mov	sp, r7
 8002c16:	b004      	add	sp, #16
 8002c18:	bdb0      	pop	{r4, r5, r7, pc}
 8002c1a:	46c0      	nop			; (mov r8, r8)
 8002c1c:	80002000 	.word	0x80002000

08002c20 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002c20:	b5b0      	push	{r4, r5, r7, lr}
 8002c22:	b086      	sub	sp, #24
 8002c24:	af02      	add	r7, sp, #8
 8002c26:	60f8      	str	r0, [r7, #12]
 8002c28:	000c      	movs	r4, r1
 8002c2a:	0010      	movs	r0, r2
 8002c2c:	0019      	movs	r1, r3
 8002c2e:	250a      	movs	r5, #10
 8002c30:	197b      	adds	r3, r7, r5
 8002c32:	1c22      	adds	r2, r4, #0
 8002c34:	801a      	strh	r2, [r3, #0]
 8002c36:	2308      	movs	r3, #8
 8002c38:	18fb      	adds	r3, r7, r3
 8002c3a:	1c02      	adds	r2, r0, #0
 8002c3c:	801a      	strh	r2, [r3, #0]
 8002c3e:	1dbb      	adds	r3, r7, #6
 8002c40:	1c0a      	adds	r2, r1, #0
 8002c42:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002c44:	1dbb      	adds	r3, r7, #6
 8002c46:	881b      	ldrh	r3, [r3, #0]
 8002c48:	b2da      	uxtb	r2, r3
 8002c4a:	197b      	adds	r3, r7, r5
 8002c4c:	8819      	ldrh	r1, [r3, #0]
 8002c4e:	68f8      	ldr	r0, [r7, #12]
 8002c50:	4b23      	ldr	r3, [pc, #140]	; (8002ce0 <I2C_RequestMemoryRead+0xc0>)
 8002c52:	9300      	str	r3, [sp, #0]
 8002c54:	2300      	movs	r3, #0
 8002c56:	f000 f99b 	bl	8002f90 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c5c:	6a39      	ldr	r1, [r7, #32]
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	0018      	movs	r0, r3
 8002c62:	f000 f8a0 	bl	8002da6 <I2C_WaitOnTXISFlagUntilTimeout>
 8002c66:	1e03      	subs	r3, r0, #0
 8002c68:	d001      	beq.n	8002c6e <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	e033      	b.n	8002cd6 <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002c6e:	1dbb      	adds	r3, r7, #6
 8002c70:	881b      	ldrh	r3, [r3, #0]
 8002c72:	2b01      	cmp	r3, #1
 8002c74:	d107      	bne.n	8002c86 <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002c76:	2308      	movs	r3, #8
 8002c78:	18fb      	adds	r3, r7, r3
 8002c7a:	881b      	ldrh	r3, [r3, #0]
 8002c7c:	b2da      	uxtb	r2, r3
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	629a      	str	r2, [r3, #40]	; 0x28
 8002c84:	e019      	b.n	8002cba <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002c86:	2308      	movs	r3, #8
 8002c88:	18fb      	adds	r3, r7, r3
 8002c8a:	881b      	ldrh	r3, [r3, #0]
 8002c8c:	0a1b      	lsrs	r3, r3, #8
 8002c8e:	b29b      	uxth	r3, r3
 8002c90:	b2da      	uxtb	r2, r3
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c9a:	6a39      	ldr	r1, [r7, #32]
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	0018      	movs	r0, r3
 8002ca0:	f000 f881 	bl	8002da6 <I2C_WaitOnTXISFlagUntilTimeout>
 8002ca4:	1e03      	subs	r3, r0, #0
 8002ca6:	d001      	beq.n	8002cac <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 8002ca8:	2301      	movs	r3, #1
 8002caa:	e014      	b.n	8002cd6 <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002cac:	2308      	movs	r3, #8
 8002cae:	18fb      	adds	r3, r7, r3
 8002cb0:	881b      	ldrh	r3, [r3, #0]
 8002cb2:	b2da      	uxtb	r2, r3
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002cba:	6a3a      	ldr	r2, [r7, #32]
 8002cbc:	68f8      	ldr	r0, [r7, #12]
 8002cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cc0:	9300      	str	r3, [sp, #0]
 8002cc2:	0013      	movs	r3, r2
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	2140      	movs	r1, #64	; 0x40
 8002cc8:	f000 f82e 	bl	8002d28 <I2C_WaitOnFlagUntilTimeout>
 8002ccc:	1e03      	subs	r3, r0, #0
 8002cce:	d001      	beq.n	8002cd4 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 8002cd0:	2301      	movs	r3, #1
 8002cd2:	e000      	b.n	8002cd6 <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 8002cd4:	2300      	movs	r3, #0
}
 8002cd6:	0018      	movs	r0, r3
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	b004      	add	sp, #16
 8002cdc:	bdb0      	pop	{r4, r5, r7, pc}
 8002cde:	46c0      	nop			; (mov r8, r8)
 8002ce0:	80002000 	.word	0x80002000

08002ce4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b082      	sub	sp, #8
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	699b      	ldr	r3, [r3, #24]
 8002cf2:	2202      	movs	r2, #2
 8002cf4:	4013      	ands	r3, r2
 8002cf6:	2b02      	cmp	r3, #2
 8002cf8:	d103      	bne.n	8002d02 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	2200      	movs	r2, #0
 8002d00:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	699b      	ldr	r3, [r3, #24]
 8002d08:	2201      	movs	r2, #1
 8002d0a:	4013      	ands	r3, r2
 8002d0c:	2b01      	cmp	r3, #1
 8002d0e:	d007      	beq.n	8002d20 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	699a      	ldr	r2, [r3, #24]
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	2101      	movs	r1, #1
 8002d1c:	430a      	orrs	r2, r1
 8002d1e:	619a      	str	r2, [r3, #24]
  }
}
 8002d20:	46c0      	nop			; (mov r8, r8)
 8002d22:	46bd      	mov	sp, r7
 8002d24:	b002      	add	sp, #8
 8002d26:	bd80      	pop	{r7, pc}

08002d28 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b084      	sub	sp, #16
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	60f8      	str	r0, [r7, #12]
 8002d30:	60b9      	str	r1, [r7, #8]
 8002d32:	603b      	str	r3, [r7, #0]
 8002d34:	1dfb      	adds	r3, r7, #7
 8002d36:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002d38:	e021      	b.n	8002d7e <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	3301      	adds	r3, #1
 8002d3e:	d01e      	beq.n	8002d7e <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d40:	f7fe fd38 	bl	80017b4 <HAL_GetTick>
 8002d44:	0002      	movs	r2, r0
 8002d46:	69bb      	ldr	r3, [r7, #24]
 8002d48:	1ad3      	subs	r3, r2, r3
 8002d4a:	683a      	ldr	r2, [r7, #0]
 8002d4c:	429a      	cmp	r2, r3
 8002d4e:	d302      	bcc.n	8002d56 <I2C_WaitOnFlagUntilTimeout+0x2e>
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d113      	bne.n	8002d7e <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d5a:	2220      	movs	r2, #32
 8002d5c:	431a      	orrs	r2, r3
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	2241      	movs	r2, #65	; 0x41
 8002d66:	2120      	movs	r1, #32
 8002d68:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	2242      	movs	r2, #66	; 0x42
 8002d6e:	2100      	movs	r1, #0
 8002d70:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	2240      	movs	r2, #64	; 0x40
 8002d76:	2100      	movs	r1, #0
 8002d78:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	e00f      	b.n	8002d9e <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	699b      	ldr	r3, [r3, #24]
 8002d84:	68ba      	ldr	r2, [r7, #8]
 8002d86:	4013      	ands	r3, r2
 8002d88:	68ba      	ldr	r2, [r7, #8]
 8002d8a:	1ad3      	subs	r3, r2, r3
 8002d8c:	425a      	negs	r2, r3
 8002d8e:	4153      	adcs	r3, r2
 8002d90:	b2db      	uxtb	r3, r3
 8002d92:	001a      	movs	r2, r3
 8002d94:	1dfb      	adds	r3, r7, #7
 8002d96:	781b      	ldrb	r3, [r3, #0]
 8002d98:	429a      	cmp	r2, r3
 8002d9a:	d0ce      	beq.n	8002d3a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002d9c:	2300      	movs	r3, #0
}
 8002d9e:	0018      	movs	r0, r3
 8002da0:	46bd      	mov	sp, r7
 8002da2:	b004      	add	sp, #16
 8002da4:	bd80      	pop	{r7, pc}

08002da6 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002da6:	b580      	push	{r7, lr}
 8002da8:	b084      	sub	sp, #16
 8002daa:	af00      	add	r7, sp, #0
 8002dac:	60f8      	str	r0, [r7, #12]
 8002dae:	60b9      	str	r1, [r7, #8]
 8002db0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002db2:	e02b      	b.n	8002e0c <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002db4:	687a      	ldr	r2, [r7, #4]
 8002db6:	68b9      	ldr	r1, [r7, #8]
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	0018      	movs	r0, r3
 8002dbc:	f000 f86e 	bl	8002e9c <I2C_IsAcknowledgeFailed>
 8002dc0:	1e03      	subs	r3, r0, #0
 8002dc2:	d001      	beq.n	8002dc8 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	e029      	b.n	8002e1c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002dc8:	68bb      	ldr	r3, [r7, #8]
 8002dca:	3301      	adds	r3, #1
 8002dcc:	d01e      	beq.n	8002e0c <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002dce:	f7fe fcf1 	bl	80017b4 <HAL_GetTick>
 8002dd2:	0002      	movs	r2, r0
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	1ad3      	subs	r3, r2, r3
 8002dd8:	68ba      	ldr	r2, [r7, #8]
 8002dda:	429a      	cmp	r2, r3
 8002ddc:	d302      	bcc.n	8002de4 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8002dde:	68bb      	ldr	r3, [r7, #8]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d113      	bne.n	8002e0c <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002de8:	2220      	movs	r2, #32
 8002dea:	431a      	orrs	r2, r3
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	2241      	movs	r2, #65	; 0x41
 8002df4:	2120      	movs	r1, #32
 8002df6:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	2242      	movs	r2, #66	; 0x42
 8002dfc:	2100      	movs	r1, #0
 8002dfe:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	2240      	movs	r2, #64	; 0x40
 8002e04:	2100      	movs	r1, #0
 8002e06:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8002e08:	2301      	movs	r3, #1
 8002e0a:	e007      	b.n	8002e1c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	699b      	ldr	r3, [r3, #24]
 8002e12:	2202      	movs	r2, #2
 8002e14:	4013      	ands	r3, r2
 8002e16:	2b02      	cmp	r3, #2
 8002e18:	d1cc      	bne.n	8002db4 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002e1a:	2300      	movs	r3, #0
}
 8002e1c:	0018      	movs	r0, r3
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	b004      	add	sp, #16
 8002e22:	bd80      	pop	{r7, pc}

08002e24 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b084      	sub	sp, #16
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	60f8      	str	r0, [r7, #12]
 8002e2c:	60b9      	str	r1, [r7, #8]
 8002e2e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002e30:	e028      	b.n	8002e84 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e32:	687a      	ldr	r2, [r7, #4]
 8002e34:	68b9      	ldr	r1, [r7, #8]
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	0018      	movs	r0, r3
 8002e3a:	f000 f82f 	bl	8002e9c <I2C_IsAcknowledgeFailed>
 8002e3e:	1e03      	subs	r3, r0, #0
 8002e40:	d001      	beq.n	8002e46 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002e42:	2301      	movs	r3, #1
 8002e44:	e026      	b.n	8002e94 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e46:	f7fe fcb5 	bl	80017b4 <HAL_GetTick>
 8002e4a:	0002      	movs	r2, r0
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	1ad3      	subs	r3, r2, r3
 8002e50:	68ba      	ldr	r2, [r7, #8]
 8002e52:	429a      	cmp	r2, r3
 8002e54:	d302      	bcc.n	8002e5c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002e56:	68bb      	ldr	r3, [r7, #8]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d113      	bne.n	8002e84 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e60:	2220      	movs	r2, #32
 8002e62:	431a      	orrs	r2, r3
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	2241      	movs	r2, #65	; 0x41
 8002e6c:	2120      	movs	r1, #32
 8002e6e:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	2242      	movs	r2, #66	; 0x42
 8002e74:	2100      	movs	r1, #0
 8002e76:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	2240      	movs	r2, #64	; 0x40
 8002e7c:	2100      	movs	r1, #0
 8002e7e:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8002e80:	2301      	movs	r3, #1
 8002e82:	e007      	b.n	8002e94 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	699b      	ldr	r3, [r3, #24]
 8002e8a:	2220      	movs	r2, #32
 8002e8c:	4013      	ands	r3, r2
 8002e8e:	2b20      	cmp	r3, #32
 8002e90:	d1cf      	bne.n	8002e32 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002e92:	2300      	movs	r3, #0
}
 8002e94:	0018      	movs	r0, r3
 8002e96:	46bd      	mov	sp, r7
 8002e98:	b004      	add	sp, #16
 8002e9a:	bd80      	pop	{r7, pc}

08002e9c <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b084      	sub	sp, #16
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	60f8      	str	r0, [r7, #12]
 8002ea4:	60b9      	str	r1, [r7, #8]
 8002ea6:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	699b      	ldr	r3, [r3, #24]
 8002eae:	2210      	movs	r2, #16
 8002eb0:	4013      	ands	r3, r2
 8002eb2:	2b10      	cmp	r3, #16
 8002eb4:	d164      	bne.n	8002f80 <I2C_IsAcknowledgeFailed+0xe4>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	685a      	ldr	r2, [r3, #4]
 8002ebc:	2380      	movs	r3, #128	; 0x80
 8002ebe:	049b      	lsls	r3, r3, #18
 8002ec0:	401a      	ands	r2, r3
 8002ec2:	2380      	movs	r3, #128	; 0x80
 8002ec4:	049b      	lsls	r3, r3, #18
 8002ec6:	429a      	cmp	r2, r3
 8002ec8:	d02b      	beq.n	8002f22 <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	685a      	ldr	r2, [r3, #4]
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	2180      	movs	r1, #128	; 0x80
 8002ed6:	01c9      	lsls	r1, r1, #7
 8002ed8:	430a      	orrs	r2, r1
 8002eda:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002edc:	e021      	b.n	8002f22 <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002ede:	68bb      	ldr	r3, [r7, #8]
 8002ee0:	3301      	adds	r3, #1
 8002ee2:	d01e      	beq.n	8002f22 <I2C_IsAcknowledgeFailed+0x86>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ee4:	f7fe fc66 	bl	80017b4 <HAL_GetTick>
 8002ee8:	0002      	movs	r2, r0
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	1ad3      	subs	r3, r2, r3
 8002eee:	68ba      	ldr	r2, [r7, #8]
 8002ef0:	429a      	cmp	r2, r3
 8002ef2:	d302      	bcc.n	8002efa <I2C_IsAcknowledgeFailed+0x5e>
 8002ef4:	68bb      	ldr	r3, [r7, #8]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d113      	bne.n	8002f22 <I2C_IsAcknowledgeFailed+0x86>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002efe:	2220      	movs	r2, #32
 8002f00:	431a      	orrs	r2, r3
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	2241      	movs	r2, #65	; 0x41
 8002f0a:	2120      	movs	r1, #32
 8002f0c:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	2242      	movs	r2, #66	; 0x42
 8002f12:	2100      	movs	r1, #0
 8002f14:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	2240      	movs	r2, #64	; 0x40
 8002f1a:	2100      	movs	r1, #0
 8002f1c:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8002f1e:	2301      	movs	r3, #1
 8002f20:	e02f      	b.n	8002f82 <I2C_IsAcknowledgeFailed+0xe6>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	699b      	ldr	r3, [r3, #24]
 8002f28:	2220      	movs	r2, #32
 8002f2a:	4013      	ands	r3, r2
 8002f2c:	2b20      	cmp	r3, #32
 8002f2e:	d1d6      	bne.n	8002ede <I2C_IsAcknowledgeFailed+0x42>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	2210      	movs	r2, #16
 8002f36:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	2220      	movs	r2, #32
 8002f3e:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	0018      	movs	r0, r3
 8002f44:	f7ff fece 	bl	8002ce4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	685a      	ldr	r2, [r3, #4]
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	490e      	ldr	r1, [pc, #56]	; (8002f8c <I2C_IsAcknowledgeFailed+0xf0>)
 8002f54:	400a      	ands	r2, r1
 8002f56:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f5c:	2204      	movs	r2, #4
 8002f5e:	431a      	orrs	r2, r3
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	2241      	movs	r2, #65	; 0x41
 8002f68:	2120      	movs	r1, #32
 8002f6a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	2242      	movs	r2, #66	; 0x42
 8002f70:	2100      	movs	r1, #0
 8002f72:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	2240      	movs	r2, #64	; 0x40
 8002f78:	2100      	movs	r1, #0
 8002f7a:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	e000      	b.n	8002f82 <I2C_IsAcknowledgeFailed+0xe6>
  }
  return HAL_OK;
 8002f80:	2300      	movs	r3, #0
}
 8002f82:	0018      	movs	r0, r3
 8002f84:	46bd      	mov	sp, r7
 8002f86:	b004      	add	sp, #16
 8002f88:	bd80      	pop	{r7, pc}
 8002f8a:	46c0      	nop			; (mov r8, r8)
 8002f8c:	fe00e800 	.word	0xfe00e800

08002f90 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002f90:	b590      	push	{r4, r7, lr}
 8002f92:	b085      	sub	sp, #20
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	60f8      	str	r0, [r7, #12]
 8002f98:	0008      	movs	r0, r1
 8002f9a:	0011      	movs	r1, r2
 8002f9c:	607b      	str	r3, [r7, #4]
 8002f9e:	240a      	movs	r4, #10
 8002fa0:	193b      	adds	r3, r7, r4
 8002fa2:	1c02      	adds	r2, r0, #0
 8002fa4:	801a      	strh	r2, [r3, #0]
 8002fa6:	2009      	movs	r0, #9
 8002fa8:	183b      	adds	r3, r7, r0
 8002faa:	1c0a      	adds	r2, r1, #0
 8002fac:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	685b      	ldr	r3, [r3, #4]
 8002fb4:	6a3a      	ldr	r2, [r7, #32]
 8002fb6:	0d51      	lsrs	r1, r2, #21
 8002fb8:	2280      	movs	r2, #128	; 0x80
 8002fba:	00d2      	lsls	r2, r2, #3
 8002fbc:	400a      	ands	r2, r1
 8002fbe:	490e      	ldr	r1, [pc, #56]	; (8002ff8 <I2C_TransferConfig+0x68>)
 8002fc0:	430a      	orrs	r2, r1
 8002fc2:	43d2      	mvns	r2, r2
 8002fc4:	401a      	ands	r2, r3
 8002fc6:	0011      	movs	r1, r2
 8002fc8:	193b      	adds	r3, r7, r4
 8002fca:	881b      	ldrh	r3, [r3, #0]
 8002fcc:	059b      	lsls	r3, r3, #22
 8002fce:	0d9a      	lsrs	r2, r3, #22
 8002fd0:	183b      	adds	r3, r7, r0
 8002fd2:	781b      	ldrb	r3, [r3, #0]
 8002fd4:	0418      	lsls	r0, r3, #16
 8002fd6:	23ff      	movs	r3, #255	; 0xff
 8002fd8:	041b      	lsls	r3, r3, #16
 8002fda:	4003      	ands	r3, r0
 8002fdc:	431a      	orrs	r2, r3
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	431a      	orrs	r2, r3
 8002fe2:	6a3b      	ldr	r3, [r7, #32]
 8002fe4:	431a      	orrs	r2, r3
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	430a      	orrs	r2, r1
 8002fec:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 8002fee:	46c0      	nop			; (mov r8, r8)
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	b005      	add	sp, #20
 8002ff4:	bd90      	pop	{r4, r7, pc}
 8002ff6:	46c0      	nop			; (mov r8, r8)
 8002ff8:	03ff63ff 	.word	0x03ff63ff

08002ffc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b082      	sub	sp, #8
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
 8003004:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2241      	movs	r2, #65	; 0x41
 800300a:	5c9b      	ldrb	r3, [r3, r2]
 800300c:	b2db      	uxtb	r3, r3
 800300e:	2b20      	cmp	r3, #32
 8003010:	d138      	bne.n	8003084 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2240      	movs	r2, #64	; 0x40
 8003016:	5c9b      	ldrb	r3, [r3, r2]
 8003018:	2b01      	cmp	r3, #1
 800301a:	d101      	bne.n	8003020 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800301c:	2302      	movs	r3, #2
 800301e:	e032      	b.n	8003086 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2240      	movs	r2, #64	; 0x40
 8003024:	2101      	movs	r1, #1
 8003026:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2241      	movs	r2, #65	; 0x41
 800302c:	2124      	movs	r1, #36	; 0x24
 800302e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	681a      	ldr	r2, [r3, #0]
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	2101      	movs	r1, #1
 800303c:	438a      	bics	r2, r1
 800303e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	681a      	ldr	r2, [r3, #0]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4911      	ldr	r1, [pc, #68]	; (8003090 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 800304c:	400a      	ands	r2, r1
 800304e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	6819      	ldr	r1, [r3, #0]
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	683a      	ldr	r2, [r7, #0]
 800305c:	430a      	orrs	r2, r1
 800305e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	681a      	ldr	r2, [r3, #0]
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	2101      	movs	r1, #1
 800306c:	430a      	orrs	r2, r1
 800306e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2241      	movs	r2, #65	; 0x41
 8003074:	2120      	movs	r1, #32
 8003076:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2240      	movs	r2, #64	; 0x40
 800307c:	2100      	movs	r1, #0
 800307e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003080:	2300      	movs	r3, #0
 8003082:	e000      	b.n	8003086 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003084:	2302      	movs	r3, #2
  }
}
 8003086:	0018      	movs	r0, r3
 8003088:	46bd      	mov	sp, r7
 800308a:	b002      	add	sp, #8
 800308c:	bd80      	pop	{r7, pc}
 800308e:	46c0      	nop			; (mov r8, r8)
 8003090:	ffffefff 	.word	0xffffefff

08003094 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b084      	sub	sp, #16
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
 800309c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	2241      	movs	r2, #65	; 0x41
 80030a2:	5c9b      	ldrb	r3, [r3, r2]
 80030a4:	b2db      	uxtb	r3, r3
 80030a6:	2b20      	cmp	r3, #32
 80030a8:	d139      	bne.n	800311e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2240      	movs	r2, #64	; 0x40
 80030ae:	5c9b      	ldrb	r3, [r3, r2]
 80030b0:	2b01      	cmp	r3, #1
 80030b2:	d101      	bne.n	80030b8 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80030b4:	2302      	movs	r3, #2
 80030b6:	e033      	b.n	8003120 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2240      	movs	r2, #64	; 0x40
 80030bc:	2101      	movs	r1, #1
 80030be:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2241      	movs	r2, #65	; 0x41
 80030c4:	2124      	movs	r1, #36	; 0x24
 80030c6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	681a      	ldr	r2, [r3, #0]
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	2101      	movs	r1, #1
 80030d4:	438a      	bics	r2, r1
 80030d6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	4a11      	ldr	r2, [pc, #68]	; (8003128 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80030e4:	4013      	ands	r3, r2
 80030e6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	021b      	lsls	r3, r3, #8
 80030ec:	68fa      	ldr	r2, [r7, #12]
 80030ee:	4313      	orrs	r3, r2
 80030f0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	68fa      	ldr	r2, [r7, #12]
 80030f8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	681a      	ldr	r2, [r3, #0]
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	2101      	movs	r1, #1
 8003106:	430a      	orrs	r2, r1
 8003108:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2241      	movs	r2, #65	; 0x41
 800310e:	2120      	movs	r1, #32
 8003110:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2240      	movs	r2, #64	; 0x40
 8003116:	2100      	movs	r1, #0
 8003118:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800311a:	2300      	movs	r3, #0
 800311c:	e000      	b.n	8003120 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800311e:	2302      	movs	r3, #2
  }
}
 8003120:	0018      	movs	r0, r3
 8003122:	46bd      	mov	sp, r7
 8003124:	b004      	add	sp, #16
 8003126:	bd80      	pop	{r7, pc}
 8003128:	fffff0ff 	.word	0xfffff0ff

0800312c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b088      	sub	sp, #32
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d102      	bne.n	8003140 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800313a:	2301      	movs	r3, #1
 800313c:	f000 fb76 	bl	800382c <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	2201      	movs	r2, #1
 8003146:	4013      	ands	r3, r2
 8003148:	d100      	bne.n	800314c <HAL_RCC_OscConfig+0x20>
 800314a:	e08e      	b.n	800326a <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800314c:	4bc5      	ldr	r3, [pc, #788]	; (8003464 <HAL_RCC_OscConfig+0x338>)
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	220c      	movs	r2, #12
 8003152:	4013      	ands	r3, r2
 8003154:	2b04      	cmp	r3, #4
 8003156:	d00e      	beq.n	8003176 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003158:	4bc2      	ldr	r3, [pc, #776]	; (8003464 <HAL_RCC_OscConfig+0x338>)
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	220c      	movs	r2, #12
 800315e:	4013      	ands	r3, r2
 8003160:	2b08      	cmp	r3, #8
 8003162:	d117      	bne.n	8003194 <HAL_RCC_OscConfig+0x68>
 8003164:	4bbf      	ldr	r3, [pc, #764]	; (8003464 <HAL_RCC_OscConfig+0x338>)
 8003166:	685a      	ldr	r2, [r3, #4]
 8003168:	23c0      	movs	r3, #192	; 0xc0
 800316a:	025b      	lsls	r3, r3, #9
 800316c:	401a      	ands	r2, r3
 800316e:	2380      	movs	r3, #128	; 0x80
 8003170:	025b      	lsls	r3, r3, #9
 8003172:	429a      	cmp	r2, r3
 8003174:	d10e      	bne.n	8003194 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003176:	4bbb      	ldr	r3, [pc, #748]	; (8003464 <HAL_RCC_OscConfig+0x338>)
 8003178:	681a      	ldr	r2, [r3, #0]
 800317a:	2380      	movs	r3, #128	; 0x80
 800317c:	029b      	lsls	r3, r3, #10
 800317e:	4013      	ands	r3, r2
 8003180:	d100      	bne.n	8003184 <HAL_RCC_OscConfig+0x58>
 8003182:	e071      	b.n	8003268 <HAL_RCC_OscConfig+0x13c>
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	2b00      	cmp	r3, #0
 800318a:	d000      	beq.n	800318e <HAL_RCC_OscConfig+0x62>
 800318c:	e06c      	b.n	8003268 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 800318e:	2301      	movs	r3, #1
 8003190:	f000 fb4c 	bl	800382c <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	2b01      	cmp	r3, #1
 800319a:	d107      	bne.n	80031ac <HAL_RCC_OscConfig+0x80>
 800319c:	4bb1      	ldr	r3, [pc, #708]	; (8003464 <HAL_RCC_OscConfig+0x338>)
 800319e:	681a      	ldr	r2, [r3, #0]
 80031a0:	4bb0      	ldr	r3, [pc, #704]	; (8003464 <HAL_RCC_OscConfig+0x338>)
 80031a2:	2180      	movs	r1, #128	; 0x80
 80031a4:	0249      	lsls	r1, r1, #9
 80031a6:	430a      	orrs	r2, r1
 80031a8:	601a      	str	r2, [r3, #0]
 80031aa:	e02f      	b.n	800320c <HAL_RCC_OscConfig+0xe0>
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d10c      	bne.n	80031ce <HAL_RCC_OscConfig+0xa2>
 80031b4:	4bab      	ldr	r3, [pc, #684]	; (8003464 <HAL_RCC_OscConfig+0x338>)
 80031b6:	681a      	ldr	r2, [r3, #0]
 80031b8:	4baa      	ldr	r3, [pc, #680]	; (8003464 <HAL_RCC_OscConfig+0x338>)
 80031ba:	49ab      	ldr	r1, [pc, #684]	; (8003468 <HAL_RCC_OscConfig+0x33c>)
 80031bc:	400a      	ands	r2, r1
 80031be:	601a      	str	r2, [r3, #0]
 80031c0:	4ba8      	ldr	r3, [pc, #672]	; (8003464 <HAL_RCC_OscConfig+0x338>)
 80031c2:	681a      	ldr	r2, [r3, #0]
 80031c4:	4ba7      	ldr	r3, [pc, #668]	; (8003464 <HAL_RCC_OscConfig+0x338>)
 80031c6:	49a9      	ldr	r1, [pc, #676]	; (800346c <HAL_RCC_OscConfig+0x340>)
 80031c8:	400a      	ands	r2, r1
 80031ca:	601a      	str	r2, [r3, #0]
 80031cc:	e01e      	b.n	800320c <HAL_RCC_OscConfig+0xe0>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	2b05      	cmp	r3, #5
 80031d4:	d10e      	bne.n	80031f4 <HAL_RCC_OscConfig+0xc8>
 80031d6:	4ba3      	ldr	r3, [pc, #652]	; (8003464 <HAL_RCC_OscConfig+0x338>)
 80031d8:	681a      	ldr	r2, [r3, #0]
 80031da:	4ba2      	ldr	r3, [pc, #648]	; (8003464 <HAL_RCC_OscConfig+0x338>)
 80031dc:	2180      	movs	r1, #128	; 0x80
 80031de:	02c9      	lsls	r1, r1, #11
 80031e0:	430a      	orrs	r2, r1
 80031e2:	601a      	str	r2, [r3, #0]
 80031e4:	4b9f      	ldr	r3, [pc, #636]	; (8003464 <HAL_RCC_OscConfig+0x338>)
 80031e6:	681a      	ldr	r2, [r3, #0]
 80031e8:	4b9e      	ldr	r3, [pc, #632]	; (8003464 <HAL_RCC_OscConfig+0x338>)
 80031ea:	2180      	movs	r1, #128	; 0x80
 80031ec:	0249      	lsls	r1, r1, #9
 80031ee:	430a      	orrs	r2, r1
 80031f0:	601a      	str	r2, [r3, #0]
 80031f2:	e00b      	b.n	800320c <HAL_RCC_OscConfig+0xe0>
 80031f4:	4b9b      	ldr	r3, [pc, #620]	; (8003464 <HAL_RCC_OscConfig+0x338>)
 80031f6:	681a      	ldr	r2, [r3, #0]
 80031f8:	4b9a      	ldr	r3, [pc, #616]	; (8003464 <HAL_RCC_OscConfig+0x338>)
 80031fa:	499b      	ldr	r1, [pc, #620]	; (8003468 <HAL_RCC_OscConfig+0x33c>)
 80031fc:	400a      	ands	r2, r1
 80031fe:	601a      	str	r2, [r3, #0]
 8003200:	4b98      	ldr	r3, [pc, #608]	; (8003464 <HAL_RCC_OscConfig+0x338>)
 8003202:	681a      	ldr	r2, [r3, #0]
 8003204:	4b97      	ldr	r3, [pc, #604]	; (8003464 <HAL_RCC_OscConfig+0x338>)
 8003206:	4999      	ldr	r1, [pc, #612]	; (800346c <HAL_RCC_OscConfig+0x340>)
 8003208:	400a      	ands	r2, r1
 800320a:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	2b00      	cmp	r3, #0
 8003212:	d014      	beq.n	800323e <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003214:	f7fe face 	bl	80017b4 <HAL_GetTick>
 8003218:	0003      	movs	r3, r0
 800321a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800321c:	e008      	b.n	8003230 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800321e:	f7fe fac9 	bl	80017b4 <HAL_GetTick>
 8003222:	0002      	movs	r2, r0
 8003224:	69bb      	ldr	r3, [r7, #24]
 8003226:	1ad3      	subs	r3, r2, r3
 8003228:	2b64      	cmp	r3, #100	; 0x64
 800322a:	d901      	bls.n	8003230 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 800322c:	2303      	movs	r3, #3
 800322e:	e2fd      	b.n	800382c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003230:	4b8c      	ldr	r3, [pc, #560]	; (8003464 <HAL_RCC_OscConfig+0x338>)
 8003232:	681a      	ldr	r2, [r3, #0]
 8003234:	2380      	movs	r3, #128	; 0x80
 8003236:	029b      	lsls	r3, r3, #10
 8003238:	4013      	ands	r3, r2
 800323a:	d0f0      	beq.n	800321e <HAL_RCC_OscConfig+0xf2>
 800323c:	e015      	b.n	800326a <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800323e:	f7fe fab9 	bl	80017b4 <HAL_GetTick>
 8003242:	0003      	movs	r3, r0
 8003244:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003246:	e008      	b.n	800325a <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003248:	f7fe fab4 	bl	80017b4 <HAL_GetTick>
 800324c:	0002      	movs	r2, r0
 800324e:	69bb      	ldr	r3, [r7, #24]
 8003250:	1ad3      	subs	r3, r2, r3
 8003252:	2b64      	cmp	r3, #100	; 0x64
 8003254:	d901      	bls.n	800325a <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8003256:	2303      	movs	r3, #3
 8003258:	e2e8      	b.n	800382c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800325a:	4b82      	ldr	r3, [pc, #520]	; (8003464 <HAL_RCC_OscConfig+0x338>)
 800325c:	681a      	ldr	r2, [r3, #0]
 800325e:	2380      	movs	r3, #128	; 0x80
 8003260:	029b      	lsls	r3, r3, #10
 8003262:	4013      	ands	r3, r2
 8003264:	d1f0      	bne.n	8003248 <HAL_RCC_OscConfig+0x11c>
 8003266:	e000      	b.n	800326a <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003268:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	2202      	movs	r2, #2
 8003270:	4013      	ands	r3, r2
 8003272:	d100      	bne.n	8003276 <HAL_RCC_OscConfig+0x14a>
 8003274:	e06c      	b.n	8003350 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003276:	4b7b      	ldr	r3, [pc, #492]	; (8003464 <HAL_RCC_OscConfig+0x338>)
 8003278:	685b      	ldr	r3, [r3, #4]
 800327a:	220c      	movs	r2, #12
 800327c:	4013      	ands	r3, r2
 800327e:	d00e      	beq.n	800329e <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003280:	4b78      	ldr	r3, [pc, #480]	; (8003464 <HAL_RCC_OscConfig+0x338>)
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	220c      	movs	r2, #12
 8003286:	4013      	ands	r3, r2
 8003288:	2b08      	cmp	r3, #8
 800328a:	d11f      	bne.n	80032cc <HAL_RCC_OscConfig+0x1a0>
 800328c:	4b75      	ldr	r3, [pc, #468]	; (8003464 <HAL_RCC_OscConfig+0x338>)
 800328e:	685a      	ldr	r2, [r3, #4]
 8003290:	23c0      	movs	r3, #192	; 0xc0
 8003292:	025b      	lsls	r3, r3, #9
 8003294:	401a      	ands	r2, r3
 8003296:	2380      	movs	r3, #128	; 0x80
 8003298:	021b      	lsls	r3, r3, #8
 800329a:	429a      	cmp	r2, r3
 800329c:	d116      	bne.n	80032cc <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800329e:	4b71      	ldr	r3, [pc, #452]	; (8003464 <HAL_RCC_OscConfig+0x338>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	2202      	movs	r2, #2
 80032a4:	4013      	ands	r3, r2
 80032a6:	d005      	beq.n	80032b4 <HAL_RCC_OscConfig+0x188>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	68db      	ldr	r3, [r3, #12]
 80032ac:	2b01      	cmp	r3, #1
 80032ae:	d001      	beq.n	80032b4 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 80032b0:	2301      	movs	r3, #1
 80032b2:	e2bb      	b.n	800382c <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032b4:	4b6b      	ldr	r3, [pc, #428]	; (8003464 <HAL_RCC_OscConfig+0x338>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	22f8      	movs	r2, #248	; 0xf8
 80032ba:	4393      	bics	r3, r2
 80032bc:	0019      	movs	r1, r3
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	691b      	ldr	r3, [r3, #16]
 80032c2:	00da      	lsls	r2, r3, #3
 80032c4:	4b67      	ldr	r3, [pc, #412]	; (8003464 <HAL_RCC_OscConfig+0x338>)
 80032c6:	430a      	orrs	r2, r1
 80032c8:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032ca:	e041      	b.n	8003350 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	68db      	ldr	r3, [r3, #12]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d024      	beq.n	800331e <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80032d4:	4b63      	ldr	r3, [pc, #396]	; (8003464 <HAL_RCC_OscConfig+0x338>)
 80032d6:	681a      	ldr	r2, [r3, #0]
 80032d8:	4b62      	ldr	r3, [pc, #392]	; (8003464 <HAL_RCC_OscConfig+0x338>)
 80032da:	2101      	movs	r1, #1
 80032dc:	430a      	orrs	r2, r1
 80032de:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032e0:	f7fe fa68 	bl	80017b4 <HAL_GetTick>
 80032e4:	0003      	movs	r3, r0
 80032e6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032e8:	e008      	b.n	80032fc <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80032ea:	f7fe fa63 	bl	80017b4 <HAL_GetTick>
 80032ee:	0002      	movs	r2, r0
 80032f0:	69bb      	ldr	r3, [r7, #24]
 80032f2:	1ad3      	subs	r3, r2, r3
 80032f4:	2b02      	cmp	r3, #2
 80032f6:	d901      	bls.n	80032fc <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80032f8:	2303      	movs	r3, #3
 80032fa:	e297      	b.n	800382c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032fc:	4b59      	ldr	r3, [pc, #356]	; (8003464 <HAL_RCC_OscConfig+0x338>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	2202      	movs	r2, #2
 8003302:	4013      	ands	r3, r2
 8003304:	d0f1      	beq.n	80032ea <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003306:	4b57      	ldr	r3, [pc, #348]	; (8003464 <HAL_RCC_OscConfig+0x338>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	22f8      	movs	r2, #248	; 0xf8
 800330c:	4393      	bics	r3, r2
 800330e:	0019      	movs	r1, r3
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	691b      	ldr	r3, [r3, #16]
 8003314:	00da      	lsls	r2, r3, #3
 8003316:	4b53      	ldr	r3, [pc, #332]	; (8003464 <HAL_RCC_OscConfig+0x338>)
 8003318:	430a      	orrs	r2, r1
 800331a:	601a      	str	r2, [r3, #0]
 800331c:	e018      	b.n	8003350 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800331e:	4b51      	ldr	r3, [pc, #324]	; (8003464 <HAL_RCC_OscConfig+0x338>)
 8003320:	681a      	ldr	r2, [r3, #0]
 8003322:	4b50      	ldr	r3, [pc, #320]	; (8003464 <HAL_RCC_OscConfig+0x338>)
 8003324:	2101      	movs	r1, #1
 8003326:	438a      	bics	r2, r1
 8003328:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800332a:	f7fe fa43 	bl	80017b4 <HAL_GetTick>
 800332e:	0003      	movs	r3, r0
 8003330:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003332:	e008      	b.n	8003346 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003334:	f7fe fa3e 	bl	80017b4 <HAL_GetTick>
 8003338:	0002      	movs	r2, r0
 800333a:	69bb      	ldr	r3, [r7, #24]
 800333c:	1ad3      	subs	r3, r2, r3
 800333e:	2b02      	cmp	r3, #2
 8003340:	d901      	bls.n	8003346 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8003342:	2303      	movs	r3, #3
 8003344:	e272      	b.n	800382c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003346:	4b47      	ldr	r3, [pc, #284]	; (8003464 <HAL_RCC_OscConfig+0x338>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	2202      	movs	r2, #2
 800334c:	4013      	ands	r3, r2
 800334e:	d1f1      	bne.n	8003334 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	2208      	movs	r2, #8
 8003356:	4013      	ands	r3, r2
 8003358:	d036      	beq.n	80033c8 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	69db      	ldr	r3, [r3, #28]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d019      	beq.n	8003396 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003362:	4b40      	ldr	r3, [pc, #256]	; (8003464 <HAL_RCC_OscConfig+0x338>)
 8003364:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003366:	4b3f      	ldr	r3, [pc, #252]	; (8003464 <HAL_RCC_OscConfig+0x338>)
 8003368:	2101      	movs	r1, #1
 800336a:	430a      	orrs	r2, r1
 800336c:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800336e:	f7fe fa21 	bl	80017b4 <HAL_GetTick>
 8003372:	0003      	movs	r3, r0
 8003374:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003376:	e008      	b.n	800338a <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003378:	f7fe fa1c 	bl	80017b4 <HAL_GetTick>
 800337c:	0002      	movs	r2, r0
 800337e:	69bb      	ldr	r3, [r7, #24]
 8003380:	1ad3      	subs	r3, r2, r3
 8003382:	2b02      	cmp	r3, #2
 8003384:	d901      	bls.n	800338a <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8003386:	2303      	movs	r3, #3
 8003388:	e250      	b.n	800382c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800338a:	4b36      	ldr	r3, [pc, #216]	; (8003464 <HAL_RCC_OscConfig+0x338>)
 800338c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800338e:	2202      	movs	r2, #2
 8003390:	4013      	ands	r3, r2
 8003392:	d0f1      	beq.n	8003378 <HAL_RCC_OscConfig+0x24c>
 8003394:	e018      	b.n	80033c8 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003396:	4b33      	ldr	r3, [pc, #204]	; (8003464 <HAL_RCC_OscConfig+0x338>)
 8003398:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800339a:	4b32      	ldr	r3, [pc, #200]	; (8003464 <HAL_RCC_OscConfig+0x338>)
 800339c:	2101      	movs	r1, #1
 800339e:	438a      	bics	r2, r1
 80033a0:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033a2:	f7fe fa07 	bl	80017b4 <HAL_GetTick>
 80033a6:	0003      	movs	r3, r0
 80033a8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033aa:	e008      	b.n	80033be <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80033ac:	f7fe fa02 	bl	80017b4 <HAL_GetTick>
 80033b0:	0002      	movs	r2, r0
 80033b2:	69bb      	ldr	r3, [r7, #24]
 80033b4:	1ad3      	subs	r3, r2, r3
 80033b6:	2b02      	cmp	r3, #2
 80033b8:	d901      	bls.n	80033be <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 80033ba:	2303      	movs	r3, #3
 80033bc:	e236      	b.n	800382c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033be:	4b29      	ldr	r3, [pc, #164]	; (8003464 <HAL_RCC_OscConfig+0x338>)
 80033c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033c2:	2202      	movs	r2, #2
 80033c4:	4013      	ands	r3, r2
 80033c6:	d1f1      	bne.n	80033ac <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	2204      	movs	r2, #4
 80033ce:	4013      	ands	r3, r2
 80033d0:	d100      	bne.n	80033d4 <HAL_RCC_OscConfig+0x2a8>
 80033d2:	e0b5      	b.n	8003540 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033d4:	201f      	movs	r0, #31
 80033d6:	183b      	adds	r3, r7, r0
 80033d8:	2200      	movs	r2, #0
 80033da:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80033dc:	4b21      	ldr	r3, [pc, #132]	; (8003464 <HAL_RCC_OscConfig+0x338>)
 80033de:	69da      	ldr	r2, [r3, #28]
 80033e0:	2380      	movs	r3, #128	; 0x80
 80033e2:	055b      	lsls	r3, r3, #21
 80033e4:	4013      	ands	r3, r2
 80033e6:	d110      	bne.n	800340a <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033e8:	4b1e      	ldr	r3, [pc, #120]	; (8003464 <HAL_RCC_OscConfig+0x338>)
 80033ea:	69da      	ldr	r2, [r3, #28]
 80033ec:	4b1d      	ldr	r3, [pc, #116]	; (8003464 <HAL_RCC_OscConfig+0x338>)
 80033ee:	2180      	movs	r1, #128	; 0x80
 80033f0:	0549      	lsls	r1, r1, #21
 80033f2:	430a      	orrs	r2, r1
 80033f4:	61da      	str	r2, [r3, #28]
 80033f6:	4b1b      	ldr	r3, [pc, #108]	; (8003464 <HAL_RCC_OscConfig+0x338>)
 80033f8:	69da      	ldr	r2, [r3, #28]
 80033fa:	2380      	movs	r3, #128	; 0x80
 80033fc:	055b      	lsls	r3, r3, #21
 80033fe:	4013      	ands	r3, r2
 8003400:	60fb      	str	r3, [r7, #12]
 8003402:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003404:	183b      	adds	r3, r7, r0
 8003406:	2201      	movs	r2, #1
 8003408:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800340a:	4b19      	ldr	r3, [pc, #100]	; (8003470 <HAL_RCC_OscConfig+0x344>)
 800340c:	681a      	ldr	r2, [r3, #0]
 800340e:	2380      	movs	r3, #128	; 0x80
 8003410:	005b      	lsls	r3, r3, #1
 8003412:	4013      	ands	r3, r2
 8003414:	d11a      	bne.n	800344c <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003416:	4b16      	ldr	r3, [pc, #88]	; (8003470 <HAL_RCC_OscConfig+0x344>)
 8003418:	681a      	ldr	r2, [r3, #0]
 800341a:	4b15      	ldr	r3, [pc, #84]	; (8003470 <HAL_RCC_OscConfig+0x344>)
 800341c:	2180      	movs	r1, #128	; 0x80
 800341e:	0049      	lsls	r1, r1, #1
 8003420:	430a      	orrs	r2, r1
 8003422:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003424:	f7fe f9c6 	bl	80017b4 <HAL_GetTick>
 8003428:	0003      	movs	r3, r0
 800342a:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800342c:	e008      	b.n	8003440 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800342e:	f7fe f9c1 	bl	80017b4 <HAL_GetTick>
 8003432:	0002      	movs	r2, r0
 8003434:	69bb      	ldr	r3, [r7, #24]
 8003436:	1ad3      	subs	r3, r2, r3
 8003438:	2b64      	cmp	r3, #100	; 0x64
 800343a:	d901      	bls.n	8003440 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 800343c:	2303      	movs	r3, #3
 800343e:	e1f5      	b.n	800382c <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003440:	4b0b      	ldr	r3, [pc, #44]	; (8003470 <HAL_RCC_OscConfig+0x344>)
 8003442:	681a      	ldr	r2, [r3, #0]
 8003444:	2380      	movs	r3, #128	; 0x80
 8003446:	005b      	lsls	r3, r3, #1
 8003448:	4013      	ands	r3, r2
 800344a:	d0f0      	beq.n	800342e <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	689b      	ldr	r3, [r3, #8]
 8003450:	2b01      	cmp	r3, #1
 8003452:	d10f      	bne.n	8003474 <HAL_RCC_OscConfig+0x348>
 8003454:	4b03      	ldr	r3, [pc, #12]	; (8003464 <HAL_RCC_OscConfig+0x338>)
 8003456:	6a1a      	ldr	r2, [r3, #32]
 8003458:	4b02      	ldr	r3, [pc, #8]	; (8003464 <HAL_RCC_OscConfig+0x338>)
 800345a:	2101      	movs	r1, #1
 800345c:	430a      	orrs	r2, r1
 800345e:	621a      	str	r2, [r3, #32]
 8003460:	e036      	b.n	80034d0 <HAL_RCC_OscConfig+0x3a4>
 8003462:	46c0      	nop			; (mov r8, r8)
 8003464:	40021000 	.word	0x40021000
 8003468:	fffeffff 	.word	0xfffeffff
 800346c:	fffbffff 	.word	0xfffbffff
 8003470:	40007000 	.word	0x40007000
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	689b      	ldr	r3, [r3, #8]
 8003478:	2b00      	cmp	r3, #0
 800347a:	d10c      	bne.n	8003496 <HAL_RCC_OscConfig+0x36a>
 800347c:	4bca      	ldr	r3, [pc, #808]	; (80037a8 <HAL_RCC_OscConfig+0x67c>)
 800347e:	6a1a      	ldr	r2, [r3, #32]
 8003480:	4bc9      	ldr	r3, [pc, #804]	; (80037a8 <HAL_RCC_OscConfig+0x67c>)
 8003482:	2101      	movs	r1, #1
 8003484:	438a      	bics	r2, r1
 8003486:	621a      	str	r2, [r3, #32]
 8003488:	4bc7      	ldr	r3, [pc, #796]	; (80037a8 <HAL_RCC_OscConfig+0x67c>)
 800348a:	6a1a      	ldr	r2, [r3, #32]
 800348c:	4bc6      	ldr	r3, [pc, #792]	; (80037a8 <HAL_RCC_OscConfig+0x67c>)
 800348e:	2104      	movs	r1, #4
 8003490:	438a      	bics	r2, r1
 8003492:	621a      	str	r2, [r3, #32]
 8003494:	e01c      	b.n	80034d0 <HAL_RCC_OscConfig+0x3a4>
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	689b      	ldr	r3, [r3, #8]
 800349a:	2b05      	cmp	r3, #5
 800349c:	d10c      	bne.n	80034b8 <HAL_RCC_OscConfig+0x38c>
 800349e:	4bc2      	ldr	r3, [pc, #776]	; (80037a8 <HAL_RCC_OscConfig+0x67c>)
 80034a0:	6a1a      	ldr	r2, [r3, #32]
 80034a2:	4bc1      	ldr	r3, [pc, #772]	; (80037a8 <HAL_RCC_OscConfig+0x67c>)
 80034a4:	2104      	movs	r1, #4
 80034a6:	430a      	orrs	r2, r1
 80034a8:	621a      	str	r2, [r3, #32]
 80034aa:	4bbf      	ldr	r3, [pc, #764]	; (80037a8 <HAL_RCC_OscConfig+0x67c>)
 80034ac:	6a1a      	ldr	r2, [r3, #32]
 80034ae:	4bbe      	ldr	r3, [pc, #760]	; (80037a8 <HAL_RCC_OscConfig+0x67c>)
 80034b0:	2101      	movs	r1, #1
 80034b2:	430a      	orrs	r2, r1
 80034b4:	621a      	str	r2, [r3, #32]
 80034b6:	e00b      	b.n	80034d0 <HAL_RCC_OscConfig+0x3a4>
 80034b8:	4bbb      	ldr	r3, [pc, #748]	; (80037a8 <HAL_RCC_OscConfig+0x67c>)
 80034ba:	6a1a      	ldr	r2, [r3, #32]
 80034bc:	4bba      	ldr	r3, [pc, #744]	; (80037a8 <HAL_RCC_OscConfig+0x67c>)
 80034be:	2101      	movs	r1, #1
 80034c0:	438a      	bics	r2, r1
 80034c2:	621a      	str	r2, [r3, #32]
 80034c4:	4bb8      	ldr	r3, [pc, #736]	; (80037a8 <HAL_RCC_OscConfig+0x67c>)
 80034c6:	6a1a      	ldr	r2, [r3, #32]
 80034c8:	4bb7      	ldr	r3, [pc, #732]	; (80037a8 <HAL_RCC_OscConfig+0x67c>)
 80034ca:	2104      	movs	r1, #4
 80034cc:	438a      	bics	r2, r1
 80034ce:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	689b      	ldr	r3, [r3, #8]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d014      	beq.n	8003502 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034d8:	f7fe f96c 	bl	80017b4 <HAL_GetTick>
 80034dc:	0003      	movs	r3, r0
 80034de:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034e0:	e009      	b.n	80034f6 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80034e2:	f7fe f967 	bl	80017b4 <HAL_GetTick>
 80034e6:	0002      	movs	r2, r0
 80034e8:	69bb      	ldr	r3, [r7, #24]
 80034ea:	1ad3      	subs	r3, r2, r3
 80034ec:	4aaf      	ldr	r2, [pc, #700]	; (80037ac <HAL_RCC_OscConfig+0x680>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d901      	bls.n	80034f6 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80034f2:	2303      	movs	r3, #3
 80034f4:	e19a      	b.n	800382c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034f6:	4bac      	ldr	r3, [pc, #688]	; (80037a8 <HAL_RCC_OscConfig+0x67c>)
 80034f8:	6a1b      	ldr	r3, [r3, #32]
 80034fa:	2202      	movs	r2, #2
 80034fc:	4013      	ands	r3, r2
 80034fe:	d0f0      	beq.n	80034e2 <HAL_RCC_OscConfig+0x3b6>
 8003500:	e013      	b.n	800352a <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003502:	f7fe f957 	bl	80017b4 <HAL_GetTick>
 8003506:	0003      	movs	r3, r0
 8003508:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800350a:	e009      	b.n	8003520 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800350c:	f7fe f952 	bl	80017b4 <HAL_GetTick>
 8003510:	0002      	movs	r2, r0
 8003512:	69bb      	ldr	r3, [r7, #24]
 8003514:	1ad3      	subs	r3, r2, r3
 8003516:	4aa5      	ldr	r2, [pc, #660]	; (80037ac <HAL_RCC_OscConfig+0x680>)
 8003518:	4293      	cmp	r3, r2
 800351a:	d901      	bls.n	8003520 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 800351c:	2303      	movs	r3, #3
 800351e:	e185      	b.n	800382c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003520:	4ba1      	ldr	r3, [pc, #644]	; (80037a8 <HAL_RCC_OscConfig+0x67c>)
 8003522:	6a1b      	ldr	r3, [r3, #32]
 8003524:	2202      	movs	r2, #2
 8003526:	4013      	ands	r3, r2
 8003528:	d1f0      	bne.n	800350c <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800352a:	231f      	movs	r3, #31
 800352c:	18fb      	adds	r3, r7, r3
 800352e:	781b      	ldrb	r3, [r3, #0]
 8003530:	2b01      	cmp	r3, #1
 8003532:	d105      	bne.n	8003540 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003534:	4b9c      	ldr	r3, [pc, #624]	; (80037a8 <HAL_RCC_OscConfig+0x67c>)
 8003536:	69da      	ldr	r2, [r3, #28]
 8003538:	4b9b      	ldr	r3, [pc, #620]	; (80037a8 <HAL_RCC_OscConfig+0x67c>)
 800353a:	499d      	ldr	r1, [pc, #628]	; (80037b0 <HAL_RCC_OscConfig+0x684>)
 800353c:	400a      	ands	r2, r1
 800353e:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	2210      	movs	r2, #16
 8003546:	4013      	ands	r3, r2
 8003548:	d063      	beq.n	8003612 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	695b      	ldr	r3, [r3, #20]
 800354e:	2b01      	cmp	r3, #1
 8003550:	d12a      	bne.n	80035a8 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003552:	4b95      	ldr	r3, [pc, #596]	; (80037a8 <HAL_RCC_OscConfig+0x67c>)
 8003554:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003556:	4b94      	ldr	r3, [pc, #592]	; (80037a8 <HAL_RCC_OscConfig+0x67c>)
 8003558:	2104      	movs	r1, #4
 800355a:	430a      	orrs	r2, r1
 800355c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800355e:	4b92      	ldr	r3, [pc, #584]	; (80037a8 <HAL_RCC_OscConfig+0x67c>)
 8003560:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003562:	4b91      	ldr	r3, [pc, #580]	; (80037a8 <HAL_RCC_OscConfig+0x67c>)
 8003564:	2101      	movs	r1, #1
 8003566:	430a      	orrs	r2, r1
 8003568:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800356a:	f7fe f923 	bl	80017b4 <HAL_GetTick>
 800356e:	0003      	movs	r3, r0
 8003570:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8003572:	e008      	b.n	8003586 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003574:	f7fe f91e 	bl	80017b4 <HAL_GetTick>
 8003578:	0002      	movs	r2, r0
 800357a:	69bb      	ldr	r3, [r7, #24]
 800357c:	1ad3      	subs	r3, r2, r3
 800357e:	2b02      	cmp	r3, #2
 8003580:	d901      	bls.n	8003586 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8003582:	2303      	movs	r3, #3
 8003584:	e152      	b.n	800382c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8003586:	4b88      	ldr	r3, [pc, #544]	; (80037a8 <HAL_RCC_OscConfig+0x67c>)
 8003588:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800358a:	2202      	movs	r2, #2
 800358c:	4013      	ands	r3, r2
 800358e:	d0f1      	beq.n	8003574 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003590:	4b85      	ldr	r3, [pc, #532]	; (80037a8 <HAL_RCC_OscConfig+0x67c>)
 8003592:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003594:	22f8      	movs	r2, #248	; 0xf8
 8003596:	4393      	bics	r3, r2
 8003598:	0019      	movs	r1, r3
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	699b      	ldr	r3, [r3, #24]
 800359e:	00da      	lsls	r2, r3, #3
 80035a0:	4b81      	ldr	r3, [pc, #516]	; (80037a8 <HAL_RCC_OscConfig+0x67c>)
 80035a2:	430a      	orrs	r2, r1
 80035a4:	635a      	str	r2, [r3, #52]	; 0x34
 80035a6:	e034      	b.n	8003612 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	695b      	ldr	r3, [r3, #20]
 80035ac:	3305      	adds	r3, #5
 80035ae:	d111      	bne.n	80035d4 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80035b0:	4b7d      	ldr	r3, [pc, #500]	; (80037a8 <HAL_RCC_OscConfig+0x67c>)
 80035b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80035b4:	4b7c      	ldr	r3, [pc, #496]	; (80037a8 <HAL_RCC_OscConfig+0x67c>)
 80035b6:	2104      	movs	r1, #4
 80035b8:	438a      	bics	r2, r1
 80035ba:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80035bc:	4b7a      	ldr	r3, [pc, #488]	; (80037a8 <HAL_RCC_OscConfig+0x67c>)
 80035be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035c0:	22f8      	movs	r2, #248	; 0xf8
 80035c2:	4393      	bics	r3, r2
 80035c4:	0019      	movs	r1, r3
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	699b      	ldr	r3, [r3, #24]
 80035ca:	00da      	lsls	r2, r3, #3
 80035cc:	4b76      	ldr	r3, [pc, #472]	; (80037a8 <HAL_RCC_OscConfig+0x67c>)
 80035ce:	430a      	orrs	r2, r1
 80035d0:	635a      	str	r2, [r3, #52]	; 0x34
 80035d2:	e01e      	b.n	8003612 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80035d4:	4b74      	ldr	r3, [pc, #464]	; (80037a8 <HAL_RCC_OscConfig+0x67c>)
 80035d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80035d8:	4b73      	ldr	r3, [pc, #460]	; (80037a8 <HAL_RCC_OscConfig+0x67c>)
 80035da:	2104      	movs	r1, #4
 80035dc:	430a      	orrs	r2, r1
 80035de:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80035e0:	4b71      	ldr	r3, [pc, #452]	; (80037a8 <HAL_RCC_OscConfig+0x67c>)
 80035e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80035e4:	4b70      	ldr	r3, [pc, #448]	; (80037a8 <HAL_RCC_OscConfig+0x67c>)
 80035e6:	2101      	movs	r1, #1
 80035e8:	438a      	bics	r2, r1
 80035ea:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035ec:	f7fe f8e2 	bl	80017b4 <HAL_GetTick>
 80035f0:	0003      	movs	r3, r0
 80035f2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80035f4:	e008      	b.n	8003608 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80035f6:	f7fe f8dd 	bl	80017b4 <HAL_GetTick>
 80035fa:	0002      	movs	r2, r0
 80035fc:	69bb      	ldr	r3, [r7, #24]
 80035fe:	1ad3      	subs	r3, r2, r3
 8003600:	2b02      	cmp	r3, #2
 8003602:	d901      	bls.n	8003608 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8003604:	2303      	movs	r3, #3
 8003606:	e111      	b.n	800382c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003608:	4b67      	ldr	r3, [pc, #412]	; (80037a8 <HAL_RCC_OscConfig+0x67c>)
 800360a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800360c:	2202      	movs	r2, #2
 800360e:	4013      	ands	r3, r2
 8003610:	d1f1      	bne.n	80035f6 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	2220      	movs	r2, #32
 8003618:	4013      	ands	r3, r2
 800361a:	d05c      	beq.n	80036d6 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 800361c:	4b62      	ldr	r3, [pc, #392]	; (80037a8 <HAL_RCC_OscConfig+0x67c>)
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	220c      	movs	r2, #12
 8003622:	4013      	ands	r3, r2
 8003624:	2b0c      	cmp	r3, #12
 8003626:	d00e      	beq.n	8003646 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8003628:	4b5f      	ldr	r3, [pc, #380]	; (80037a8 <HAL_RCC_OscConfig+0x67c>)
 800362a:	685b      	ldr	r3, [r3, #4]
 800362c:	220c      	movs	r2, #12
 800362e:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8003630:	2b08      	cmp	r3, #8
 8003632:	d114      	bne.n	800365e <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8003634:	4b5c      	ldr	r3, [pc, #368]	; (80037a8 <HAL_RCC_OscConfig+0x67c>)
 8003636:	685a      	ldr	r2, [r3, #4]
 8003638:	23c0      	movs	r3, #192	; 0xc0
 800363a:	025b      	lsls	r3, r3, #9
 800363c:	401a      	ands	r2, r3
 800363e:	23c0      	movs	r3, #192	; 0xc0
 8003640:	025b      	lsls	r3, r3, #9
 8003642:	429a      	cmp	r2, r3
 8003644:	d10b      	bne.n	800365e <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8003646:	4b58      	ldr	r3, [pc, #352]	; (80037a8 <HAL_RCC_OscConfig+0x67c>)
 8003648:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800364a:	2380      	movs	r3, #128	; 0x80
 800364c:	025b      	lsls	r3, r3, #9
 800364e:	4013      	ands	r3, r2
 8003650:	d040      	beq.n	80036d4 <HAL_RCC_OscConfig+0x5a8>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6a1b      	ldr	r3, [r3, #32]
 8003656:	2b01      	cmp	r3, #1
 8003658:	d03c      	beq.n	80036d4 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 800365a:	2301      	movs	r3, #1
 800365c:	e0e6      	b.n	800382c <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6a1b      	ldr	r3, [r3, #32]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d01b      	beq.n	800369e <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8003666:	4b50      	ldr	r3, [pc, #320]	; (80037a8 <HAL_RCC_OscConfig+0x67c>)
 8003668:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800366a:	4b4f      	ldr	r3, [pc, #316]	; (80037a8 <HAL_RCC_OscConfig+0x67c>)
 800366c:	2180      	movs	r1, #128	; 0x80
 800366e:	0249      	lsls	r1, r1, #9
 8003670:	430a      	orrs	r2, r1
 8003672:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003674:	f7fe f89e 	bl	80017b4 <HAL_GetTick>
 8003678:	0003      	movs	r3, r0
 800367a:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800367c:	e008      	b.n	8003690 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800367e:	f7fe f899 	bl	80017b4 <HAL_GetTick>
 8003682:	0002      	movs	r2, r0
 8003684:	69bb      	ldr	r3, [r7, #24]
 8003686:	1ad3      	subs	r3, r2, r3
 8003688:	2b02      	cmp	r3, #2
 800368a:	d901      	bls.n	8003690 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 800368c:	2303      	movs	r3, #3
 800368e:	e0cd      	b.n	800382c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8003690:	4b45      	ldr	r3, [pc, #276]	; (80037a8 <HAL_RCC_OscConfig+0x67c>)
 8003692:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003694:	2380      	movs	r3, #128	; 0x80
 8003696:	025b      	lsls	r3, r3, #9
 8003698:	4013      	ands	r3, r2
 800369a:	d0f0      	beq.n	800367e <HAL_RCC_OscConfig+0x552>
 800369c:	e01b      	b.n	80036d6 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800369e:	4b42      	ldr	r3, [pc, #264]	; (80037a8 <HAL_RCC_OscConfig+0x67c>)
 80036a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80036a2:	4b41      	ldr	r3, [pc, #260]	; (80037a8 <HAL_RCC_OscConfig+0x67c>)
 80036a4:	4943      	ldr	r1, [pc, #268]	; (80037b4 <HAL_RCC_OscConfig+0x688>)
 80036a6:	400a      	ands	r2, r1
 80036a8:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036aa:	f7fe f883 	bl	80017b4 <HAL_GetTick>
 80036ae:	0003      	movs	r3, r0
 80036b0:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80036b2:	e008      	b.n	80036c6 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80036b4:	f7fe f87e 	bl	80017b4 <HAL_GetTick>
 80036b8:	0002      	movs	r2, r0
 80036ba:	69bb      	ldr	r3, [r7, #24]
 80036bc:	1ad3      	subs	r3, r2, r3
 80036be:	2b02      	cmp	r3, #2
 80036c0:	d901      	bls.n	80036c6 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 80036c2:	2303      	movs	r3, #3
 80036c4:	e0b2      	b.n	800382c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80036c6:	4b38      	ldr	r3, [pc, #224]	; (80037a8 <HAL_RCC_OscConfig+0x67c>)
 80036c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80036ca:	2380      	movs	r3, #128	; 0x80
 80036cc:	025b      	lsls	r3, r3, #9
 80036ce:	4013      	ands	r3, r2
 80036d0:	d1f0      	bne.n	80036b4 <HAL_RCC_OscConfig+0x588>
 80036d2:	e000      	b.n	80036d6 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80036d4:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d100      	bne.n	80036e0 <HAL_RCC_OscConfig+0x5b4>
 80036de:	e0a4      	b.n	800382a <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80036e0:	4b31      	ldr	r3, [pc, #196]	; (80037a8 <HAL_RCC_OscConfig+0x67c>)
 80036e2:	685b      	ldr	r3, [r3, #4]
 80036e4:	220c      	movs	r2, #12
 80036e6:	4013      	ands	r3, r2
 80036e8:	2b08      	cmp	r3, #8
 80036ea:	d100      	bne.n	80036ee <HAL_RCC_OscConfig+0x5c2>
 80036ec:	e078      	b.n	80037e0 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036f2:	2b02      	cmp	r3, #2
 80036f4:	d14c      	bne.n	8003790 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036f6:	4b2c      	ldr	r3, [pc, #176]	; (80037a8 <HAL_RCC_OscConfig+0x67c>)
 80036f8:	681a      	ldr	r2, [r3, #0]
 80036fa:	4b2b      	ldr	r3, [pc, #172]	; (80037a8 <HAL_RCC_OscConfig+0x67c>)
 80036fc:	492e      	ldr	r1, [pc, #184]	; (80037b8 <HAL_RCC_OscConfig+0x68c>)
 80036fe:	400a      	ands	r2, r1
 8003700:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003702:	f7fe f857 	bl	80017b4 <HAL_GetTick>
 8003706:	0003      	movs	r3, r0
 8003708:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800370a:	e008      	b.n	800371e <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800370c:	f7fe f852 	bl	80017b4 <HAL_GetTick>
 8003710:	0002      	movs	r2, r0
 8003712:	69bb      	ldr	r3, [r7, #24]
 8003714:	1ad3      	subs	r3, r2, r3
 8003716:	2b02      	cmp	r3, #2
 8003718:	d901      	bls.n	800371e <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 800371a:	2303      	movs	r3, #3
 800371c:	e086      	b.n	800382c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800371e:	4b22      	ldr	r3, [pc, #136]	; (80037a8 <HAL_RCC_OscConfig+0x67c>)
 8003720:	681a      	ldr	r2, [r3, #0]
 8003722:	2380      	movs	r3, #128	; 0x80
 8003724:	049b      	lsls	r3, r3, #18
 8003726:	4013      	ands	r3, r2
 8003728:	d1f0      	bne.n	800370c <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800372a:	4b1f      	ldr	r3, [pc, #124]	; (80037a8 <HAL_RCC_OscConfig+0x67c>)
 800372c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800372e:	220f      	movs	r2, #15
 8003730:	4393      	bics	r3, r2
 8003732:	0019      	movs	r1, r3
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003738:	4b1b      	ldr	r3, [pc, #108]	; (80037a8 <HAL_RCC_OscConfig+0x67c>)
 800373a:	430a      	orrs	r2, r1
 800373c:	62da      	str	r2, [r3, #44]	; 0x2c
 800373e:	4b1a      	ldr	r3, [pc, #104]	; (80037a8 <HAL_RCC_OscConfig+0x67c>)
 8003740:	685b      	ldr	r3, [r3, #4]
 8003742:	4a1e      	ldr	r2, [pc, #120]	; (80037bc <HAL_RCC_OscConfig+0x690>)
 8003744:	4013      	ands	r3, r2
 8003746:	0019      	movs	r1, r3
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003750:	431a      	orrs	r2, r3
 8003752:	4b15      	ldr	r3, [pc, #84]	; (80037a8 <HAL_RCC_OscConfig+0x67c>)
 8003754:	430a      	orrs	r2, r1
 8003756:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003758:	4b13      	ldr	r3, [pc, #76]	; (80037a8 <HAL_RCC_OscConfig+0x67c>)
 800375a:	681a      	ldr	r2, [r3, #0]
 800375c:	4b12      	ldr	r3, [pc, #72]	; (80037a8 <HAL_RCC_OscConfig+0x67c>)
 800375e:	2180      	movs	r1, #128	; 0x80
 8003760:	0449      	lsls	r1, r1, #17
 8003762:	430a      	orrs	r2, r1
 8003764:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003766:	f7fe f825 	bl	80017b4 <HAL_GetTick>
 800376a:	0003      	movs	r3, r0
 800376c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800376e:	e008      	b.n	8003782 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003770:	f7fe f820 	bl	80017b4 <HAL_GetTick>
 8003774:	0002      	movs	r2, r0
 8003776:	69bb      	ldr	r3, [r7, #24]
 8003778:	1ad3      	subs	r3, r2, r3
 800377a:	2b02      	cmp	r3, #2
 800377c:	d901      	bls.n	8003782 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 800377e:	2303      	movs	r3, #3
 8003780:	e054      	b.n	800382c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003782:	4b09      	ldr	r3, [pc, #36]	; (80037a8 <HAL_RCC_OscConfig+0x67c>)
 8003784:	681a      	ldr	r2, [r3, #0]
 8003786:	2380      	movs	r3, #128	; 0x80
 8003788:	049b      	lsls	r3, r3, #18
 800378a:	4013      	ands	r3, r2
 800378c:	d0f0      	beq.n	8003770 <HAL_RCC_OscConfig+0x644>
 800378e:	e04c      	b.n	800382a <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003790:	4b05      	ldr	r3, [pc, #20]	; (80037a8 <HAL_RCC_OscConfig+0x67c>)
 8003792:	681a      	ldr	r2, [r3, #0]
 8003794:	4b04      	ldr	r3, [pc, #16]	; (80037a8 <HAL_RCC_OscConfig+0x67c>)
 8003796:	4908      	ldr	r1, [pc, #32]	; (80037b8 <HAL_RCC_OscConfig+0x68c>)
 8003798:	400a      	ands	r2, r1
 800379a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800379c:	f7fe f80a 	bl	80017b4 <HAL_GetTick>
 80037a0:	0003      	movs	r3, r0
 80037a2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80037a4:	e015      	b.n	80037d2 <HAL_RCC_OscConfig+0x6a6>
 80037a6:	46c0      	nop			; (mov r8, r8)
 80037a8:	40021000 	.word	0x40021000
 80037ac:	00001388 	.word	0x00001388
 80037b0:	efffffff 	.word	0xefffffff
 80037b4:	fffeffff 	.word	0xfffeffff
 80037b8:	feffffff 	.word	0xfeffffff
 80037bc:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037c0:	f7fd fff8 	bl	80017b4 <HAL_GetTick>
 80037c4:	0002      	movs	r2, r0
 80037c6:	69bb      	ldr	r3, [r7, #24]
 80037c8:	1ad3      	subs	r3, r2, r3
 80037ca:	2b02      	cmp	r3, #2
 80037cc:	d901      	bls.n	80037d2 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 80037ce:	2303      	movs	r3, #3
 80037d0:	e02c      	b.n	800382c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80037d2:	4b18      	ldr	r3, [pc, #96]	; (8003834 <HAL_RCC_OscConfig+0x708>)
 80037d4:	681a      	ldr	r2, [r3, #0]
 80037d6:	2380      	movs	r3, #128	; 0x80
 80037d8:	049b      	lsls	r3, r3, #18
 80037da:	4013      	ands	r3, r2
 80037dc:	d1f0      	bne.n	80037c0 <HAL_RCC_OscConfig+0x694>
 80037de:	e024      	b.n	800382a <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037e4:	2b01      	cmp	r3, #1
 80037e6:	d101      	bne.n	80037ec <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 80037e8:	2301      	movs	r3, #1
 80037ea:	e01f      	b.n	800382c <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80037ec:	4b11      	ldr	r3, [pc, #68]	; (8003834 <HAL_RCC_OscConfig+0x708>)
 80037ee:	685b      	ldr	r3, [r3, #4]
 80037f0:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80037f2:	4b10      	ldr	r3, [pc, #64]	; (8003834 <HAL_RCC_OscConfig+0x708>)
 80037f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037f6:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80037f8:	697a      	ldr	r2, [r7, #20]
 80037fa:	23c0      	movs	r3, #192	; 0xc0
 80037fc:	025b      	lsls	r3, r3, #9
 80037fe:	401a      	ands	r2, r3
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003804:	429a      	cmp	r2, r3
 8003806:	d10e      	bne.n	8003826 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8003808:	693b      	ldr	r3, [r7, #16]
 800380a:	220f      	movs	r2, #15
 800380c:	401a      	ands	r2, r3
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003812:	429a      	cmp	r2, r3
 8003814:	d107      	bne.n	8003826 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8003816:	697a      	ldr	r2, [r7, #20]
 8003818:	23f0      	movs	r3, #240	; 0xf0
 800381a:	039b      	lsls	r3, r3, #14
 800381c:	401a      	ands	r2, r3
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8003822:	429a      	cmp	r2, r3
 8003824:	d001      	beq.n	800382a <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8003826:	2301      	movs	r3, #1
 8003828:	e000      	b.n	800382c <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 800382a:	2300      	movs	r3, #0
}
 800382c:	0018      	movs	r0, r3
 800382e:	46bd      	mov	sp, r7
 8003830:	b008      	add	sp, #32
 8003832:	bd80      	pop	{r7, pc}
 8003834:	40021000 	.word	0x40021000

08003838 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b084      	sub	sp, #16
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
 8003840:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2b00      	cmp	r3, #0
 8003846:	d101      	bne.n	800384c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003848:	2301      	movs	r3, #1
 800384a:	e0bf      	b.n	80039cc <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800384c:	4b61      	ldr	r3, [pc, #388]	; (80039d4 <HAL_RCC_ClockConfig+0x19c>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	2201      	movs	r2, #1
 8003852:	4013      	ands	r3, r2
 8003854:	683a      	ldr	r2, [r7, #0]
 8003856:	429a      	cmp	r2, r3
 8003858:	d911      	bls.n	800387e <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800385a:	4b5e      	ldr	r3, [pc, #376]	; (80039d4 <HAL_RCC_ClockConfig+0x19c>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	2201      	movs	r2, #1
 8003860:	4393      	bics	r3, r2
 8003862:	0019      	movs	r1, r3
 8003864:	4b5b      	ldr	r3, [pc, #364]	; (80039d4 <HAL_RCC_ClockConfig+0x19c>)
 8003866:	683a      	ldr	r2, [r7, #0]
 8003868:	430a      	orrs	r2, r1
 800386a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800386c:	4b59      	ldr	r3, [pc, #356]	; (80039d4 <HAL_RCC_ClockConfig+0x19c>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	2201      	movs	r2, #1
 8003872:	4013      	ands	r3, r2
 8003874:	683a      	ldr	r2, [r7, #0]
 8003876:	429a      	cmp	r2, r3
 8003878:	d001      	beq.n	800387e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800387a:	2301      	movs	r3, #1
 800387c:	e0a6      	b.n	80039cc <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	2202      	movs	r2, #2
 8003884:	4013      	ands	r3, r2
 8003886:	d015      	beq.n	80038b4 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	2204      	movs	r2, #4
 800388e:	4013      	ands	r3, r2
 8003890:	d006      	beq.n	80038a0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8003892:	4b51      	ldr	r3, [pc, #324]	; (80039d8 <HAL_RCC_ClockConfig+0x1a0>)
 8003894:	685a      	ldr	r2, [r3, #4]
 8003896:	4b50      	ldr	r3, [pc, #320]	; (80039d8 <HAL_RCC_ClockConfig+0x1a0>)
 8003898:	21e0      	movs	r1, #224	; 0xe0
 800389a:	00c9      	lsls	r1, r1, #3
 800389c:	430a      	orrs	r2, r1
 800389e:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038a0:	4b4d      	ldr	r3, [pc, #308]	; (80039d8 <HAL_RCC_ClockConfig+0x1a0>)
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	22f0      	movs	r2, #240	; 0xf0
 80038a6:	4393      	bics	r3, r2
 80038a8:	0019      	movs	r1, r3
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	689a      	ldr	r2, [r3, #8]
 80038ae:	4b4a      	ldr	r3, [pc, #296]	; (80039d8 <HAL_RCC_ClockConfig+0x1a0>)
 80038b0:	430a      	orrs	r2, r1
 80038b2:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	2201      	movs	r2, #1
 80038ba:	4013      	ands	r3, r2
 80038bc:	d04c      	beq.n	8003958 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	685b      	ldr	r3, [r3, #4]
 80038c2:	2b01      	cmp	r3, #1
 80038c4:	d107      	bne.n	80038d6 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038c6:	4b44      	ldr	r3, [pc, #272]	; (80039d8 <HAL_RCC_ClockConfig+0x1a0>)
 80038c8:	681a      	ldr	r2, [r3, #0]
 80038ca:	2380      	movs	r3, #128	; 0x80
 80038cc:	029b      	lsls	r3, r3, #10
 80038ce:	4013      	ands	r3, r2
 80038d0:	d120      	bne.n	8003914 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80038d2:	2301      	movs	r3, #1
 80038d4:	e07a      	b.n	80039cc <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	685b      	ldr	r3, [r3, #4]
 80038da:	2b02      	cmp	r3, #2
 80038dc:	d107      	bne.n	80038ee <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038de:	4b3e      	ldr	r3, [pc, #248]	; (80039d8 <HAL_RCC_ClockConfig+0x1a0>)
 80038e0:	681a      	ldr	r2, [r3, #0]
 80038e2:	2380      	movs	r3, #128	; 0x80
 80038e4:	049b      	lsls	r3, r3, #18
 80038e6:	4013      	ands	r3, r2
 80038e8:	d114      	bne.n	8003914 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80038ea:	2301      	movs	r3, #1
 80038ec:	e06e      	b.n	80039cc <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	685b      	ldr	r3, [r3, #4]
 80038f2:	2b03      	cmp	r3, #3
 80038f4:	d107      	bne.n	8003906 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80038f6:	4b38      	ldr	r3, [pc, #224]	; (80039d8 <HAL_RCC_ClockConfig+0x1a0>)
 80038f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80038fa:	2380      	movs	r3, #128	; 0x80
 80038fc:	025b      	lsls	r3, r3, #9
 80038fe:	4013      	ands	r3, r2
 8003900:	d108      	bne.n	8003914 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8003902:	2301      	movs	r3, #1
 8003904:	e062      	b.n	80039cc <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003906:	4b34      	ldr	r3, [pc, #208]	; (80039d8 <HAL_RCC_ClockConfig+0x1a0>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	2202      	movs	r2, #2
 800390c:	4013      	ands	r3, r2
 800390e:	d101      	bne.n	8003914 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8003910:	2301      	movs	r3, #1
 8003912:	e05b      	b.n	80039cc <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003914:	4b30      	ldr	r3, [pc, #192]	; (80039d8 <HAL_RCC_ClockConfig+0x1a0>)
 8003916:	685b      	ldr	r3, [r3, #4]
 8003918:	2203      	movs	r2, #3
 800391a:	4393      	bics	r3, r2
 800391c:	0019      	movs	r1, r3
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	685a      	ldr	r2, [r3, #4]
 8003922:	4b2d      	ldr	r3, [pc, #180]	; (80039d8 <HAL_RCC_ClockConfig+0x1a0>)
 8003924:	430a      	orrs	r2, r1
 8003926:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003928:	f7fd ff44 	bl	80017b4 <HAL_GetTick>
 800392c:	0003      	movs	r3, r0
 800392e:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003930:	e009      	b.n	8003946 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003932:	f7fd ff3f 	bl	80017b4 <HAL_GetTick>
 8003936:	0002      	movs	r2, r0
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	1ad3      	subs	r3, r2, r3
 800393c:	4a27      	ldr	r2, [pc, #156]	; (80039dc <HAL_RCC_ClockConfig+0x1a4>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d901      	bls.n	8003946 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003942:	2303      	movs	r3, #3
 8003944:	e042      	b.n	80039cc <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003946:	4b24      	ldr	r3, [pc, #144]	; (80039d8 <HAL_RCC_ClockConfig+0x1a0>)
 8003948:	685b      	ldr	r3, [r3, #4]
 800394a:	220c      	movs	r2, #12
 800394c:	401a      	ands	r2, r3
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	685b      	ldr	r3, [r3, #4]
 8003952:	009b      	lsls	r3, r3, #2
 8003954:	429a      	cmp	r2, r3
 8003956:	d1ec      	bne.n	8003932 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003958:	4b1e      	ldr	r3, [pc, #120]	; (80039d4 <HAL_RCC_ClockConfig+0x19c>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	2201      	movs	r2, #1
 800395e:	4013      	ands	r3, r2
 8003960:	683a      	ldr	r2, [r7, #0]
 8003962:	429a      	cmp	r2, r3
 8003964:	d211      	bcs.n	800398a <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003966:	4b1b      	ldr	r3, [pc, #108]	; (80039d4 <HAL_RCC_ClockConfig+0x19c>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	2201      	movs	r2, #1
 800396c:	4393      	bics	r3, r2
 800396e:	0019      	movs	r1, r3
 8003970:	4b18      	ldr	r3, [pc, #96]	; (80039d4 <HAL_RCC_ClockConfig+0x19c>)
 8003972:	683a      	ldr	r2, [r7, #0]
 8003974:	430a      	orrs	r2, r1
 8003976:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003978:	4b16      	ldr	r3, [pc, #88]	; (80039d4 <HAL_RCC_ClockConfig+0x19c>)
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	2201      	movs	r2, #1
 800397e:	4013      	ands	r3, r2
 8003980:	683a      	ldr	r2, [r7, #0]
 8003982:	429a      	cmp	r2, r3
 8003984:	d001      	beq.n	800398a <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8003986:	2301      	movs	r3, #1
 8003988:	e020      	b.n	80039cc <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	2204      	movs	r2, #4
 8003990:	4013      	ands	r3, r2
 8003992:	d009      	beq.n	80039a8 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8003994:	4b10      	ldr	r3, [pc, #64]	; (80039d8 <HAL_RCC_ClockConfig+0x1a0>)
 8003996:	685b      	ldr	r3, [r3, #4]
 8003998:	4a11      	ldr	r2, [pc, #68]	; (80039e0 <HAL_RCC_ClockConfig+0x1a8>)
 800399a:	4013      	ands	r3, r2
 800399c:	0019      	movs	r1, r3
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	68da      	ldr	r2, [r3, #12]
 80039a2:	4b0d      	ldr	r3, [pc, #52]	; (80039d8 <HAL_RCC_ClockConfig+0x1a0>)
 80039a4:	430a      	orrs	r2, r1
 80039a6:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80039a8:	f000 f820 	bl	80039ec <HAL_RCC_GetSysClockFreq>
 80039ac:	0001      	movs	r1, r0
 80039ae:	4b0a      	ldr	r3, [pc, #40]	; (80039d8 <HAL_RCC_ClockConfig+0x1a0>)
 80039b0:	685b      	ldr	r3, [r3, #4]
 80039b2:	091b      	lsrs	r3, r3, #4
 80039b4:	220f      	movs	r2, #15
 80039b6:	4013      	ands	r3, r2
 80039b8:	4a0a      	ldr	r2, [pc, #40]	; (80039e4 <HAL_RCC_ClockConfig+0x1ac>)
 80039ba:	5cd3      	ldrb	r3, [r2, r3]
 80039bc:	000a      	movs	r2, r1
 80039be:	40da      	lsrs	r2, r3
 80039c0:	4b09      	ldr	r3, [pc, #36]	; (80039e8 <HAL_RCC_ClockConfig+0x1b0>)
 80039c2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80039c4:	2003      	movs	r0, #3
 80039c6:	f7fd feaf 	bl	8001728 <HAL_InitTick>
  
  return HAL_OK;
 80039ca:	2300      	movs	r3, #0
}
 80039cc:	0018      	movs	r0, r3
 80039ce:	46bd      	mov	sp, r7
 80039d0:	b004      	add	sp, #16
 80039d2:	bd80      	pop	{r7, pc}
 80039d4:	40022000 	.word	0x40022000
 80039d8:	40021000 	.word	0x40021000
 80039dc:	00001388 	.word	0x00001388
 80039e0:	fffff8ff 	.word	0xfffff8ff
 80039e4:	0800667c 	.word	0x0800667c
 80039e8:	2000001c 	.word	0x2000001c

080039ec <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80039ec:	b590      	push	{r4, r7, lr}
 80039ee:	b08f      	sub	sp, #60	; 0x3c
 80039f0:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 80039f2:	2314      	movs	r3, #20
 80039f4:	18fb      	adds	r3, r7, r3
 80039f6:	4a38      	ldr	r2, [pc, #224]	; (8003ad8 <HAL_RCC_GetSysClockFreq+0xec>)
 80039f8:	ca13      	ldmia	r2!, {r0, r1, r4}
 80039fa:	c313      	stmia	r3!, {r0, r1, r4}
 80039fc:	6812      	ldr	r2, [r2, #0]
 80039fe:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8003a00:	1d3b      	adds	r3, r7, #4
 8003a02:	4a36      	ldr	r2, [pc, #216]	; (8003adc <HAL_RCC_GetSysClockFreq+0xf0>)
 8003a04:	ca13      	ldmia	r2!, {r0, r1, r4}
 8003a06:	c313      	stmia	r3!, {r0, r1, r4}
 8003a08:	6812      	ldr	r2, [r2, #0]
 8003a0a:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a10:	2300      	movs	r3, #0
 8003a12:	62bb      	str	r3, [r7, #40]	; 0x28
 8003a14:	2300      	movs	r3, #0
 8003a16:	637b      	str	r3, [r7, #52]	; 0x34
 8003a18:	2300      	movs	r3, #0
 8003a1a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8003a20:	4b2f      	ldr	r3, [pc, #188]	; (8003ae0 <HAL_RCC_GetSysClockFreq+0xf4>)
 8003a22:	685b      	ldr	r3, [r3, #4]
 8003a24:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003a26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a28:	220c      	movs	r2, #12
 8003a2a:	4013      	ands	r3, r2
 8003a2c:	2b0c      	cmp	r3, #12
 8003a2e:	d047      	beq.n	8003ac0 <HAL_RCC_GetSysClockFreq+0xd4>
 8003a30:	d849      	bhi.n	8003ac6 <HAL_RCC_GetSysClockFreq+0xda>
 8003a32:	2b04      	cmp	r3, #4
 8003a34:	d002      	beq.n	8003a3c <HAL_RCC_GetSysClockFreq+0x50>
 8003a36:	2b08      	cmp	r3, #8
 8003a38:	d003      	beq.n	8003a42 <HAL_RCC_GetSysClockFreq+0x56>
 8003a3a:	e044      	b.n	8003ac6 <HAL_RCC_GetSysClockFreq+0xda>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003a3c:	4b29      	ldr	r3, [pc, #164]	; (8003ae4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003a3e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003a40:	e044      	b.n	8003acc <HAL_RCC_GetSysClockFreq+0xe0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8003a42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a44:	0c9b      	lsrs	r3, r3, #18
 8003a46:	220f      	movs	r2, #15
 8003a48:	4013      	ands	r3, r2
 8003a4a:	2214      	movs	r2, #20
 8003a4c:	18ba      	adds	r2, r7, r2
 8003a4e:	5cd3      	ldrb	r3, [r2, r3]
 8003a50:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8003a52:	4b23      	ldr	r3, [pc, #140]	; (8003ae0 <HAL_RCC_GetSysClockFreq+0xf4>)
 8003a54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a56:	220f      	movs	r2, #15
 8003a58:	4013      	ands	r3, r2
 8003a5a:	1d3a      	adds	r2, r7, #4
 8003a5c:	5cd3      	ldrb	r3, [r2, r3]
 8003a5e:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003a60:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003a62:	23c0      	movs	r3, #192	; 0xc0
 8003a64:	025b      	lsls	r3, r3, #9
 8003a66:	401a      	ands	r2, r3
 8003a68:	2380      	movs	r3, #128	; 0x80
 8003a6a:	025b      	lsls	r3, r3, #9
 8003a6c:	429a      	cmp	r2, r3
 8003a6e:	d109      	bne.n	8003a84 <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003a70:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003a72:	481c      	ldr	r0, [pc, #112]	; (8003ae4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003a74:	f7fc fb64 	bl	8000140 <__udivsi3>
 8003a78:	0003      	movs	r3, r0
 8003a7a:	001a      	movs	r2, r3
 8003a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a7e:	4353      	muls	r3, r2
 8003a80:	637b      	str	r3, [r7, #52]	; 0x34
 8003a82:	e01a      	b.n	8003aba <HAL_RCC_GetSysClockFreq+0xce>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8003a84:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003a86:	23c0      	movs	r3, #192	; 0xc0
 8003a88:	025b      	lsls	r3, r3, #9
 8003a8a:	401a      	ands	r2, r3
 8003a8c:	23c0      	movs	r3, #192	; 0xc0
 8003a8e:	025b      	lsls	r3, r3, #9
 8003a90:	429a      	cmp	r2, r3
 8003a92:	d109      	bne.n	8003aa8 <HAL_RCC_GetSysClockFreq+0xbc>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003a94:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003a96:	4814      	ldr	r0, [pc, #80]	; (8003ae8 <HAL_RCC_GetSysClockFreq+0xfc>)
 8003a98:	f7fc fb52 	bl	8000140 <__udivsi3>
 8003a9c:	0003      	movs	r3, r0
 8003a9e:	001a      	movs	r2, r3
 8003aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aa2:	4353      	muls	r3, r2
 8003aa4:	637b      	str	r3, [r7, #52]	; 0x34
 8003aa6:	e008      	b.n	8003aba <HAL_RCC_GetSysClockFreq+0xce>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003aa8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003aaa:	480e      	ldr	r0, [pc, #56]	; (8003ae4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003aac:	f7fc fb48 	bl	8000140 <__udivsi3>
 8003ab0:	0003      	movs	r3, r0
 8003ab2:	001a      	movs	r2, r3
 8003ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ab6:	4353      	muls	r3, r2
 8003ab8:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8003aba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003abc:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003abe:	e005      	b.n	8003acc <HAL_RCC_GetSysClockFreq+0xe0>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8003ac0:	4b09      	ldr	r3, [pc, #36]	; (8003ae8 <HAL_RCC_GetSysClockFreq+0xfc>)
 8003ac2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003ac4:	e002      	b.n	8003acc <HAL_RCC_GetSysClockFreq+0xe0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003ac6:	4b07      	ldr	r3, [pc, #28]	; (8003ae4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003ac8:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003aca:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8003acc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8003ace:	0018      	movs	r0, r3
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	b00f      	add	sp, #60	; 0x3c
 8003ad4:	bd90      	pop	{r4, r7, pc}
 8003ad6:	46c0      	nop			; (mov r8, r8)
 8003ad8:	0800665c 	.word	0x0800665c
 8003adc:	0800666c 	.word	0x0800666c
 8003ae0:	40021000 	.word	0x40021000
 8003ae4:	007a1200 	.word	0x007a1200
 8003ae8:	02dc6c00 	.word	0x02dc6c00

08003aec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003af0:	4b02      	ldr	r3, [pc, #8]	; (8003afc <HAL_RCC_GetHCLKFreq+0x10>)
 8003af2:	681b      	ldr	r3, [r3, #0]
}
 8003af4:	0018      	movs	r0, r3
 8003af6:	46bd      	mov	sp, r7
 8003af8:	bd80      	pop	{r7, pc}
 8003afa:	46c0      	nop			; (mov r8, r8)
 8003afc:	2000001c 	.word	0x2000001c

08003b00 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8003b04:	f7ff fff2 	bl	8003aec <HAL_RCC_GetHCLKFreq>
 8003b08:	0001      	movs	r1, r0
 8003b0a:	4b06      	ldr	r3, [pc, #24]	; (8003b24 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b0c:	685b      	ldr	r3, [r3, #4]
 8003b0e:	0a1b      	lsrs	r3, r3, #8
 8003b10:	2207      	movs	r2, #7
 8003b12:	4013      	ands	r3, r2
 8003b14:	4a04      	ldr	r2, [pc, #16]	; (8003b28 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003b16:	5cd3      	ldrb	r3, [r2, r3]
 8003b18:	40d9      	lsrs	r1, r3
 8003b1a:	000b      	movs	r3, r1
}    
 8003b1c:	0018      	movs	r0, r3
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	bd80      	pop	{r7, pc}
 8003b22:	46c0      	nop			; (mov r8, r8)
 8003b24:	40021000 	.word	0x40021000
 8003b28:	0800668c 	.word	0x0800668c

08003b2c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b086      	sub	sp, #24
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003b34:	2300      	movs	r3, #0
 8003b36:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8003b38:	2300      	movs	r3, #0
 8003b3a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681a      	ldr	r2, [r3, #0]
 8003b40:	2380      	movs	r3, #128	; 0x80
 8003b42:	025b      	lsls	r3, r3, #9
 8003b44:	4013      	ands	r3, r2
 8003b46:	d100      	bne.n	8003b4a <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8003b48:	e08e      	b.n	8003c68 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8003b4a:	2017      	movs	r0, #23
 8003b4c:	183b      	adds	r3, r7, r0
 8003b4e:	2200      	movs	r2, #0
 8003b50:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b52:	4b67      	ldr	r3, [pc, #412]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003b54:	69da      	ldr	r2, [r3, #28]
 8003b56:	2380      	movs	r3, #128	; 0x80
 8003b58:	055b      	lsls	r3, r3, #21
 8003b5a:	4013      	ands	r3, r2
 8003b5c:	d110      	bne.n	8003b80 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003b5e:	4b64      	ldr	r3, [pc, #400]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003b60:	69da      	ldr	r2, [r3, #28]
 8003b62:	4b63      	ldr	r3, [pc, #396]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003b64:	2180      	movs	r1, #128	; 0x80
 8003b66:	0549      	lsls	r1, r1, #21
 8003b68:	430a      	orrs	r2, r1
 8003b6a:	61da      	str	r2, [r3, #28]
 8003b6c:	4b60      	ldr	r3, [pc, #384]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003b6e:	69da      	ldr	r2, [r3, #28]
 8003b70:	2380      	movs	r3, #128	; 0x80
 8003b72:	055b      	lsls	r3, r3, #21
 8003b74:	4013      	ands	r3, r2
 8003b76:	60bb      	str	r3, [r7, #8]
 8003b78:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b7a:	183b      	adds	r3, r7, r0
 8003b7c:	2201      	movs	r2, #1
 8003b7e:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b80:	4b5c      	ldr	r3, [pc, #368]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8003b82:	681a      	ldr	r2, [r3, #0]
 8003b84:	2380      	movs	r3, #128	; 0x80
 8003b86:	005b      	lsls	r3, r3, #1
 8003b88:	4013      	ands	r3, r2
 8003b8a:	d11a      	bne.n	8003bc2 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b8c:	4b59      	ldr	r3, [pc, #356]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8003b8e:	681a      	ldr	r2, [r3, #0]
 8003b90:	4b58      	ldr	r3, [pc, #352]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8003b92:	2180      	movs	r1, #128	; 0x80
 8003b94:	0049      	lsls	r1, r1, #1
 8003b96:	430a      	orrs	r2, r1
 8003b98:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b9a:	f7fd fe0b 	bl	80017b4 <HAL_GetTick>
 8003b9e:	0003      	movs	r3, r0
 8003ba0:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ba2:	e008      	b.n	8003bb6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ba4:	f7fd fe06 	bl	80017b4 <HAL_GetTick>
 8003ba8:	0002      	movs	r2, r0
 8003baa:	693b      	ldr	r3, [r7, #16]
 8003bac:	1ad3      	subs	r3, r2, r3
 8003bae:	2b64      	cmp	r3, #100	; 0x64
 8003bb0:	d901      	bls.n	8003bb6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8003bb2:	2303      	movs	r3, #3
 8003bb4:	e097      	b.n	8003ce6 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bb6:	4b4f      	ldr	r3, [pc, #316]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8003bb8:	681a      	ldr	r2, [r3, #0]
 8003bba:	2380      	movs	r3, #128	; 0x80
 8003bbc:	005b      	lsls	r3, r3, #1
 8003bbe:	4013      	ands	r3, r2
 8003bc0:	d0f0      	beq.n	8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003bc2:	4b4b      	ldr	r3, [pc, #300]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003bc4:	6a1a      	ldr	r2, [r3, #32]
 8003bc6:	23c0      	movs	r3, #192	; 0xc0
 8003bc8:	009b      	lsls	r3, r3, #2
 8003bca:	4013      	ands	r3, r2
 8003bcc:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d034      	beq.n	8003c3e <HAL_RCCEx_PeriphCLKConfig+0x112>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	685a      	ldr	r2, [r3, #4]
 8003bd8:	23c0      	movs	r3, #192	; 0xc0
 8003bda:	009b      	lsls	r3, r3, #2
 8003bdc:	4013      	ands	r3, r2
 8003bde:	68fa      	ldr	r2, [r7, #12]
 8003be0:	429a      	cmp	r2, r3
 8003be2:	d02c      	beq.n	8003c3e <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003be4:	4b42      	ldr	r3, [pc, #264]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003be6:	6a1b      	ldr	r3, [r3, #32]
 8003be8:	4a43      	ldr	r2, [pc, #268]	; (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003bea:	4013      	ands	r3, r2
 8003bec:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003bee:	4b40      	ldr	r3, [pc, #256]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003bf0:	6a1a      	ldr	r2, [r3, #32]
 8003bf2:	4b3f      	ldr	r3, [pc, #252]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003bf4:	2180      	movs	r1, #128	; 0x80
 8003bf6:	0249      	lsls	r1, r1, #9
 8003bf8:	430a      	orrs	r2, r1
 8003bfa:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003bfc:	4b3c      	ldr	r3, [pc, #240]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003bfe:	6a1a      	ldr	r2, [r3, #32]
 8003c00:	4b3b      	ldr	r3, [pc, #236]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003c02:	493e      	ldr	r1, [pc, #248]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c04:	400a      	ands	r2, r1
 8003c06:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003c08:	4b39      	ldr	r3, [pc, #228]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003c0a:	68fa      	ldr	r2, [r7, #12]
 8003c0c:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	2201      	movs	r2, #1
 8003c12:	4013      	ands	r3, r2
 8003c14:	d013      	beq.n	8003c3e <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c16:	f7fd fdcd 	bl	80017b4 <HAL_GetTick>
 8003c1a:	0003      	movs	r3, r0
 8003c1c:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c1e:	e009      	b.n	8003c34 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c20:	f7fd fdc8 	bl	80017b4 <HAL_GetTick>
 8003c24:	0002      	movs	r2, r0
 8003c26:	693b      	ldr	r3, [r7, #16]
 8003c28:	1ad3      	subs	r3, r2, r3
 8003c2a:	4a35      	ldr	r2, [pc, #212]	; (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d901      	bls.n	8003c34 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8003c30:	2303      	movs	r3, #3
 8003c32:	e058      	b.n	8003ce6 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c34:	4b2e      	ldr	r3, [pc, #184]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003c36:	6a1b      	ldr	r3, [r3, #32]
 8003c38:	2202      	movs	r2, #2
 8003c3a:	4013      	ands	r3, r2
 8003c3c:	d0f0      	beq.n	8003c20 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003c3e:	4b2c      	ldr	r3, [pc, #176]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003c40:	6a1b      	ldr	r3, [r3, #32]
 8003c42:	4a2d      	ldr	r2, [pc, #180]	; (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003c44:	4013      	ands	r3, r2
 8003c46:	0019      	movs	r1, r3
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	685a      	ldr	r2, [r3, #4]
 8003c4c:	4b28      	ldr	r3, [pc, #160]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003c4e:	430a      	orrs	r2, r1
 8003c50:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003c52:	2317      	movs	r3, #23
 8003c54:	18fb      	adds	r3, r7, r3
 8003c56:	781b      	ldrb	r3, [r3, #0]
 8003c58:	2b01      	cmp	r3, #1
 8003c5a:	d105      	bne.n	8003c68 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c5c:	4b24      	ldr	r3, [pc, #144]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003c5e:	69da      	ldr	r2, [r3, #28]
 8003c60:	4b23      	ldr	r3, [pc, #140]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003c62:	4928      	ldr	r1, [pc, #160]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003c64:	400a      	ands	r2, r1
 8003c66:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	2201      	movs	r2, #1
 8003c6e:	4013      	ands	r3, r2
 8003c70:	d009      	beq.n	8003c86 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003c72:	4b1f      	ldr	r3, [pc, #124]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c76:	2203      	movs	r2, #3
 8003c78:	4393      	bics	r3, r2
 8003c7a:	0019      	movs	r1, r3
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	689a      	ldr	r2, [r3, #8]
 8003c80:	4b1b      	ldr	r3, [pc, #108]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003c82:	430a      	orrs	r2, r1
 8003c84:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	2220      	movs	r2, #32
 8003c8c:	4013      	ands	r3, r2
 8003c8e:	d009      	beq.n	8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003c90:	4b17      	ldr	r3, [pc, #92]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003c92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c94:	2210      	movs	r2, #16
 8003c96:	4393      	bics	r3, r2
 8003c98:	0019      	movs	r1, r3
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	68da      	ldr	r2, [r3, #12]
 8003c9e:	4b14      	ldr	r3, [pc, #80]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003ca0:	430a      	orrs	r2, r1
 8003ca2:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681a      	ldr	r2, [r3, #0]
 8003ca8:	2380      	movs	r3, #128	; 0x80
 8003caa:	029b      	lsls	r3, r3, #10
 8003cac:	4013      	ands	r3, r2
 8003cae:	d009      	beq.n	8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003cb0:	4b0f      	ldr	r3, [pc, #60]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003cb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cb4:	2280      	movs	r2, #128	; 0x80
 8003cb6:	4393      	bics	r3, r2
 8003cb8:	0019      	movs	r1, r3
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	695a      	ldr	r2, [r3, #20]
 8003cbe:	4b0c      	ldr	r3, [pc, #48]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003cc0:	430a      	orrs	r2, r1
 8003cc2:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681a      	ldr	r2, [r3, #0]
 8003cc8:	2380      	movs	r3, #128	; 0x80
 8003cca:	00db      	lsls	r3, r3, #3
 8003ccc:	4013      	ands	r3, r2
 8003cce:	d009      	beq.n	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003cd0:	4b07      	ldr	r3, [pc, #28]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003cd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cd4:	2240      	movs	r2, #64	; 0x40
 8003cd6:	4393      	bics	r3, r2
 8003cd8:	0019      	movs	r1, r3
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	691a      	ldr	r2, [r3, #16]
 8003cde:	4b04      	ldr	r3, [pc, #16]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003ce0:	430a      	orrs	r2, r1
 8003ce2:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8003ce4:	2300      	movs	r3, #0
}
 8003ce6:	0018      	movs	r0, r3
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	b006      	add	sp, #24
 8003cec:	bd80      	pop	{r7, pc}
 8003cee:	46c0      	nop			; (mov r8, r8)
 8003cf0:	40021000 	.word	0x40021000
 8003cf4:	40007000 	.word	0x40007000
 8003cf8:	fffffcff 	.word	0xfffffcff
 8003cfc:	fffeffff 	.word	0xfffeffff
 8003d00:	00001388 	.word	0x00001388
 8003d04:	efffffff 	.word	0xefffffff

08003d08 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b082      	sub	sp, #8
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d101      	bne.n	8003d1a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003d16:	2301      	movs	r3, #1
 8003d18:	e042      	b.n	8003da0 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	223d      	movs	r2, #61	; 0x3d
 8003d1e:	5c9b      	ldrb	r3, [r3, r2]
 8003d20:	b2db      	uxtb	r3, r3
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d107      	bne.n	8003d36 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	223c      	movs	r2, #60	; 0x3c
 8003d2a:	2100      	movs	r1, #0
 8003d2c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	0018      	movs	r0, r3
 8003d32:	f7fc fd1d 	bl	8000770 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	223d      	movs	r2, #61	; 0x3d
 8003d3a:	2102      	movs	r1, #2
 8003d3c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681a      	ldr	r2, [r3, #0]
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	3304      	adds	r3, #4
 8003d46:	0019      	movs	r1, r3
 8003d48:	0010      	movs	r0, r2
 8003d4a:	f000 f9dd 	bl	8004108 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2246      	movs	r2, #70	; 0x46
 8003d52:	2101      	movs	r1, #1
 8003d54:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	223e      	movs	r2, #62	; 0x3e
 8003d5a:	2101      	movs	r1, #1
 8003d5c:	5499      	strb	r1, [r3, r2]
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	223f      	movs	r2, #63	; 0x3f
 8003d62:	2101      	movs	r1, #1
 8003d64:	5499      	strb	r1, [r3, r2]
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2240      	movs	r2, #64	; 0x40
 8003d6a:	2101      	movs	r1, #1
 8003d6c:	5499      	strb	r1, [r3, r2]
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2241      	movs	r2, #65	; 0x41
 8003d72:	2101      	movs	r1, #1
 8003d74:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	2242      	movs	r2, #66	; 0x42
 8003d7a:	2101      	movs	r1, #1
 8003d7c:	5499      	strb	r1, [r3, r2]
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	2243      	movs	r2, #67	; 0x43
 8003d82:	2101      	movs	r1, #1
 8003d84:	5499      	strb	r1, [r3, r2]
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2244      	movs	r2, #68	; 0x44
 8003d8a:	2101      	movs	r1, #1
 8003d8c:	5499      	strb	r1, [r3, r2]
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2245      	movs	r2, #69	; 0x45
 8003d92:	2101      	movs	r1, #1
 8003d94:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	223d      	movs	r2, #61	; 0x3d
 8003d9a:	2101      	movs	r1, #1
 8003d9c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003d9e:	2300      	movs	r3, #0
}
 8003da0:	0018      	movs	r0, r3
 8003da2:	46bd      	mov	sp, r7
 8003da4:	b002      	add	sp, #8
 8003da6:	bd80      	pop	{r7, pc}

08003da8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b084      	sub	sp, #16
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	223d      	movs	r2, #61	; 0x3d
 8003db4:	5c9b      	ldrb	r3, [r3, r2]
 8003db6:	b2db      	uxtb	r3, r3
 8003db8:	2b01      	cmp	r3, #1
 8003dba:	d001      	beq.n	8003dc0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	e036      	b.n	8003e2e <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	223d      	movs	r2, #61	; 0x3d
 8003dc4:	2102      	movs	r1, #2
 8003dc6:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	68da      	ldr	r2, [r3, #12]
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	2101      	movs	r1, #1
 8003dd4:	430a      	orrs	r2, r1
 8003dd6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	4a16      	ldr	r2, [pc, #88]	; (8003e38 <HAL_TIM_Base_Start_IT+0x90>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d00a      	beq.n	8003df8 <HAL_TIM_Base_Start_IT+0x50>
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681a      	ldr	r2, [r3, #0]
 8003de6:	2380      	movs	r3, #128	; 0x80
 8003de8:	05db      	lsls	r3, r3, #23
 8003dea:	429a      	cmp	r2, r3
 8003dec:	d004      	beq.n	8003df8 <HAL_TIM_Base_Start_IT+0x50>
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	4a12      	ldr	r2, [pc, #72]	; (8003e3c <HAL_TIM_Base_Start_IT+0x94>)
 8003df4:	4293      	cmp	r3, r2
 8003df6:	d111      	bne.n	8003e1c <HAL_TIM_Base_Start_IT+0x74>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	689b      	ldr	r3, [r3, #8]
 8003dfe:	2207      	movs	r2, #7
 8003e00:	4013      	ands	r3, r2
 8003e02:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	2b06      	cmp	r3, #6
 8003e08:	d010      	beq.n	8003e2c <HAL_TIM_Base_Start_IT+0x84>
    {
      __HAL_TIM_ENABLE(htim);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	681a      	ldr	r2, [r3, #0]
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	2101      	movs	r1, #1
 8003e16:	430a      	orrs	r2, r1
 8003e18:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e1a:	e007      	b.n	8003e2c <HAL_TIM_Base_Start_IT+0x84>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	681a      	ldr	r2, [r3, #0]
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	2101      	movs	r1, #1
 8003e28:	430a      	orrs	r2, r1
 8003e2a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003e2c:	2300      	movs	r3, #0
}
 8003e2e:	0018      	movs	r0, r3
 8003e30:	46bd      	mov	sp, r7
 8003e32:	b004      	add	sp, #16
 8003e34:	bd80      	pop	{r7, pc}
 8003e36:	46c0      	nop			; (mov r8, r8)
 8003e38:	40012c00 	.word	0x40012c00
 8003e3c:	40000400 	.word	0x40000400

08003e40 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b082      	sub	sp, #8
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	68da      	ldr	r2, [r3, #12]
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	2101      	movs	r1, #1
 8003e54:	438a      	bics	r2, r1
 8003e56:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	6a1b      	ldr	r3, [r3, #32]
 8003e5e:	4a0d      	ldr	r2, [pc, #52]	; (8003e94 <HAL_TIM_Base_Stop_IT+0x54>)
 8003e60:	4013      	ands	r3, r2
 8003e62:	d10d      	bne.n	8003e80 <HAL_TIM_Base_Stop_IT+0x40>
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	6a1b      	ldr	r3, [r3, #32]
 8003e6a:	4a0b      	ldr	r2, [pc, #44]	; (8003e98 <HAL_TIM_Base_Stop_IT+0x58>)
 8003e6c:	4013      	ands	r3, r2
 8003e6e:	d107      	bne.n	8003e80 <HAL_TIM_Base_Stop_IT+0x40>
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	681a      	ldr	r2, [r3, #0]
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	2101      	movs	r1, #1
 8003e7c:	438a      	bics	r2, r1
 8003e7e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	223d      	movs	r2, #61	; 0x3d
 8003e84:	2101      	movs	r1, #1
 8003e86:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8003e88:	2300      	movs	r3, #0
}
 8003e8a:	0018      	movs	r0, r3
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	b002      	add	sp, #8
 8003e90:	bd80      	pop	{r7, pc}
 8003e92:	46c0      	nop			; (mov r8, r8)
 8003e94:	00001111 	.word	0x00001111
 8003e98:	00000444 	.word	0x00000444

08003e9c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b082      	sub	sp, #8
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	691b      	ldr	r3, [r3, #16]
 8003eaa:	2202      	movs	r2, #2
 8003eac:	4013      	ands	r3, r2
 8003eae:	2b02      	cmp	r3, #2
 8003eb0:	d124      	bne.n	8003efc <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	68db      	ldr	r3, [r3, #12]
 8003eb8:	2202      	movs	r2, #2
 8003eba:	4013      	ands	r3, r2
 8003ebc:	2b02      	cmp	r3, #2
 8003ebe:	d11d      	bne.n	8003efc <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	2203      	movs	r2, #3
 8003ec6:	4252      	negs	r2, r2
 8003ec8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2201      	movs	r2, #1
 8003ece:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	699b      	ldr	r3, [r3, #24]
 8003ed6:	2203      	movs	r2, #3
 8003ed8:	4013      	ands	r3, r2
 8003eda:	d004      	beq.n	8003ee6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	0018      	movs	r0, r3
 8003ee0:	f000 f8fa 	bl	80040d8 <HAL_TIM_IC_CaptureCallback>
 8003ee4:	e007      	b.n	8003ef6 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	0018      	movs	r0, r3
 8003eea:	f000 f8ed 	bl	80040c8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	0018      	movs	r0, r3
 8003ef2:	f000 f8f9 	bl	80040e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	2200      	movs	r2, #0
 8003efa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	691b      	ldr	r3, [r3, #16]
 8003f02:	2204      	movs	r2, #4
 8003f04:	4013      	ands	r3, r2
 8003f06:	2b04      	cmp	r3, #4
 8003f08:	d125      	bne.n	8003f56 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	68db      	ldr	r3, [r3, #12]
 8003f10:	2204      	movs	r2, #4
 8003f12:	4013      	ands	r3, r2
 8003f14:	2b04      	cmp	r3, #4
 8003f16:	d11e      	bne.n	8003f56 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	2205      	movs	r2, #5
 8003f1e:	4252      	negs	r2, r2
 8003f20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	2202      	movs	r2, #2
 8003f26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	699a      	ldr	r2, [r3, #24]
 8003f2e:	23c0      	movs	r3, #192	; 0xc0
 8003f30:	009b      	lsls	r3, r3, #2
 8003f32:	4013      	ands	r3, r2
 8003f34:	d004      	beq.n	8003f40 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	0018      	movs	r0, r3
 8003f3a:	f000 f8cd 	bl	80040d8 <HAL_TIM_IC_CaptureCallback>
 8003f3e:	e007      	b.n	8003f50 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	0018      	movs	r0, r3
 8003f44:	f000 f8c0 	bl	80040c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	0018      	movs	r0, r3
 8003f4c:	f000 f8cc 	bl	80040e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2200      	movs	r2, #0
 8003f54:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	691b      	ldr	r3, [r3, #16]
 8003f5c:	2208      	movs	r2, #8
 8003f5e:	4013      	ands	r3, r2
 8003f60:	2b08      	cmp	r3, #8
 8003f62:	d124      	bne.n	8003fae <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	68db      	ldr	r3, [r3, #12]
 8003f6a:	2208      	movs	r2, #8
 8003f6c:	4013      	ands	r3, r2
 8003f6e:	2b08      	cmp	r3, #8
 8003f70:	d11d      	bne.n	8003fae <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	2209      	movs	r2, #9
 8003f78:	4252      	negs	r2, r2
 8003f7a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2204      	movs	r2, #4
 8003f80:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	69db      	ldr	r3, [r3, #28]
 8003f88:	2203      	movs	r2, #3
 8003f8a:	4013      	ands	r3, r2
 8003f8c:	d004      	beq.n	8003f98 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	0018      	movs	r0, r3
 8003f92:	f000 f8a1 	bl	80040d8 <HAL_TIM_IC_CaptureCallback>
 8003f96:	e007      	b.n	8003fa8 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	0018      	movs	r0, r3
 8003f9c:	f000 f894 	bl	80040c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	0018      	movs	r0, r3
 8003fa4:	f000 f8a0 	bl	80040e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2200      	movs	r2, #0
 8003fac:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	691b      	ldr	r3, [r3, #16]
 8003fb4:	2210      	movs	r2, #16
 8003fb6:	4013      	ands	r3, r2
 8003fb8:	2b10      	cmp	r3, #16
 8003fba:	d125      	bne.n	8004008 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	68db      	ldr	r3, [r3, #12]
 8003fc2:	2210      	movs	r2, #16
 8003fc4:	4013      	ands	r3, r2
 8003fc6:	2b10      	cmp	r3, #16
 8003fc8:	d11e      	bne.n	8004008 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	2211      	movs	r2, #17
 8003fd0:	4252      	negs	r2, r2
 8003fd2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2208      	movs	r2, #8
 8003fd8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	69da      	ldr	r2, [r3, #28]
 8003fe0:	23c0      	movs	r3, #192	; 0xc0
 8003fe2:	009b      	lsls	r3, r3, #2
 8003fe4:	4013      	ands	r3, r2
 8003fe6:	d004      	beq.n	8003ff2 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	0018      	movs	r0, r3
 8003fec:	f000 f874 	bl	80040d8 <HAL_TIM_IC_CaptureCallback>
 8003ff0:	e007      	b.n	8004002 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	0018      	movs	r0, r3
 8003ff6:	f000 f867 	bl	80040c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	0018      	movs	r0, r3
 8003ffe:	f000 f873 	bl	80040e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2200      	movs	r2, #0
 8004006:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	691b      	ldr	r3, [r3, #16]
 800400e:	2201      	movs	r2, #1
 8004010:	4013      	ands	r3, r2
 8004012:	2b01      	cmp	r3, #1
 8004014:	d10f      	bne.n	8004036 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	68db      	ldr	r3, [r3, #12]
 800401c:	2201      	movs	r2, #1
 800401e:	4013      	ands	r3, r2
 8004020:	2b01      	cmp	r3, #1
 8004022:	d108      	bne.n	8004036 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	2202      	movs	r2, #2
 800402a:	4252      	negs	r2, r2
 800402c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	0018      	movs	r0, r3
 8004032:	f7fd fb4f 	bl	80016d4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	691b      	ldr	r3, [r3, #16]
 800403c:	2280      	movs	r2, #128	; 0x80
 800403e:	4013      	ands	r3, r2
 8004040:	2b80      	cmp	r3, #128	; 0x80
 8004042:	d10f      	bne.n	8004064 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	68db      	ldr	r3, [r3, #12]
 800404a:	2280      	movs	r2, #128	; 0x80
 800404c:	4013      	ands	r3, r2
 800404e:	2b80      	cmp	r3, #128	; 0x80
 8004050:	d108      	bne.n	8004064 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	2281      	movs	r2, #129	; 0x81
 8004058:	4252      	negs	r2, r2
 800405a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	0018      	movs	r0, r3
 8004060:	f000 f8d0 	bl	8004204 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	691b      	ldr	r3, [r3, #16]
 800406a:	2240      	movs	r2, #64	; 0x40
 800406c:	4013      	ands	r3, r2
 800406e:	2b40      	cmp	r3, #64	; 0x40
 8004070:	d10f      	bne.n	8004092 <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	68db      	ldr	r3, [r3, #12]
 8004078:	2240      	movs	r2, #64	; 0x40
 800407a:	4013      	ands	r3, r2
 800407c:	2b40      	cmp	r3, #64	; 0x40
 800407e:	d108      	bne.n	8004092 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	2241      	movs	r2, #65	; 0x41
 8004086:	4252      	negs	r2, r2
 8004088:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	0018      	movs	r0, r3
 800408e:	f000 f833 	bl	80040f8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	691b      	ldr	r3, [r3, #16]
 8004098:	2220      	movs	r2, #32
 800409a:	4013      	ands	r3, r2
 800409c:	2b20      	cmp	r3, #32
 800409e:	d10f      	bne.n	80040c0 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	68db      	ldr	r3, [r3, #12]
 80040a6:	2220      	movs	r2, #32
 80040a8:	4013      	ands	r3, r2
 80040aa:	2b20      	cmp	r3, #32
 80040ac:	d108      	bne.n	80040c0 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	2221      	movs	r2, #33	; 0x21
 80040b4:	4252      	negs	r2, r2
 80040b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	0018      	movs	r0, r3
 80040bc:	f000 f89a 	bl	80041f4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80040c0:	46c0      	nop			; (mov r8, r8)
 80040c2:	46bd      	mov	sp, r7
 80040c4:	b002      	add	sp, #8
 80040c6:	bd80      	pop	{r7, pc}

080040c8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b082      	sub	sp, #8
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80040d0:	46c0      	nop			; (mov r8, r8)
 80040d2:	46bd      	mov	sp, r7
 80040d4:	b002      	add	sp, #8
 80040d6:	bd80      	pop	{r7, pc}

080040d8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b082      	sub	sp, #8
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80040e0:	46c0      	nop			; (mov r8, r8)
 80040e2:	46bd      	mov	sp, r7
 80040e4:	b002      	add	sp, #8
 80040e6:	bd80      	pop	{r7, pc}

080040e8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b082      	sub	sp, #8
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80040f0:	46c0      	nop			; (mov r8, r8)
 80040f2:	46bd      	mov	sp, r7
 80040f4:	b002      	add	sp, #8
 80040f6:	bd80      	pop	{r7, pc}

080040f8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b082      	sub	sp, #8
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004100:	46c0      	nop			; (mov r8, r8)
 8004102:	46bd      	mov	sp, r7
 8004104:	b002      	add	sp, #8
 8004106:	bd80      	pop	{r7, pc}

08004108 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b084      	sub	sp, #16
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
 8004110:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	4a30      	ldr	r2, [pc, #192]	; (80041dc <TIM_Base_SetConfig+0xd4>)
 800411c:	4293      	cmp	r3, r2
 800411e:	d008      	beq.n	8004132 <TIM_Base_SetConfig+0x2a>
 8004120:	687a      	ldr	r2, [r7, #4]
 8004122:	2380      	movs	r3, #128	; 0x80
 8004124:	05db      	lsls	r3, r3, #23
 8004126:	429a      	cmp	r2, r3
 8004128:	d003      	beq.n	8004132 <TIM_Base_SetConfig+0x2a>
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	4a2c      	ldr	r2, [pc, #176]	; (80041e0 <TIM_Base_SetConfig+0xd8>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d108      	bne.n	8004144 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	2270      	movs	r2, #112	; 0x70
 8004136:	4393      	bics	r3, r2
 8004138:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	685b      	ldr	r3, [r3, #4]
 800413e:	68fa      	ldr	r2, [r7, #12]
 8004140:	4313      	orrs	r3, r2
 8004142:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	4a25      	ldr	r2, [pc, #148]	; (80041dc <TIM_Base_SetConfig+0xd4>)
 8004148:	4293      	cmp	r3, r2
 800414a:	d014      	beq.n	8004176 <TIM_Base_SetConfig+0x6e>
 800414c:	687a      	ldr	r2, [r7, #4]
 800414e:	2380      	movs	r3, #128	; 0x80
 8004150:	05db      	lsls	r3, r3, #23
 8004152:	429a      	cmp	r2, r3
 8004154:	d00f      	beq.n	8004176 <TIM_Base_SetConfig+0x6e>
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	4a21      	ldr	r2, [pc, #132]	; (80041e0 <TIM_Base_SetConfig+0xd8>)
 800415a:	4293      	cmp	r3, r2
 800415c:	d00b      	beq.n	8004176 <TIM_Base_SetConfig+0x6e>
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	4a20      	ldr	r2, [pc, #128]	; (80041e4 <TIM_Base_SetConfig+0xdc>)
 8004162:	4293      	cmp	r3, r2
 8004164:	d007      	beq.n	8004176 <TIM_Base_SetConfig+0x6e>
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	4a1f      	ldr	r2, [pc, #124]	; (80041e8 <TIM_Base_SetConfig+0xe0>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d003      	beq.n	8004176 <TIM_Base_SetConfig+0x6e>
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	4a1e      	ldr	r2, [pc, #120]	; (80041ec <TIM_Base_SetConfig+0xe4>)
 8004172:	4293      	cmp	r3, r2
 8004174:	d108      	bne.n	8004188 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	4a1d      	ldr	r2, [pc, #116]	; (80041f0 <TIM_Base_SetConfig+0xe8>)
 800417a:	4013      	ands	r3, r2
 800417c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	68db      	ldr	r3, [r3, #12]
 8004182:	68fa      	ldr	r2, [r7, #12]
 8004184:	4313      	orrs	r3, r2
 8004186:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	2280      	movs	r2, #128	; 0x80
 800418c:	4393      	bics	r3, r2
 800418e:	001a      	movs	r2, r3
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	695b      	ldr	r3, [r3, #20]
 8004194:	4313      	orrs	r3, r2
 8004196:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	68fa      	ldr	r2, [r7, #12]
 800419c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	689a      	ldr	r2, [r3, #8]
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	681a      	ldr	r2, [r3, #0]
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	4a0a      	ldr	r2, [pc, #40]	; (80041dc <TIM_Base_SetConfig+0xd4>)
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d007      	beq.n	80041c6 <TIM_Base_SetConfig+0xbe>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	4a0b      	ldr	r2, [pc, #44]	; (80041e8 <TIM_Base_SetConfig+0xe0>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d003      	beq.n	80041c6 <TIM_Base_SetConfig+0xbe>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	4a0a      	ldr	r2, [pc, #40]	; (80041ec <TIM_Base_SetConfig+0xe4>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d103      	bne.n	80041ce <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	691a      	ldr	r2, [r3, #16]
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2201      	movs	r2, #1
 80041d2:	615a      	str	r2, [r3, #20]
}
 80041d4:	46c0      	nop			; (mov r8, r8)
 80041d6:	46bd      	mov	sp, r7
 80041d8:	b004      	add	sp, #16
 80041da:	bd80      	pop	{r7, pc}
 80041dc:	40012c00 	.word	0x40012c00
 80041e0:	40000400 	.word	0x40000400
 80041e4:	40002000 	.word	0x40002000
 80041e8:	40014400 	.word	0x40014400
 80041ec:	40014800 	.word	0x40014800
 80041f0:	fffffcff 	.word	0xfffffcff

080041f4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b082      	sub	sp, #8
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80041fc:	46c0      	nop			; (mov r8, r8)
 80041fe:	46bd      	mov	sp, r7
 8004200:	b002      	add	sp, #8
 8004202:	bd80      	pop	{r7, pc}

08004204 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004204:	b580      	push	{r7, lr}
 8004206:	b082      	sub	sp, #8
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800420c:	46c0      	nop			; (mov r8, r8)
 800420e:	46bd      	mov	sp, r7
 8004210:	b002      	add	sp, #8
 8004212:	bd80      	pop	{r7, pc}

08004214 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004214:	b580      	push	{r7, lr}
 8004216:	b082      	sub	sp, #8
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d101      	bne.n	8004226 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004222:	2301      	movs	r3, #1
 8004224:	e044      	b.n	80042b0 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800422a:	2b00      	cmp	r3, #0
 800422c:	d107      	bne.n	800423e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	2274      	movs	r2, #116	; 0x74
 8004232:	2100      	movs	r1, #0
 8004234:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	0018      	movs	r0, r3
 800423a:	f7fc fac1 	bl	80007c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2224      	movs	r2, #36	; 0x24
 8004242:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	681a      	ldr	r2, [r3, #0]
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	2101      	movs	r1, #1
 8004250:	438a      	bics	r2, r1
 8004252:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	0018      	movs	r0, r3
 8004258:	f000 fbfe 	bl	8004a58 <UART_SetConfig>
 800425c:	0003      	movs	r3, r0
 800425e:	2b01      	cmp	r3, #1
 8004260:	d101      	bne.n	8004266 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004262:	2301      	movs	r3, #1
 8004264:	e024      	b.n	80042b0 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800426a:	2b00      	cmp	r3, #0
 800426c:	d003      	beq.n	8004276 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	0018      	movs	r0, r3
 8004272:	f000 fd31 	bl	8004cd8 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	685a      	ldr	r2, [r3, #4]
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	490d      	ldr	r1, [pc, #52]	; (80042b8 <HAL_UART_Init+0xa4>)
 8004282:	400a      	ands	r2, r1
 8004284:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	689a      	ldr	r2, [r3, #8]
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	212a      	movs	r1, #42	; 0x2a
 8004292:	438a      	bics	r2, r1
 8004294:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	681a      	ldr	r2, [r3, #0]
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	2101      	movs	r1, #1
 80042a2:	430a      	orrs	r2, r1
 80042a4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	0018      	movs	r0, r3
 80042aa:	f000 fdc9 	bl	8004e40 <UART_CheckIdleState>
 80042ae:	0003      	movs	r3, r0
}
 80042b0:	0018      	movs	r0, r3
 80042b2:	46bd      	mov	sp, r7
 80042b4:	b002      	add	sp, #8
 80042b6:	bd80      	pop	{r7, pc}
 80042b8:	ffffb7ff 	.word	0xffffb7ff

080042bc <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	b088      	sub	sp, #32
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	60f8      	str	r0, [r7, #12]
 80042c4:	60b9      	str	r1, [r7, #8]
 80042c6:	1dbb      	adds	r3, r7, #6
 80042c8:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80042ce:	2b20      	cmp	r3, #32
 80042d0:	d000      	beq.n	80042d4 <HAL_UART_Transmit_IT+0x18>
 80042d2:	e06a      	b.n	80043aa <HAL_UART_Transmit_IT+0xee>
  {
    if ((pData == NULL) || (Size == 0U))
 80042d4:	68bb      	ldr	r3, [r7, #8]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d003      	beq.n	80042e2 <HAL_UART_Transmit_IT+0x26>
 80042da:	1dbb      	adds	r3, r7, #6
 80042dc:	881b      	ldrh	r3, [r3, #0]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d101      	bne.n	80042e6 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80042e2:	2301      	movs	r3, #1
 80042e4:	e062      	b.n	80043ac <HAL_UART_Transmit_IT+0xf0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	689a      	ldr	r2, [r3, #8]
 80042ea:	2380      	movs	r3, #128	; 0x80
 80042ec:	015b      	lsls	r3, r3, #5
 80042ee:	429a      	cmp	r2, r3
 80042f0:	d109      	bne.n	8004306 <HAL_UART_Transmit_IT+0x4a>
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	691b      	ldr	r3, [r3, #16]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d105      	bne.n	8004306 <HAL_UART_Transmit_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80042fa:	68bb      	ldr	r3, [r7, #8]
 80042fc:	2201      	movs	r2, #1
 80042fe:	4013      	ands	r3, r2
 8004300:	d001      	beq.n	8004306 <HAL_UART_Transmit_IT+0x4a>
      {
        return  HAL_ERROR;
 8004302:	2301      	movs	r3, #1
 8004304:	e052      	b.n	80043ac <HAL_UART_Transmit_IT+0xf0>
      }
    }

    __HAL_LOCK(huart);
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	2274      	movs	r2, #116	; 0x74
 800430a:	5c9b      	ldrb	r3, [r3, r2]
 800430c:	2b01      	cmp	r3, #1
 800430e:	d101      	bne.n	8004314 <HAL_UART_Transmit_IT+0x58>
 8004310:	2302      	movs	r3, #2
 8004312:	e04b      	b.n	80043ac <HAL_UART_Transmit_IT+0xf0>
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	2274      	movs	r2, #116	; 0x74
 8004318:	2101      	movs	r1, #1
 800431a:	5499      	strb	r1, [r3, r2]

    huart->pTxBuffPtr  = pData;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	68ba      	ldr	r2, [r7, #8]
 8004320:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	1dba      	adds	r2, r7, #6
 8004326:	2150      	movs	r1, #80	; 0x50
 8004328:	8812      	ldrh	r2, [r2, #0]
 800432a:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	1dba      	adds	r2, r7, #6
 8004330:	2152      	movs	r1, #82	; 0x52
 8004332:	8812      	ldrh	r2, [r2, #0]
 8004334:	525a      	strh	r2, [r3, r1]
    huart->TxISR       = NULL;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	2200      	movs	r2, #0
 800433a:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	2280      	movs	r2, #128	; 0x80
 8004340:	2100      	movs	r1, #0
 8004342:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	2221      	movs	r2, #33	; 0x21
 8004348:	679a      	str	r2, [r3, #120]	; 0x78

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	689a      	ldr	r2, [r3, #8]
 800434e:	2380      	movs	r3, #128	; 0x80
 8004350:	015b      	lsls	r3, r3, #5
 8004352:	429a      	cmp	r2, r3
 8004354:	d107      	bne.n	8004366 <HAL_UART_Transmit_IT+0xaa>
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	691b      	ldr	r3, [r3, #16]
 800435a:	2b00      	cmp	r3, #0
 800435c:	d103      	bne.n	8004366 <HAL_UART_Transmit_IT+0xaa>
    {
      huart->TxISR = UART_TxISR_16BIT;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	4a14      	ldr	r2, [pc, #80]	; (80043b4 <HAL_UART_Transmit_IT+0xf8>)
 8004362:	669a      	str	r2, [r3, #104]	; 0x68
 8004364:	e002      	b.n	800436c <HAL_UART_Transmit_IT+0xb0>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	4a13      	ldr	r2, [pc, #76]	; (80043b8 <HAL_UART_Transmit_IT+0xfc>)
 800436a:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	2274      	movs	r2, #116	; 0x74
 8004370:	2100      	movs	r1, #0
 8004372:	5499      	strb	r1, [r3, r2]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004374:	f3ef 8310 	mrs	r3, PRIMASK
 8004378:	613b      	str	r3, [r7, #16]
  return(result);
 800437a:	693b      	ldr	r3, [r7, #16]

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800437c:	61fb      	str	r3, [r7, #28]
 800437e:	2301      	movs	r3, #1
 8004380:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004382:	697b      	ldr	r3, [r7, #20]
 8004384:	f383 8810 	msr	PRIMASK, r3
}
 8004388:	46c0      	nop			; (mov r8, r8)
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	681a      	ldr	r2, [r3, #0]
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	2180      	movs	r1, #128	; 0x80
 8004396:	430a      	orrs	r2, r1
 8004398:	601a      	str	r2, [r3, #0]
 800439a:	69fb      	ldr	r3, [r7, #28]
 800439c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800439e:	69bb      	ldr	r3, [r7, #24]
 80043a0:	f383 8810 	msr	PRIMASK, r3
}
 80043a4:	46c0      	nop			; (mov r8, r8)

    return HAL_OK;
 80043a6:	2300      	movs	r3, #0
 80043a8:	e000      	b.n	80043ac <HAL_UART_Transmit_IT+0xf0>
  }
  else
  {
    return HAL_BUSY;
 80043aa:	2302      	movs	r3, #2
  }
}
 80043ac:	0018      	movs	r0, r3
 80043ae:	46bd      	mov	sp, r7
 80043b0:	b008      	add	sp, #32
 80043b2:	bd80      	pop	{r7, pc}
 80043b4:	0800535f 	.word	0x0800535f
 80043b8:	080052ab 	.word	0x080052ab

080043bc <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80043bc:	b580      	push	{r7, lr}
 80043be:	b088      	sub	sp, #32
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	60f8      	str	r0, [r7, #12]
 80043c4:	60b9      	str	r1, [r7, #8]
 80043c6:	1dbb      	adds	r3, r7, #6
 80043c8:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80043ce:	2b20      	cmp	r3, #32
 80043d0:	d150      	bne.n	8004474 <HAL_UART_Receive_IT+0xb8>
  {
    if ((pData == NULL) || (Size == 0U))
 80043d2:	68bb      	ldr	r3, [r7, #8]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d003      	beq.n	80043e0 <HAL_UART_Receive_IT+0x24>
 80043d8:	1dbb      	adds	r3, r7, #6
 80043da:	881b      	ldrh	r3, [r3, #0]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d101      	bne.n	80043e4 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80043e0:	2301      	movs	r3, #1
 80043e2:	e048      	b.n	8004476 <HAL_UART_Receive_IT+0xba>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	689a      	ldr	r2, [r3, #8]
 80043e8:	2380      	movs	r3, #128	; 0x80
 80043ea:	015b      	lsls	r3, r3, #5
 80043ec:	429a      	cmp	r2, r3
 80043ee:	d109      	bne.n	8004404 <HAL_UART_Receive_IT+0x48>
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	691b      	ldr	r3, [r3, #16]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d105      	bne.n	8004404 <HAL_UART_Receive_IT+0x48>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80043f8:	68bb      	ldr	r3, [r7, #8]
 80043fa:	2201      	movs	r2, #1
 80043fc:	4013      	ands	r3, r2
 80043fe:	d001      	beq.n	8004404 <HAL_UART_Receive_IT+0x48>
      {
        return  HAL_ERROR;
 8004400:	2301      	movs	r3, #1
 8004402:	e038      	b.n	8004476 <HAL_UART_Receive_IT+0xba>
      }
    }

    __HAL_LOCK(huart);
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	2274      	movs	r2, #116	; 0x74
 8004408:	5c9b      	ldrb	r3, [r3, r2]
 800440a:	2b01      	cmp	r3, #1
 800440c:	d101      	bne.n	8004412 <HAL_UART_Receive_IT+0x56>
 800440e:	2302      	movs	r3, #2
 8004410:	e031      	b.n	8004476 <HAL_UART_Receive_IT+0xba>
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	2274      	movs	r2, #116	; 0x74
 8004416:	2101      	movs	r1, #1
 8004418:	5499      	strb	r1, [r3, r2]

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	2200      	movs	r2, #0
 800441e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	685a      	ldr	r2, [r3, #4]
 8004426:	2380      	movs	r3, #128	; 0x80
 8004428:	041b      	lsls	r3, r3, #16
 800442a:	4013      	ands	r3, r2
 800442c:	d019      	beq.n	8004462 <HAL_UART_Receive_IT+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800442e:	f3ef 8310 	mrs	r3, PRIMASK
 8004432:	613b      	str	r3, [r7, #16]
  return(result);
 8004434:	693b      	ldr	r3, [r7, #16]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004436:	61fb      	str	r3, [r7, #28]
 8004438:	2301      	movs	r3, #1
 800443a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800443c:	697b      	ldr	r3, [r7, #20]
 800443e:	f383 8810 	msr	PRIMASK, r3
}
 8004442:	46c0      	nop			; (mov r8, r8)
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	681a      	ldr	r2, [r3, #0]
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	2180      	movs	r1, #128	; 0x80
 8004450:	04c9      	lsls	r1, r1, #19
 8004452:	430a      	orrs	r2, r1
 8004454:	601a      	str	r2, [r3, #0]
 8004456:	69fb      	ldr	r3, [r7, #28]
 8004458:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800445a:	69bb      	ldr	r3, [r7, #24]
 800445c:	f383 8810 	msr	PRIMASK, r3
}
 8004460:	46c0      	nop			; (mov r8, r8)
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004462:	1dbb      	adds	r3, r7, #6
 8004464:	881a      	ldrh	r2, [r3, #0]
 8004466:	68b9      	ldr	r1, [r7, #8]
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	0018      	movs	r0, r3
 800446c:	f000 fdf4 	bl	8005058 <UART_Start_Receive_IT>
 8004470:	0003      	movs	r3, r0
 8004472:	e000      	b.n	8004476 <HAL_UART_Receive_IT+0xba>
  }
  else
  {
    return HAL_BUSY;
 8004474:	2302      	movs	r3, #2
  }
}
 8004476:	0018      	movs	r0, r3
 8004478:	46bd      	mov	sp, r7
 800447a:	b008      	add	sp, #32
 800447c:	bd80      	pop	{r7, pc}
	...

08004480 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004480:	b590      	push	{r4, r7, lr}
 8004482:	b0ab      	sub	sp, #172	; 0xac
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	69db      	ldr	r3, [r3, #28]
 800448e:	22a4      	movs	r2, #164	; 0xa4
 8004490:	18b9      	adds	r1, r7, r2
 8004492:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	20a0      	movs	r0, #160	; 0xa0
 800449c:	1839      	adds	r1, r7, r0
 800449e:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	689b      	ldr	r3, [r3, #8]
 80044a6:	219c      	movs	r1, #156	; 0x9c
 80044a8:	1879      	adds	r1, r7, r1
 80044aa:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80044ac:	0011      	movs	r1, r2
 80044ae:	18bb      	adds	r3, r7, r2
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	4a99      	ldr	r2, [pc, #612]	; (8004718 <HAL_UART_IRQHandler+0x298>)
 80044b4:	4013      	ands	r3, r2
 80044b6:	2298      	movs	r2, #152	; 0x98
 80044b8:	18bc      	adds	r4, r7, r2
 80044ba:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 80044bc:	18bb      	adds	r3, r7, r2
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d114      	bne.n	80044ee <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80044c4:	187b      	adds	r3, r7, r1
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	2220      	movs	r2, #32
 80044ca:	4013      	ands	r3, r2
 80044cc:	d00f      	beq.n	80044ee <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80044ce:	183b      	adds	r3, r7, r0
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	2220      	movs	r2, #32
 80044d4:	4013      	ands	r3, r2
 80044d6:	d00a      	beq.n	80044ee <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d100      	bne.n	80044e2 <HAL_UART_IRQHandler+0x62>
 80044e0:	e296      	b.n	8004a10 <HAL_UART_IRQHandler+0x590>
      {
        huart->RxISR(huart);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80044e6:	687a      	ldr	r2, [r7, #4]
 80044e8:	0010      	movs	r0, r2
 80044ea:	4798      	blx	r3
      }
      return;
 80044ec:	e290      	b.n	8004a10 <HAL_UART_IRQHandler+0x590>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80044ee:	2398      	movs	r3, #152	; 0x98
 80044f0:	18fb      	adds	r3, r7, r3
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d100      	bne.n	80044fa <HAL_UART_IRQHandler+0x7a>
 80044f8:	e114      	b.n	8004724 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80044fa:	239c      	movs	r3, #156	; 0x9c
 80044fc:	18fb      	adds	r3, r7, r3
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	2201      	movs	r2, #1
 8004502:	4013      	ands	r3, r2
 8004504:	d106      	bne.n	8004514 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004506:	23a0      	movs	r3, #160	; 0xa0
 8004508:	18fb      	adds	r3, r7, r3
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	4a83      	ldr	r2, [pc, #524]	; (800471c <HAL_UART_IRQHandler+0x29c>)
 800450e:	4013      	ands	r3, r2
 8004510:	d100      	bne.n	8004514 <HAL_UART_IRQHandler+0x94>
 8004512:	e107      	b.n	8004724 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004514:	23a4      	movs	r3, #164	; 0xa4
 8004516:	18fb      	adds	r3, r7, r3
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	2201      	movs	r2, #1
 800451c:	4013      	ands	r3, r2
 800451e:	d012      	beq.n	8004546 <HAL_UART_IRQHandler+0xc6>
 8004520:	23a0      	movs	r3, #160	; 0xa0
 8004522:	18fb      	adds	r3, r7, r3
 8004524:	681a      	ldr	r2, [r3, #0]
 8004526:	2380      	movs	r3, #128	; 0x80
 8004528:	005b      	lsls	r3, r3, #1
 800452a:	4013      	ands	r3, r2
 800452c:	d00b      	beq.n	8004546 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	2201      	movs	r2, #1
 8004534:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	2280      	movs	r2, #128	; 0x80
 800453a:	589b      	ldr	r3, [r3, r2]
 800453c:	2201      	movs	r2, #1
 800453e:	431a      	orrs	r2, r3
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2180      	movs	r1, #128	; 0x80
 8004544:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004546:	23a4      	movs	r3, #164	; 0xa4
 8004548:	18fb      	adds	r3, r7, r3
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	2202      	movs	r2, #2
 800454e:	4013      	ands	r3, r2
 8004550:	d011      	beq.n	8004576 <HAL_UART_IRQHandler+0xf6>
 8004552:	239c      	movs	r3, #156	; 0x9c
 8004554:	18fb      	adds	r3, r7, r3
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	2201      	movs	r2, #1
 800455a:	4013      	ands	r3, r2
 800455c:	d00b      	beq.n	8004576 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	2202      	movs	r2, #2
 8004564:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2280      	movs	r2, #128	; 0x80
 800456a:	589b      	ldr	r3, [r3, r2]
 800456c:	2204      	movs	r2, #4
 800456e:	431a      	orrs	r2, r3
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2180      	movs	r1, #128	; 0x80
 8004574:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004576:	23a4      	movs	r3, #164	; 0xa4
 8004578:	18fb      	adds	r3, r7, r3
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	2204      	movs	r2, #4
 800457e:	4013      	ands	r3, r2
 8004580:	d011      	beq.n	80045a6 <HAL_UART_IRQHandler+0x126>
 8004582:	239c      	movs	r3, #156	; 0x9c
 8004584:	18fb      	adds	r3, r7, r3
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	2201      	movs	r2, #1
 800458a:	4013      	ands	r3, r2
 800458c:	d00b      	beq.n	80045a6 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	2204      	movs	r2, #4
 8004594:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	2280      	movs	r2, #128	; 0x80
 800459a:	589b      	ldr	r3, [r3, r2]
 800459c:	2202      	movs	r2, #2
 800459e:	431a      	orrs	r2, r3
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2180      	movs	r1, #128	; 0x80
 80045a4:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80045a6:	23a4      	movs	r3, #164	; 0xa4
 80045a8:	18fb      	adds	r3, r7, r3
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	2208      	movs	r2, #8
 80045ae:	4013      	ands	r3, r2
 80045b0:	d017      	beq.n	80045e2 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80045b2:	23a0      	movs	r3, #160	; 0xa0
 80045b4:	18fb      	adds	r3, r7, r3
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	2220      	movs	r2, #32
 80045ba:	4013      	ands	r3, r2
 80045bc:	d105      	bne.n	80045ca <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80045be:	239c      	movs	r3, #156	; 0x9c
 80045c0:	18fb      	adds	r3, r7, r3
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	2201      	movs	r2, #1
 80045c6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80045c8:	d00b      	beq.n	80045e2 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	2208      	movs	r2, #8
 80045d0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	2280      	movs	r2, #128	; 0x80
 80045d6:	589b      	ldr	r3, [r3, r2]
 80045d8:	2208      	movs	r2, #8
 80045da:	431a      	orrs	r2, r3
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2180      	movs	r1, #128	; 0x80
 80045e0:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80045e2:	23a4      	movs	r3, #164	; 0xa4
 80045e4:	18fb      	adds	r3, r7, r3
 80045e6:	681a      	ldr	r2, [r3, #0]
 80045e8:	2380      	movs	r3, #128	; 0x80
 80045ea:	011b      	lsls	r3, r3, #4
 80045ec:	4013      	ands	r3, r2
 80045ee:	d013      	beq.n	8004618 <HAL_UART_IRQHandler+0x198>
 80045f0:	23a0      	movs	r3, #160	; 0xa0
 80045f2:	18fb      	adds	r3, r7, r3
 80045f4:	681a      	ldr	r2, [r3, #0]
 80045f6:	2380      	movs	r3, #128	; 0x80
 80045f8:	04db      	lsls	r3, r3, #19
 80045fa:	4013      	ands	r3, r2
 80045fc:	d00c      	beq.n	8004618 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	2280      	movs	r2, #128	; 0x80
 8004604:	0112      	lsls	r2, r2, #4
 8004606:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2280      	movs	r2, #128	; 0x80
 800460c:	589b      	ldr	r3, [r3, r2]
 800460e:	2220      	movs	r2, #32
 8004610:	431a      	orrs	r2, r3
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2180      	movs	r1, #128	; 0x80
 8004616:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2280      	movs	r2, #128	; 0x80
 800461c:	589b      	ldr	r3, [r3, r2]
 800461e:	2b00      	cmp	r3, #0
 8004620:	d100      	bne.n	8004624 <HAL_UART_IRQHandler+0x1a4>
 8004622:	e1f7      	b.n	8004a14 <HAL_UART_IRQHandler+0x594>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004624:	23a4      	movs	r3, #164	; 0xa4
 8004626:	18fb      	adds	r3, r7, r3
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	2220      	movs	r2, #32
 800462c:	4013      	ands	r3, r2
 800462e:	d00e      	beq.n	800464e <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004630:	23a0      	movs	r3, #160	; 0xa0
 8004632:	18fb      	adds	r3, r7, r3
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	2220      	movs	r2, #32
 8004638:	4013      	ands	r3, r2
 800463a:	d008      	beq.n	800464e <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004640:	2b00      	cmp	r3, #0
 8004642:	d004      	beq.n	800464e <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004648:	687a      	ldr	r2, [r7, #4]
 800464a:	0010      	movs	r0, r2
 800464c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	2280      	movs	r2, #128	; 0x80
 8004652:	589b      	ldr	r3, [r3, r2]
 8004654:	2194      	movs	r1, #148	; 0x94
 8004656:	187a      	adds	r2, r7, r1
 8004658:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	689b      	ldr	r3, [r3, #8]
 8004660:	2240      	movs	r2, #64	; 0x40
 8004662:	4013      	ands	r3, r2
 8004664:	2b40      	cmp	r3, #64	; 0x40
 8004666:	d004      	beq.n	8004672 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004668:	187b      	adds	r3, r7, r1
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	2228      	movs	r2, #40	; 0x28
 800466e:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004670:	d047      	beq.n	8004702 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	0018      	movs	r0, r3
 8004676:	f000 fd9f 	bl	80051b8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	689b      	ldr	r3, [r3, #8]
 8004680:	2240      	movs	r2, #64	; 0x40
 8004682:	4013      	ands	r3, r2
 8004684:	2b40      	cmp	r3, #64	; 0x40
 8004686:	d137      	bne.n	80046f8 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004688:	f3ef 8310 	mrs	r3, PRIMASK
 800468c:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 800468e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004690:	2090      	movs	r0, #144	; 0x90
 8004692:	183a      	adds	r2, r7, r0
 8004694:	6013      	str	r3, [r2, #0]
 8004696:	2301      	movs	r3, #1
 8004698:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800469a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800469c:	f383 8810 	msr	PRIMASK, r3
}
 80046a0:	46c0      	nop			; (mov r8, r8)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	689a      	ldr	r2, [r3, #8]
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	2140      	movs	r1, #64	; 0x40
 80046ae:	438a      	bics	r2, r1
 80046b0:	609a      	str	r2, [r3, #8]
 80046b2:	183b      	adds	r3, r7, r0
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046b8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80046ba:	f383 8810 	msr	PRIMASK, r3
}
 80046be:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d012      	beq.n	80046ee <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046cc:	4a14      	ldr	r2, [pc, #80]	; (8004720 <HAL_UART_IRQHandler+0x2a0>)
 80046ce:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046d4:	0018      	movs	r0, r3
 80046d6:	f7fd fd7b 	bl	80021d0 <HAL_DMA_Abort_IT>
 80046da:	1e03      	subs	r3, r0, #0
 80046dc:	d01a      	beq.n	8004714 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046e8:	0018      	movs	r0, r3
 80046ea:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046ec:	e012      	b.n	8004714 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	0018      	movs	r0, r3
 80046f2:	f000 f99d 	bl	8004a30 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046f6:	e00d      	b.n	8004714 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	0018      	movs	r0, r3
 80046fc:	f000 f998 	bl	8004a30 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004700:	e008      	b.n	8004714 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	0018      	movs	r0, r3
 8004706:	f000 f993 	bl	8004a30 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	2280      	movs	r2, #128	; 0x80
 800470e:	2100      	movs	r1, #0
 8004710:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8004712:	e17f      	b.n	8004a14 <HAL_UART_IRQHandler+0x594>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004714:	46c0      	nop			; (mov r8, r8)
    return;
 8004716:	e17d      	b.n	8004a14 <HAL_UART_IRQHandler+0x594>
 8004718:	0000080f 	.word	0x0000080f
 800471c:	04000120 	.word	0x04000120
 8004720:	0800527d 	.word	0x0800527d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004728:	2b01      	cmp	r3, #1
 800472a:	d000      	beq.n	800472e <HAL_UART_IRQHandler+0x2ae>
 800472c:	e131      	b.n	8004992 <HAL_UART_IRQHandler+0x512>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800472e:	23a4      	movs	r3, #164	; 0xa4
 8004730:	18fb      	adds	r3, r7, r3
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	2210      	movs	r2, #16
 8004736:	4013      	ands	r3, r2
 8004738:	d100      	bne.n	800473c <HAL_UART_IRQHandler+0x2bc>
 800473a:	e12a      	b.n	8004992 <HAL_UART_IRQHandler+0x512>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800473c:	23a0      	movs	r3, #160	; 0xa0
 800473e:	18fb      	adds	r3, r7, r3
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	2210      	movs	r2, #16
 8004744:	4013      	ands	r3, r2
 8004746:	d100      	bne.n	800474a <HAL_UART_IRQHandler+0x2ca>
 8004748:	e123      	b.n	8004992 <HAL_UART_IRQHandler+0x512>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	2210      	movs	r2, #16
 8004750:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	689b      	ldr	r3, [r3, #8]
 8004758:	2240      	movs	r2, #64	; 0x40
 800475a:	4013      	ands	r3, r2
 800475c:	2b40      	cmp	r3, #64	; 0x40
 800475e:	d000      	beq.n	8004762 <HAL_UART_IRQHandler+0x2e2>
 8004760:	e09b      	b.n	800489a <HAL_UART_IRQHandler+0x41a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	685a      	ldr	r2, [r3, #4]
 800476a:	217e      	movs	r1, #126	; 0x7e
 800476c:	187b      	adds	r3, r7, r1
 800476e:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8004770:	187b      	adds	r3, r7, r1
 8004772:	881b      	ldrh	r3, [r3, #0]
 8004774:	2b00      	cmp	r3, #0
 8004776:	d100      	bne.n	800477a <HAL_UART_IRQHandler+0x2fa>
 8004778:	e14e      	b.n	8004a18 <HAL_UART_IRQHandler+0x598>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2258      	movs	r2, #88	; 0x58
 800477e:	5a9b      	ldrh	r3, [r3, r2]
 8004780:	187a      	adds	r2, r7, r1
 8004782:	8812      	ldrh	r2, [r2, #0]
 8004784:	429a      	cmp	r2, r3
 8004786:	d300      	bcc.n	800478a <HAL_UART_IRQHandler+0x30a>
 8004788:	e146      	b.n	8004a18 <HAL_UART_IRQHandler+0x598>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	187a      	adds	r2, r7, r1
 800478e:	215a      	movs	r1, #90	; 0x5a
 8004790:	8812      	ldrh	r2, [r2, #0]
 8004792:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004798:	699b      	ldr	r3, [r3, #24]
 800479a:	2b20      	cmp	r3, #32
 800479c:	d06e      	beq.n	800487c <HAL_UART_IRQHandler+0x3fc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800479e:	f3ef 8310 	mrs	r3, PRIMASK
 80047a2:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 80047a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80047a6:	67bb      	str	r3, [r7, #120]	; 0x78
 80047a8:	2301      	movs	r3, #1
 80047aa:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047ae:	f383 8810 	msr	PRIMASK, r3
}
 80047b2:	46c0      	nop			; (mov r8, r8)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	681a      	ldr	r2, [r3, #0]
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	499a      	ldr	r1, [pc, #616]	; (8004a28 <HAL_UART_IRQHandler+0x5a8>)
 80047c0:	400a      	ands	r2, r1
 80047c2:	601a      	str	r2, [r3, #0]
 80047c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80047c6:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047ca:	f383 8810 	msr	PRIMASK, r3
}
 80047ce:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80047d0:	f3ef 8310 	mrs	r3, PRIMASK
 80047d4:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 80047d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047d8:	677b      	str	r3, [r7, #116]	; 0x74
 80047da:	2301      	movs	r3, #1
 80047dc:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80047e0:	f383 8810 	msr	PRIMASK, r3
}
 80047e4:	46c0      	nop			; (mov r8, r8)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	689a      	ldr	r2, [r3, #8]
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	2101      	movs	r1, #1
 80047f2:	438a      	bics	r2, r1
 80047f4:	609a      	str	r2, [r3, #8]
 80047f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80047f8:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80047fc:	f383 8810 	msr	PRIMASK, r3
}
 8004800:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004802:	f3ef 8310 	mrs	r3, PRIMASK
 8004806:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8004808:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800480a:	673b      	str	r3, [r7, #112]	; 0x70
 800480c:	2301      	movs	r3, #1
 800480e:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004810:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004812:	f383 8810 	msr	PRIMASK, r3
}
 8004816:	46c0      	nop			; (mov r8, r8)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	689a      	ldr	r2, [r3, #8]
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	2140      	movs	r1, #64	; 0x40
 8004824:	438a      	bics	r2, r1
 8004826:	609a      	str	r2, [r3, #8]
 8004828:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800482a:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800482c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800482e:	f383 8810 	msr	PRIMASK, r3
}
 8004832:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2220      	movs	r2, #32
 8004838:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	2200      	movs	r2, #0
 800483e:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004840:	f3ef 8310 	mrs	r3, PRIMASK
 8004844:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8004846:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004848:	66fb      	str	r3, [r7, #108]	; 0x6c
 800484a:	2301      	movs	r3, #1
 800484c:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800484e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004850:	f383 8810 	msr	PRIMASK, r3
}
 8004854:	46c0      	nop			; (mov r8, r8)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	681a      	ldr	r2, [r3, #0]
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	2110      	movs	r1, #16
 8004862:	438a      	bics	r2, r1
 8004864:	601a      	str	r2, [r3, #0]
 8004866:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004868:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800486a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800486c:	f383 8810 	msr	PRIMASK, r3
}
 8004870:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004876:	0018      	movs	r0, r3
 8004878:	f7fd fc72 	bl	8002160 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2258      	movs	r2, #88	; 0x58
 8004880:	5a9a      	ldrh	r2, [r3, r2]
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	215a      	movs	r1, #90	; 0x5a
 8004886:	5a5b      	ldrh	r3, [r3, r1]
 8004888:	b29b      	uxth	r3, r3
 800488a:	1ad3      	subs	r3, r2, r3
 800488c:	b29a      	uxth	r2, r3
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	0011      	movs	r1, r2
 8004892:	0018      	movs	r0, r3
 8004894:	f000 f8d4 	bl	8004a40 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004898:	e0be      	b.n	8004a18 <HAL_UART_IRQHandler+0x598>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	2258      	movs	r2, #88	; 0x58
 800489e:	5a99      	ldrh	r1, [r3, r2]
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	225a      	movs	r2, #90	; 0x5a
 80048a4:	5a9b      	ldrh	r3, [r3, r2]
 80048a6:	b29a      	uxth	r2, r3
 80048a8:	208e      	movs	r0, #142	; 0x8e
 80048aa:	183b      	adds	r3, r7, r0
 80048ac:	1a8a      	subs	r2, r1, r2
 80048ae:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	225a      	movs	r2, #90	; 0x5a
 80048b4:	5a9b      	ldrh	r3, [r3, r2]
 80048b6:	b29b      	uxth	r3, r3
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d100      	bne.n	80048be <HAL_UART_IRQHandler+0x43e>
 80048bc:	e0ae      	b.n	8004a1c <HAL_UART_IRQHandler+0x59c>
          && (nb_rx_data > 0U))
 80048be:	183b      	adds	r3, r7, r0
 80048c0:	881b      	ldrh	r3, [r3, #0]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d100      	bne.n	80048c8 <HAL_UART_IRQHandler+0x448>
 80048c6:	e0a9      	b.n	8004a1c <HAL_UART_IRQHandler+0x59c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80048c8:	f3ef 8310 	mrs	r3, PRIMASK
 80048cc:	60fb      	str	r3, [r7, #12]
  return(result);
 80048ce:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80048d0:	2488      	movs	r4, #136	; 0x88
 80048d2:	193a      	adds	r2, r7, r4
 80048d4:	6013      	str	r3, [r2, #0]
 80048d6:	2301      	movs	r3, #1
 80048d8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048da:	693b      	ldr	r3, [r7, #16]
 80048dc:	f383 8810 	msr	PRIMASK, r3
}
 80048e0:	46c0      	nop			; (mov r8, r8)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	681a      	ldr	r2, [r3, #0]
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	494f      	ldr	r1, [pc, #316]	; (8004a2c <HAL_UART_IRQHandler+0x5ac>)
 80048ee:	400a      	ands	r2, r1
 80048f0:	601a      	str	r2, [r3, #0]
 80048f2:	193b      	adds	r3, r7, r4
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048f8:	697b      	ldr	r3, [r7, #20]
 80048fa:	f383 8810 	msr	PRIMASK, r3
}
 80048fe:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004900:	f3ef 8310 	mrs	r3, PRIMASK
 8004904:	61bb      	str	r3, [r7, #24]
  return(result);
 8004906:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004908:	2484      	movs	r4, #132	; 0x84
 800490a:	193a      	adds	r2, r7, r4
 800490c:	6013      	str	r3, [r2, #0]
 800490e:	2301      	movs	r3, #1
 8004910:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004912:	69fb      	ldr	r3, [r7, #28]
 8004914:	f383 8810 	msr	PRIMASK, r3
}
 8004918:	46c0      	nop			; (mov r8, r8)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	689a      	ldr	r2, [r3, #8]
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	2101      	movs	r1, #1
 8004926:	438a      	bics	r2, r1
 8004928:	609a      	str	r2, [r3, #8]
 800492a:	193b      	adds	r3, r7, r4
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004930:	6a3b      	ldr	r3, [r7, #32]
 8004932:	f383 8810 	msr	PRIMASK, r3
}
 8004936:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2220      	movs	r2, #32
 800493c:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2200      	movs	r2, #0
 8004942:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2200      	movs	r2, #0
 8004948:	665a      	str	r2, [r3, #100]	; 0x64
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800494a:	f3ef 8310 	mrs	r3, PRIMASK
 800494e:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8004950:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004952:	2480      	movs	r4, #128	; 0x80
 8004954:	193a      	adds	r2, r7, r4
 8004956:	6013      	str	r3, [r2, #0]
 8004958:	2301      	movs	r3, #1
 800495a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800495c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800495e:	f383 8810 	msr	PRIMASK, r3
}
 8004962:	46c0      	nop			; (mov r8, r8)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	681a      	ldr	r2, [r3, #0]
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	2110      	movs	r1, #16
 8004970:	438a      	bics	r2, r1
 8004972:	601a      	str	r2, [r3, #0]
 8004974:	193b      	adds	r3, r7, r4
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800497a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800497c:	f383 8810 	msr	PRIMASK, r3
}
 8004980:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004982:	183b      	adds	r3, r7, r0
 8004984:	881a      	ldrh	r2, [r3, #0]
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	0011      	movs	r1, r2
 800498a:	0018      	movs	r0, r3
 800498c:	f000 f858 	bl	8004a40 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004990:	e044      	b.n	8004a1c <HAL_UART_IRQHandler+0x59c>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004992:	23a4      	movs	r3, #164	; 0xa4
 8004994:	18fb      	adds	r3, r7, r3
 8004996:	681a      	ldr	r2, [r3, #0]
 8004998:	2380      	movs	r3, #128	; 0x80
 800499a:	035b      	lsls	r3, r3, #13
 800499c:	4013      	ands	r3, r2
 800499e:	d010      	beq.n	80049c2 <HAL_UART_IRQHandler+0x542>
 80049a0:	239c      	movs	r3, #156	; 0x9c
 80049a2:	18fb      	adds	r3, r7, r3
 80049a4:	681a      	ldr	r2, [r3, #0]
 80049a6:	2380      	movs	r3, #128	; 0x80
 80049a8:	03db      	lsls	r3, r3, #15
 80049aa:	4013      	ands	r3, r2
 80049ac:	d009      	beq.n	80049c2 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	2280      	movs	r2, #128	; 0x80
 80049b4:	0352      	lsls	r2, r2, #13
 80049b6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	0018      	movs	r0, r3
 80049bc:	f000 fec0 	bl	8005740 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80049c0:	e02f      	b.n	8004a22 <HAL_UART_IRQHandler+0x5a2>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80049c2:	23a4      	movs	r3, #164	; 0xa4
 80049c4:	18fb      	adds	r3, r7, r3
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	2280      	movs	r2, #128	; 0x80
 80049ca:	4013      	ands	r3, r2
 80049cc:	d00f      	beq.n	80049ee <HAL_UART_IRQHandler+0x56e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80049ce:	23a0      	movs	r3, #160	; 0xa0
 80049d0:	18fb      	adds	r3, r7, r3
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	2280      	movs	r2, #128	; 0x80
 80049d6:	4013      	ands	r3, r2
 80049d8:	d009      	beq.n	80049ee <HAL_UART_IRQHandler+0x56e>
  {
    if (huart->TxISR != NULL)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d01e      	beq.n	8004a20 <HAL_UART_IRQHandler+0x5a0>
    {
      huart->TxISR(huart);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80049e6:	687a      	ldr	r2, [r7, #4]
 80049e8:	0010      	movs	r0, r2
 80049ea:	4798      	blx	r3
    }
    return;
 80049ec:	e018      	b.n	8004a20 <HAL_UART_IRQHandler+0x5a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80049ee:	23a4      	movs	r3, #164	; 0xa4
 80049f0:	18fb      	adds	r3, r7, r3
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	2240      	movs	r2, #64	; 0x40
 80049f6:	4013      	ands	r3, r2
 80049f8:	d013      	beq.n	8004a22 <HAL_UART_IRQHandler+0x5a2>
 80049fa:	23a0      	movs	r3, #160	; 0xa0
 80049fc:	18fb      	adds	r3, r7, r3
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	2240      	movs	r2, #64	; 0x40
 8004a02:	4013      	ands	r3, r2
 8004a04:	d00d      	beq.n	8004a22 <HAL_UART_IRQHandler+0x5a2>
  {
    UART_EndTransmit_IT(huart);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	0018      	movs	r0, r3
 8004a0a:	f000 fd06 	bl	800541a <UART_EndTransmit_IT>
    return;
 8004a0e:	e008      	b.n	8004a22 <HAL_UART_IRQHandler+0x5a2>
      return;
 8004a10:	46c0      	nop			; (mov r8, r8)
 8004a12:	e006      	b.n	8004a22 <HAL_UART_IRQHandler+0x5a2>
    return;
 8004a14:	46c0      	nop			; (mov r8, r8)
 8004a16:	e004      	b.n	8004a22 <HAL_UART_IRQHandler+0x5a2>
      return;
 8004a18:	46c0      	nop			; (mov r8, r8)
 8004a1a:	e002      	b.n	8004a22 <HAL_UART_IRQHandler+0x5a2>
      return;
 8004a1c:	46c0      	nop			; (mov r8, r8)
 8004a1e:	e000      	b.n	8004a22 <HAL_UART_IRQHandler+0x5a2>
    return;
 8004a20:	46c0      	nop			; (mov r8, r8)
  }

}
 8004a22:	46bd      	mov	sp, r7
 8004a24:	b02b      	add	sp, #172	; 0xac
 8004a26:	bd90      	pop	{r4, r7, pc}
 8004a28:	fffffeff 	.word	0xfffffeff
 8004a2c:	fffffedf 	.word	0xfffffedf

08004a30 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b082      	sub	sp, #8
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004a38:	46c0      	nop			; (mov r8, r8)
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	b002      	add	sp, #8
 8004a3e:	bd80      	pop	{r7, pc}

08004a40 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	b082      	sub	sp, #8
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
 8004a48:	000a      	movs	r2, r1
 8004a4a:	1cbb      	adds	r3, r7, #2
 8004a4c:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004a4e:	46c0      	nop			; (mov r8, r8)
 8004a50:	46bd      	mov	sp, r7
 8004a52:	b002      	add	sp, #8
 8004a54:	bd80      	pop	{r7, pc}
	...

08004a58 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b088      	sub	sp, #32
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004a60:	231e      	movs	r3, #30
 8004a62:	18fb      	adds	r3, r7, r3
 8004a64:	2200      	movs	r2, #0
 8004a66:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	689a      	ldr	r2, [r3, #8]
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	691b      	ldr	r3, [r3, #16]
 8004a70:	431a      	orrs	r2, r3
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	695b      	ldr	r3, [r3, #20]
 8004a76:	431a      	orrs	r2, r3
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	69db      	ldr	r3, [r3, #28]
 8004a7c:	4313      	orrs	r3, r2
 8004a7e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	4a8d      	ldr	r2, [pc, #564]	; (8004cbc <UART_SetConfig+0x264>)
 8004a88:	4013      	ands	r3, r2
 8004a8a:	0019      	movs	r1, r3
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	697a      	ldr	r2, [r7, #20]
 8004a92:	430a      	orrs	r2, r1
 8004a94:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	685b      	ldr	r3, [r3, #4]
 8004a9c:	4a88      	ldr	r2, [pc, #544]	; (8004cc0 <UART_SetConfig+0x268>)
 8004a9e:	4013      	ands	r3, r2
 8004aa0:	0019      	movs	r1, r3
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	68da      	ldr	r2, [r3, #12]
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	430a      	orrs	r2, r1
 8004aac:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	699b      	ldr	r3, [r3, #24]
 8004ab2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6a1b      	ldr	r3, [r3, #32]
 8004ab8:	697a      	ldr	r2, [r7, #20]
 8004aba:	4313      	orrs	r3, r2
 8004abc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	689b      	ldr	r3, [r3, #8]
 8004ac4:	4a7f      	ldr	r2, [pc, #508]	; (8004cc4 <UART_SetConfig+0x26c>)
 8004ac6:	4013      	ands	r3, r2
 8004ac8:	0019      	movs	r1, r3
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	697a      	ldr	r2, [r7, #20]
 8004ad0:	430a      	orrs	r2, r1
 8004ad2:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	4a7b      	ldr	r2, [pc, #492]	; (8004cc8 <UART_SetConfig+0x270>)
 8004ada:	4293      	cmp	r3, r2
 8004adc:	d127      	bne.n	8004b2e <UART_SetConfig+0xd6>
 8004ade:	4b7b      	ldr	r3, [pc, #492]	; (8004ccc <UART_SetConfig+0x274>)
 8004ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ae2:	2203      	movs	r2, #3
 8004ae4:	4013      	ands	r3, r2
 8004ae6:	2b03      	cmp	r3, #3
 8004ae8:	d00d      	beq.n	8004b06 <UART_SetConfig+0xae>
 8004aea:	d81b      	bhi.n	8004b24 <UART_SetConfig+0xcc>
 8004aec:	2b02      	cmp	r3, #2
 8004aee:	d014      	beq.n	8004b1a <UART_SetConfig+0xc2>
 8004af0:	d818      	bhi.n	8004b24 <UART_SetConfig+0xcc>
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d002      	beq.n	8004afc <UART_SetConfig+0xa4>
 8004af6:	2b01      	cmp	r3, #1
 8004af8:	d00a      	beq.n	8004b10 <UART_SetConfig+0xb8>
 8004afa:	e013      	b.n	8004b24 <UART_SetConfig+0xcc>
 8004afc:	231f      	movs	r3, #31
 8004afe:	18fb      	adds	r3, r7, r3
 8004b00:	2200      	movs	r2, #0
 8004b02:	701a      	strb	r2, [r3, #0]
 8004b04:	e021      	b.n	8004b4a <UART_SetConfig+0xf2>
 8004b06:	231f      	movs	r3, #31
 8004b08:	18fb      	adds	r3, r7, r3
 8004b0a:	2202      	movs	r2, #2
 8004b0c:	701a      	strb	r2, [r3, #0]
 8004b0e:	e01c      	b.n	8004b4a <UART_SetConfig+0xf2>
 8004b10:	231f      	movs	r3, #31
 8004b12:	18fb      	adds	r3, r7, r3
 8004b14:	2204      	movs	r2, #4
 8004b16:	701a      	strb	r2, [r3, #0]
 8004b18:	e017      	b.n	8004b4a <UART_SetConfig+0xf2>
 8004b1a:	231f      	movs	r3, #31
 8004b1c:	18fb      	adds	r3, r7, r3
 8004b1e:	2208      	movs	r2, #8
 8004b20:	701a      	strb	r2, [r3, #0]
 8004b22:	e012      	b.n	8004b4a <UART_SetConfig+0xf2>
 8004b24:	231f      	movs	r3, #31
 8004b26:	18fb      	adds	r3, r7, r3
 8004b28:	2210      	movs	r2, #16
 8004b2a:	701a      	strb	r2, [r3, #0]
 8004b2c:	e00d      	b.n	8004b4a <UART_SetConfig+0xf2>
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	4a67      	ldr	r2, [pc, #412]	; (8004cd0 <UART_SetConfig+0x278>)
 8004b34:	4293      	cmp	r3, r2
 8004b36:	d104      	bne.n	8004b42 <UART_SetConfig+0xea>
 8004b38:	231f      	movs	r3, #31
 8004b3a:	18fb      	adds	r3, r7, r3
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	701a      	strb	r2, [r3, #0]
 8004b40:	e003      	b.n	8004b4a <UART_SetConfig+0xf2>
 8004b42:	231f      	movs	r3, #31
 8004b44:	18fb      	adds	r3, r7, r3
 8004b46:	2210      	movs	r2, #16
 8004b48:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	69da      	ldr	r2, [r3, #28]
 8004b4e:	2380      	movs	r3, #128	; 0x80
 8004b50:	021b      	lsls	r3, r3, #8
 8004b52:	429a      	cmp	r2, r3
 8004b54:	d15d      	bne.n	8004c12 <UART_SetConfig+0x1ba>
  {
    switch (clocksource)
 8004b56:	231f      	movs	r3, #31
 8004b58:	18fb      	adds	r3, r7, r3
 8004b5a:	781b      	ldrb	r3, [r3, #0]
 8004b5c:	2b08      	cmp	r3, #8
 8004b5e:	d015      	beq.n	8004b8c <UART_SetConfig+0x134>
 8004b60:	dc18      	bgt.n	8004b94 <UART_SetConfig+0x13c>
 8004b62:	2b04      	cmp	r3, #4
 8004b64:	d00d      	beq.n	8004b82 <UART_SetConfig+0x12a>
 8004b66:	dc15      	bgt.n	8004b94 <UART_SetConfig+0x13c>
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d002      	beq.n	8004b72 <UART_SetConfig+0x11a>
 8004b6c:	2b02      	cmp	r3, #2
 8004b6e:	d005      	beq.n	8004b7c <UART_SetConfig+0x124>
 8004b70:	e010      	b.n	8004b94 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004b72:	f7fe ffc5 	bl	8003b00 <HAL_RCC_GetPCLK1Freq>
 8004b76:	0003      	movs	r3, r0
 8004b78:	61bb      	str	r3, [r7, #24]
        break;
 8004b7a:	e012      	b.n	8004ba2 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004b7c:	4b55      	ldr	r3, [pc, #340]	; (8004cd4 <UART_SetConfig+0x27c>)
 8004b7e:	61bb      	str	r3, [r7, #24]
        break;
 8004b80:	e00f      	b.n	8004ba2 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004b82:	f7fe ff33 	bl	80039ec <HAL_RCC_GetSysClockFreq>
 8004b86:	0003      	movs	r3, r0
 8004b88:	61bb      	str	r3, [r7, #24]
        break;
 8004b8a:	e00a      	b.n	8004ba2 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004b8c:	2380      	movs	r3, #128	; 0x80
 8004b8e:	021b      	lsls	r3, r3, #8
 8004b90:	61bb      	str	r3, [r7, #24]
        break;
 8004b92:	e006      	b.n	8004ba2 <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8004b94:	2300      	movs	r3, #0
 8004b96:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004b98:	231e      	movs	r3, #30
 8004b9a:	18fb      	adds	r3, r7, r3
 8004b9c:	2201      	movs	r2, #1
 8004b9e:	701a      	strb	r2, [r3, #0]
        break;
 8004ba0:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004ba2:	69bb      	ldr	r3, [r7, #24]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d100      	bne.n	8004baa <UART_SetConfig+0x152>
 8004ba8:	e07b      	b.n	8004ca2 <UART_SetConfig+0x24a>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004baa:	69bb      	ldr	r3, [r7, #24]
 8004bac:	005a      	lsls	r2, r3, #1
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	685b      	ldr	r3, [r3, #4]
 8004bb2:	085b      	lsrs	r3, r3, #1
 8004bb4:	18d2      	adds	r2, r2, r3
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	685b      	ldr	r3, [r3, #4]
 8004bba:	0019      	movs	r1, r3
 8004bbc:	0010      	movs	r0, r2
 8004bbe:	f7fb fabf 	bl	8000140 <__udivsi3>
 8004bc2:	0003      	movs	r3, r0
 8004bc4:	b29b      	uxth	r3, r3
 8004bc6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004bc8:	693b      	ldr	r3, [r7, #16]
 8004bca:	2b0f      	cmp	r3, #15
 8004bcc:	d91c      	bls.n	8004c08 <UART_SetConfig+0x1b0>
 8004bce:	693a      	ldr	r2, [r7, #16]
 8004bd0:	2380      	movs	r3, #128	; 0x80
 8004bd2:	025b      	lsls	r3, r3, #9
 8004bd4:	429a      	cmp	r2, r3
 8004bd6:	d217      	bcs.n	8004c08 <UART_SetConfig+0x1b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004bd8:	693b      	ldr	r3, [r7, #16]
 8004bda:	b29a      	uxth	r2, r3
 8004bdc:	200e      	movs	r0, #14
 8004bde:	183b      	adds	r3, r7, r0
 8004be0:	210f      	movs	r1, #15
 8004be2:	438a      	bics	r2, r1
 8004be4:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004be6:	693b      	ldr	r3, [r7, #16]
 8004be8:	085b      	lsrs	r3, r3, #1
 8004bea:	b29b      	uxth	r3, r3
 8004bec:	2207      	movs	r2, #7
 8004bee:	4013      	ands	r3, r2
 8004bf0:	b299      	uxth	r1, r3
 8004bf2:	183b      	adds	r3, r7, r0
 8004bf4:	183a      	adds	r2, r7, r0
 8004bf6:	8812      	ldrh	r2, [r2, #0]
 8004bf8:	430a      	orrs	r2, r1
 8004bfa:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	183a      	adds	r2, r7, r0
 8004c02:	8812      	ldrh	r2, [r2, #0]
 8004c04:	60da      	str	r2, [r3, #12]
 8004c06:	e04c      	b.n	8004ca2 <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8004c08:	231e      	movs	r3, #30
 8004c0a:	18fb      	adds	r3, r7, r3
 8004c0c:	2201      	movs	r2, #1
 8004c0e:	701a      	strb	r2, [r3, #0]
 8004c10:	e047      	b.n	8004ca2 <UART_SetConfig+0x24a>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004c12:	231f      	movs	r3, #31
 8004c14:	18fb      	adds	r3, r7, r3
 8004c16:	781b      	ldrb	r3, [r3, #0]
 8004c18:	2b08      	cmp	r3, #8
 8004c1a:	d015      	beq.n	8004c48 <UART_SetConfig+0x1f0>
 8004c1c:	dc18      	bgt.n	8004c50 <UART_SetConfig+0x1f8>
 8004c1e:	2b04      	cmp	r3, #4
 8004c20:	d00d      	beq.n	8004c3e <UART_SetConfig+0x1e6>
 8004c22:	dc15      	bgt.n	8004c50 <UART_SetConfig+0x1f8>
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d002      	beq.n	8004c2e <UART_SetConfig+0x1d6>
 8004c28:	2b02      	cmp	r3, #2
 8004c2a:	d005      	beq.n	8004c38 <UART_SetConfig+0x1e0>
 8004c2c:	e010      	b.n	8004c50 <UART_SetConfig+0x1f8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c2e:	f7fe ff67 	bl	8003b00 <HAL_RCC_GetPCLK1Freq>
 8004c32:	0003      	movs	r3, r0
 8004c34:	61bb      	str	r3, [r7, #24]
        break;
 8004c36:	e012      	b.n	8004c5e <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004c38:	4b26      	ldr	r3, [pc, #152]	; (8004cd4 <UART_SetConfig+0x27c>)
 8004c3a:	61bb      	str	r3, [r7, #24]
        break;
 8004c3c:	e00f      	b.n	8004c5e <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004c3e:	f7fe fed5 	bl	80039ec <HAL_RCC_GetSysClockFreq>
 8004c42:	0003      	movs	r3, r0
 8004c44:	61bb      	str	r3, [r7, #24]
        break;
 8004c46:	e00a      	b.n	8004c5e <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c48:	2380      	movs	r3, #128	; 0x80
 8004c4a:	021b      	lsls	r3, r3, #8
 8004c4c:	61bb      	str	r3, [r7, #24]
        break;
 8004c4e:	e006      	b.n	8004c5e <UART_SetConfig+0x206>
      default:
        pclk = 0U;
 8004c50:	2300      	movs	r3, #0
 8004c52:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004c54:	231e      	movs	r3, #30
 8004c56:	18fb      	adds	r3, r7, r3
 8004c58:	2201      	movs	r2, #1
 8004c5a:	701a      	strb	r2, [r3, #0]
        break;
 8004c5c:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8004c5e:	69bb      	ldr	r3, [r7, #24]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d01e      	beq.n	8004ca2 <UART_SetConfig+0x24a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	685b      	ldr	r3, [r3, #4]
 8004c68:	085a      	lsrs	r2, r3, #1
 8004c6a:	69bb      	ldr	r3, [r7, #24]
 8004c6c:	18d2      	adds	r2, r2, r3
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	685b      	ldr	r3, [r3, #4]
 8004c72:	0019      	movs	r1, r3
 8004c74:	0010      	movs	r0, r2
 8004c76:	f7fb fa63 	bl	8000140 <__udivsi3>
 8004c7a:	0003      	movs	r3, r0
 8004c7c:	b29b      	uxth	r3, r3
 8004c7e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004c80:	693b      	ldr	r3, [r7, #16]
 8004c82:	2b0f      	cmp	r3, #15
 8004c84:	d909      	bls.n	8004c9a <UART_SetConfig+0x242>
 8004c86:	693a      	ldr	r2, [r7, #16]
 8004c88:	2380      	movs	r3, #128	; 0x80
 8004c8a:	025b      	lsls	r3, r3, #9
 8004c8c:	429a      	cmp	r2, r3
 8004c8e:	d204      	bcs.n	8004c9a <UART_SetConfig+0x242>
      {
        huart->Instance->BRR = usartdiv;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	693a      	ldr	r2, [r7, #16]
 8004c96:	60da      	str	r2, [r3, #12]
 8004c98:	e003      	b.n	8004ca2 <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8004c9a:	231e      	movs	r3, #30
 8004c9c:	18fb      	adds	r3, r7, r3
 8004c9e:	2201      	movs	r2, #1
 8004ca0:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2200      	movs	r2, #0
 8004cac:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004cae:	231e      	movs	r3, #30
 8004cb0:	18fb      	adds	r3, r7, r3
 8004cb2:	781b      	ldrb	r3, [r3, #0]
}
 8004cb4:	0018      	movs	r0, r3
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	b008      	add	sp, #32
 8004cba:	bd80      	pop	{r7, pc}
 8004cbc:	efff69f3 	.word	0xefff69f3
 8004cc0:	ffffcfff 	.word	0xffffcfff
 8004cc4:	fffff4ff 	.word	0xfffff4ff
 8004cc8:	40013800 	.word	0x40013800
 8004ccc:	40021000 	.word	0x40021000
 8004cd0:	40004400 	.word	0x40004400
 8004cd4:	007a1200 	.word	0x007a1200

08004cd8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	b082      	sub	sp, #8
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ce4:	2201      	movs	r2, #1
 8004ce6:	4013      	ands	r3, r2
 8004ce8:	d00b      	beq.n	8004d02 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	685b      	ldr	r3, [r3, #4]
 8004cf0:	4a4a      	ldr	r2, [pc, #296]	; (8004e1c <UART_AdvFeatureConfig+0x144>)
 8004cf2:	4013      	ands	r3, r2
 8004cf4:	0019      	movs	r1, r3
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	430a      	orrs	r2, r1
 8004d00:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d06:	2202      	movs	r2, #2
 8004d08:	4013      	ands	r3, r2
 8004d0a:	d00b      	beq.n	8004d24 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	685b      	ldr	r3, [r3, #4]
 8004d12:	4a43      	ldr	r2, [pc, #268]	; (8004e20 <UART_AdvFeatureConfig+0x148>)
 8004d14:	4013      	ands	r3, r2
 8004d16:	0019      	movs	r1, r3
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	430a      	orrs	r2, r1
 8004d22:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d28:	2204      	movs	r2, #4
 8004d2a:	4013      	ands	r3, r2
 8004d2c:	d00b      	beq.n	8004d46 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	685b      	ldr	r3, [r3, #4]
 8004d34:	4a3b      	ldr	r2, [pc, #236]	; (8004e24 <UART_AdvFeatureConfig+0x14c>)
 8004d36:	4013      	ands	r3, r2
 8004d38:	0019      	movs	r1, r3
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	430a      	orrs	r2, r1
 8004d44:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d4a:	2208      	movs	r2, #8
 8004d4c:	4013      	ands	r3, r2
 8004d4e:	d00b      	beq.n	8004d68 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	685b      	ldr	r3, [r3, #4]
 8004d56:	4a34      	ldr	r2, [pc, #208]	; (8004e28 <UART_AdvFeatureConfig+0x150>)
 8004d58:	4013      	ands	r3, r2
 8004d5a:	0019      	movs	r1, r3
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	430a      	orrs	r2, r1
 8004d66:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d6c:	2210      	movs	r2, #16
 8004d6e:	4013      	ands	r3, r2
 8004d70:	d00b      	beq.n	8004d8a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	689b      	ldr	r3, [r3, #8]
 8004d78:	4a2c      	ldr	r2, [pc, #176]	; (8004e2c <UART_AdvFeatureConfig+0x154>)
 8004d7a:	4013      	ands	r3, r2
 8004d7c:	0019      	movs	r1, r3
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	430a      	orrs	r2, r1
 8004d88:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d8e:	2220      	movs	r2, #32
 8004d90:	4013      	ands	r3, r2
 8004d92:	d00b      	beq.n	8004dac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	689b      	ldr	r3, [r3, #8]
 8004d9a:	4a25      	ldr	r2, [pc, #148]	; (8004e30 <UART_AdvFeatureConfig+0x158>)
 8004d9c:	4013      	ands	r3, r2
 8004d9e:	0019      	movs	r1, r3
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	430a      	orrs	r2, r1
 8004daa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004db0:	2240      	movs	r2, #64	; 0x40
 8004db2:	4013      	ands	r3, r2
 8004db4:	d01d      	beq.n	8004df2 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	685b      	ldr	r3, [r3, #4]
 8004dbc:	4a1d      	ldr	r2, [pc, #116]	; (8004e34 <UART_AdvFeatureConfig+0x15c>)
 8004dbe:	4013      	ands	r3, r2
 8004dc0:	0019      	movs	r1, r3
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	430a      	orrs	r2, r1
 8004dcc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004dd2:	2380      	movs	r3, #128	; 0x80
 8004dd4:	035b      	lsls	r3, r3, #13
 8004dd6:	429a      	cmp	r2, r3
 8004dd8:	d10b      	bne.n	8004df2 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	685b      	ldr	r3, [r3, #4]
 8004de0:	4a15      	ldr	r2, [pc, #84]	; (8004e38 <UART_AdvFeatureConfig+0x160>)
 8004de2:	4013      	ands	r3, r2
 8004de4:	0019      	movs	r1, r3
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	430a      	orrs	r2, r1
 8004df0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004df6:	2280      	movs	r2, #128	; 0x80
 8004df8:	4013      	ands	r3, r2
 8004dfa:	d00b      	beq.n	8004e14 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	685b      	ldr	r3, [r3, #4]
 8004e02:	4a0e      	ldr	r2, [pc, #56]	; (8004e3c <UART_AdvFeatureConfig+0x164>)
 8004e04:	4013      	ands	r3, r2
 8004e06:	0019      	movs	r1, r3
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	430a      	orrs	r2, r1
 8004e12:	605a      	str	r2, [r3, #4]
  }
}
 8004e14:	46c0      	nop			; (mov r8, r8)
 8004e16:	46bd      	mov	sp, r7
 8004e18:	b002      	add	sp, #8
 8004e1a:	bd80      	pop	{r7, pc}
 8004e1c:	fffdffff 	.word	0xfffdffff
 8004e20:	fffeffff 	.word	0xfffeffff
 8004e24:	fffbffff 	.word	0xfffbffff
 8004e28:	ffff7fff 	.word	0xffff7fff
 8004e2c:	ffffefff 	.word	0xffffefff
 8004e30:	ffffdfff 	.word	0xffffdfff
 8004e34:	ffefffff 	.word	0xffefffff
 8004e38:	ff9fffff 	.word	0xff9fffff
 8004e3c:	fff7ffff 	.word	0xfff7ffff

08004e40 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b086      	sub	sp, #24
 8004e44:	af02      	add	r7, sp, #8
 8004e46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2280      	movs	r2, #128	; 0x80
 8004e4c:	2100      	movs	r1, #0
 8004e4e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004e50:	f7fc fcb0 	bl	80017b4 <HAL_GetTick>
 8004e54:	0003      	movs	r3, r0
 8004e56:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	2208      	movs	r2, #8
 8004e60:	4013      	ands	r3, r2
 8004e62:	2b08      	cmp	r3, #8
 8004e64:	d10c      	bne.n	8004e80 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	2280      	movs	r2, #128	; 0x80
 8004e6a:	0391      	lsls	r1, r2, #14
 8004e6c:	6878      	ldr	r0, [r7, #4]
 8004e6e:	4a17      	ldr	r2, [pc, #92]	; (8004ecc <UART_CheckIdleState+0x8c>)
 8004e70:	9200      	str	r2, [sp, #0]
 8004e72:	2200      	movs	r2, #0
 8004e74:	f000 f82c 	bl	8004ed0 <UART_WaitOnFlagUntilTimeout>
 8004e78:	1e03      	subs	r3, r0, #0
 8004e7a:	d001      	beq.n	8004e80 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004e7c:	2303      	movs	r3, #3
 8004e7e:	e021      	b.n	8004ec4 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	2204      	movs	r2, #4
 8004e88:	4013      	ands	r3, r2
 8004e8a:	2b04      	cmp	r3, #4
 8004e8c:	d10c      	bne.n	8004ea8 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	2280      	movs	r2, #128	; 0x80
 8004e92:	03d1      	lsls	r1, r2, #15
 8004e94:	6878      	ldr	r0, [r7, #4]
 8004e96:	4a0d      	ldr	r2, [pc, #52]	; (8004ecc <UART_CheckIdleState+0x8c>)
 8004e98:	9200      	str	r2, [sp, #0]
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	f000 f818 	bl	8004ed0 <UART_WaitOnFlagUntilTimeout>
 8004ea0:	1e03      	subs	r3, r0, #0
 8004ea2:	d001      	beq.n	8004ea8 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004ea4:	2303      	movs	r3, #3
 8004ea6:	e00d      	b.n	8004ec4 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2220      	movs	r2, #32
 8004eac:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	2220      	movs	r2, #32
 8004eb2:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	2274      	movs	r2, #116	; 0x74
 8004ebe:	2100      	movs	r1, #0
 8004ec0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004ec2:	2300      	movs	r3, #0
}
 8004ec4:	0018      	movs	r0, r3
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	b004      	add	sp, #16
 8004eca:	bd80      	pop	{r7, pc}
 8004ecc:	01ffffff 	.word	0x01ffffff

08004ed0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b094      	sub	sp, #80	; 0x50
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	60f8      	str	r0, [r7, #12]
 8004ed8:	60b9      	str	r1, [r7, #8]
 8004eda:	603b      	str	r3, [r7, #0]
 8004edc:	1dfb      	adds	r3, r7, #7
 8004ede:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ee0:	e0a3      	b.n	800502a <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ee2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004ee4:	3301      	adds	r3, #1
 8004ee6:	d100      	bne.n	8004eea <UART_WaitOnFlagUntilTimeout+0x1a>
 8004ee8:	e09f      	b.n	800502a <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004eea:	f7fc fc63 	bl	80017b4 <HAL_GetTick>
 8004eee:	0002      	movs	r2, r0
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	1ad3      	subs	r3, r2, r3
 8004ef4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004ef6:	429a      	cmp	r2, r3
 8004ef8:	d302      	bcc.n	8004f00 <UART_WaitOnFlagUntilTimeout+0x30>
 8004efa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d13d      	bne.n	8004f7c <UART_WaitOnFlagUntilTimeout+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f00:	f3ef 8310 	mrs	r3, PRIMASK
 8004f04:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8004f06:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004f08:	647b      	str	r3, [r7, #68]	; 0x44
 8004f0a:	2301      	movs	r3, #1
 8004f0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f10:	f383 8810 	msr	PRIMASK, r3
}
 8004f14:	46c0      	nop			; (mov r8, r8)
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	681a      	ldr	r2, [r3, #0]
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	494c      	ldr	r1, [pc, #304]	; (8005054 <UART_WaitOnFlagUntilTimeout+0x184>)
 8004f22:	400a      	ands	r2, r1
 8004f24:	601a      	str	r2, [r3, #0]
 8004f26:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f28:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f2c:	f383 8810 	msr	PRIMASK, r3
}
 8004f30:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f32:	f3ef 8310 	mrs	r3, PRIMASK
 8004f36:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8004f38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f3a:	643b      	str	r3, [r7, #64]	; 0x40
 8004f3c:	2301      	movs	r3, #1
 8004f3e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f42:	f383 8810 	msr	PRIMASK, r3
}
 8004f46:	46c0      	nop			; (mov r8, r8)
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	689a      	ldr	r2, [r3, #8]
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	2101      	movs	r1, #1
 8004f54:	438a      	bics	r2, r1
 8004f56:	609a      	str	r2, [r3, #8]
 8004f58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004f5a:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f5e:	f383 8810 	msr	PRIMASK, r3
}
 8004f62:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	2220      	movs	r2, #32
 8004f68:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	2220      	movs	r2, #32
 8004f6e:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	2274      	movs	r2, #116	; 0x74
 8004f74:	2100      	movs	r1, #0
 8004f76:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004f78:	2303      	movs	r3, #3
 8004f7a:	e067      	b.n	800504c <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	2204      	movs	r2, #4
 8004f84:	4013      	ands	r3, r2
 8004f86:	d050      	beq.n	800502a <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	69da      	ldr	r2, [r3, #28]
 8004f8e:	2380      	movs	r3, #128	; 0x80
 8004f90:	011b      	lsls	r3, r3, #4
 8004f92:	401a      	ands	r2, r3
 8004f94:	2380      	movs	r3, #128	; 0x80
 8004f96:	011b      	lsls	r3, r3, #4
 8004f98:	429a      	cmp	r2, r3
 8004f9a:	d146      	bne.n	800502a <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	2280      	movs	r2, #128	; 0x80
 8004fa2:	0112      	lsls	r2, r2, #4
 8004fa4:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004fa6:	f3ef 8310 	mrs	r3, PRIMASK
 8004faa:	613b      	str	r3, [r7, #16]
  return(result);
 8004fac:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004fae:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004fb0:	2301      	movs	r3, #1
 8004fb2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004fb4:	697b      	ldr	r3, [r7, #20]
 8004fb6:	f383 8810 	msr	PRIMASK, r3
}
 8004fba:	46c0      	nop			; (mov r8, r8)
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	681a      	ldr	r2, [r3, #0]
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	4923      	ldr	r1, [pc, #140]	; (8005054 <UART_WaitOnFlagUntilTimeout+0x184>)
 8004fc8:	400a      	ands	r2, r1
 8004fca:	601a      	str	r2, [r3, #0]
 8004fcc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004fce:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004fd0:	69bb      	ldr	r3, [r7, #24]
 8004fd2:	f383 8810 	msr	PRIMASK, r3
}
 8004fd6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004fd8:	f3ef 8310 	mrs	r3, PRIMASK
 8004fdc:	61fb      	str	r3, [r7, #28]
  return(result);
 8004fde:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004fe0:	64bb      	str	r3, [r7, #72]	; 0x48
 8004fe2:	2301      	movs	r3, #1
 8004fe4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004fe6:	6a3b      	ldr	r3, [r7, #32]
 8004fe8:	f383 8810 	msr	PRIMASK, r3
}
 8004fec:	46c0      	nop			; (mov r8, r8)
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	689a      	ldr	r2, [r3, #8]
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	2101      	movs	r1, #1
 8004ffa:	438a      	bics	r2, r1
 8004ffc:	609a      	str	r2, [r3, #8]
 8004ffe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005000:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005004:	f383 8810 	msr	PRIMASK, r3
}
 8005008:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	2220      	movs	r2, #32
 800500e:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	2220      	movs	r2, #32
 8005014:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	2280      	movs	r2, #128	; 0x80
 800501a:	2120      	movs	r1, #32
 800501c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	2274      	movs	r2, #116	; 0x74
 8005022:	2100      	movs	r1, #0
 8005024:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8005026:	2303      	movs	r3, #3
 8005028:	e010      	b.n	800504c <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	69db      	ldr	r3, [r3, #28]
 8005030:	68ba      	ldr	r2, [r7, #8]
 8005032:	4013      	ands	r3, r2
 8005034:	68ba      	ldr	r2, [r7, #8]
 8005036:	1ad3      	subs	r3, r2, r3
 8005038:	425a      	negs	r2, r3
 800503a:	4153      	adcs	r3, r2
 800503c:	b2db      	uxtb	r3, r3
 800503e:	001a      	movs	r2, r3
 8005040:	1dfb      	adds	r3, r7, #7
 8005042:	781b      	ldrb	r3, [r3, #0]
 8005044:	429a      	cmp	r2, r3
 8005046:	d100      	bne.n	800504a <UART_WaitOnFlagUntilTimeout+0x17a>
 8005048:	e74b      	b.n	8004ee2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800504a:	2300      	movs	r3, #0
}
 800504c:	0018      	movs	r0, r3
 800504e:	46bd      	mov	sp, r7
 8005050:	b014      	add	sp, #80	; 0x50
 8005052:	bd80      	pop	{r7, pc}
 8005054:	fffffe5f 	.word	0xfffffe5f

08005058 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005058:	b580      	push	{r7, lr}
 800505a:	b08c      	sub	sp, #48	; 0x30
 800505c:	af00      	add	r7, sp, #0
 800505e:	60f8      	str	r0, [r7, #12]
 8005060:	60b9      	str	r1, [r7, #8]
 8005062:	1dbb      	adds	r3, r7, #6
 8005064:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	68ba      	ldr	r2, [r7, #8]
 800506a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	1dba      	adds	r2, r7, #6
 8005070:	2158      	movs	r1, #88	; 0x58
 8005072:	8812      	ldrh	r2, [r2, #0]
 8005074:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	1dba      	adds	r2, r7, #6
 800507a:	215a      	movs	r1, #90	; 0x5a
 800507c:	8812      	ldrh	r2, [r2, #0]
 800507e:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	2200      	movs	r2, #0
 8005084:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	689a      	ldr	r2, [r3, #8]
 800508a:	2380      	movs	r3, #128	; 0x80
 800508c:	015b      	lsls	r3, r3, #5
 800508e:	429a      	cmp	r2, r3
 8005090:	d10d      	bne.n	80050ae <UART_Start_Receive_IT+0x56>
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	691b      	ldr	r3, [r3, #16]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d104      	bne.n	80050a4 <UART_Start_Receive_IT+0x4c>
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	225c      	movs	r2, #92	; 0x5c
 800509e:	4943      	ldr	r1, [pc, #268]	; (80051ac <UART_Start_Receive_IT+0x154>)
 80050a0:	5299      	strh	r1, [r3, r2]
 80050a2:	e02e      	b.n	8005102 <UART_Start_Receive_IT+0xaa>
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	225c      	movs	r2, #92	; 0x5c
 80050a8:	21ff      	movs	r1, #255	; 0xff
 80050aa:	5299      	strh	r1, [r3, r2]
 80050ac:	e029      	b.n	8005102 <UART_Start_Receive_IT+0xaa>
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	689b      	ldr	r3, [r3, #8]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d10d      	bne.n	80050d2 <UART_Start_Receive_IT+0x7a>
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	691b      	ldr	r3, [r3, #16]
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d104      	bne.n	80050c8 <UART_Start_Receive_IT+0x70>
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	225c      	movs	r2, #92	; 0x5c
 80050c2:	21ff      	movs	r1, #255	; 0xff
 80050c4:	5299      	strh	r1, [r3, r2]
 80050c6:	e01c      	b.n	8005102 <UART_Start_Receive_IT+0xaa>
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	225c      	movs	r2, #92	; 0x5c
 80050cc:	217f      	movs	r1, #127	; 0x7f
 80050ce:	5299      	strh	r1, [r3, r2]
 80050d0:	e017      	b.n	8005102 <UART_Start_Receive_IT+0xaa>
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	689a      	ldr	r2, [r3, #8]
 80050d6:	2380      	movs	r3, #128	; 0x80
 80050d8:	055b      	lsls	r3, r3, #21
 80050da:	429a      	cmp	r2, r3
 80050dc:	d10d      	bne.n	80050fa <UART_Start_Receive_IT+0xa2>
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	691b      	ldr	r3, [r3, #16]
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d104      	bne.n	80050f0 <UART_Start_Receive_IT+0x98>
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	225c      	movs	r2, #92	; 0x5c
 80050ea:	217f      	movs	r1, #127	; 0x7f
 80050ec:	5299      	strh	r1, [r3, r2]
 80050ee:	e008      	b.n	8005102 <UART_Start_Receive_IT+0xaa>
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	225c      	movs	r2, #92	; 0x5c
 80050f4:	213f      	movs	r1, #63	; 0x3f
 80050f6:	5299      	strh	r1, [r3, r2]
 80050f8:	e003      	b.n	8005102 <UART_Start_Receive_IT+0xaa>
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	225c      	movs	r2, #92	; 0x5c
 80050fe:	2100      	movs	r1, #0
 8005100:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	2280      	movs	r2, #128	; 0x80
 8005106:	2100      	movs	r1, #0
 8005108:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	2222      	movs	r2, #34	; 0x22
 800510e:	67da      	str	r2, [r3, #124]	; 0x7c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005110:	f3ef 8310 	mrs	r3, PRIMASK
 8005114:	61fb      	str	r3, [r7, #28]
  return(result);
 8005116:	69fb      	ldr	r3, [r7, #28]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005118:	62fb      	str	r3, [r7, #44]	; 0x2c
 800511a:	2301      	movs	r3, #1
 800511c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800511e:	6a3b      	ldr	r3, [r7, #32]
 8005120:	f383 8810 	msr	PRIMASK, r3
}
 8005124:	46c0      	nop			; (mov r8, r8)
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	689a      	ldr	r2, [r3, #8]
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	2101      	movs	r1, #1
 8005132:	430a      	orrs	r2, r1
 8005134:	609a      	str	r2, [r3, #8]
 8005136:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005138:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800513a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800513c:	f383 8810 	msr	PRIMASK, r3
}
 8005140:	46c0      	nop			; (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	689a      	ldr	r2, [r3, #8]
 8005146:	2380      	movs	r3, #128	; 0x80
 8005148:	015b      	lsls	r3, r3, #5
 800514a:	429a      	cmp	r2, r3
 800514c:	d107      	bne.n	800515e <UART_Start_Receive_IT+0x106>
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	691b      	ldr	r3, [r3, #16]
 8005152:	2b00      	cmp	r3, #0
 8005154:	d103      	bne.n	800515e <UART_Start_Receive_IT+0x106>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	4a15      	ldr	r2, [pc, #84]	; (80051b0 <UART_Start_Receive_IT+0x158>)
 800515a:	665a      	str	r2, [r3, #100]	; 0x64
 800515c:	e002      	b.n	8005164 <UART_Start_Receive_IT+0x10c>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	4a14      	ldr	r2, [pc, #80]	; (80051b4 <UART_Start_Receive_IT+0x15c>)
 8005162:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	2274      	movs	r2, #116	; 0x74
 8005168:	2100      	movs	r1, #0
 800516a:	5499      	strb	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800516c:	f3ef 8310 	mrs	r3, PRIMASK
 8005170:	613b      	str	r3, [r7, #16]
  return(result);
 8005172:	693b      	ldr	r3, [r7, #16]

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8005174:	62bb      	str	r3, [r7, #40]	; 0x28
 8005176:	2301      	movs	r3, #1
 8005178:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800517a:	697b      	ldr	r3, [r7, #20]
 800517c:	f383 8810 	msr	PRIMASK, r3
}
 8005180:	46c0      	nop			; (mov r8, r8)
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	681a      	ldr	r2, [r3, #0]
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	2190      	movs	r1, #144	; 0x90
 800518e:	0049      	lsls	r1, r1, #1
 8005190:	430a      	orrs	r2, r1
 8005192:	601a      	str	r2, [r3, #0]
 8005194:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005196:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005198:	69bb      	ldr	r3, [r7, #24]
 800519a:	f383 8810 	msr	PRIMASK, r3
}
 800519e:	46c0      	nop			; (mov r8, r8)
  return HAL_OK;
 80051a0:	2300      	movs	r3, #0
}
 80051a2:	0018      	movs	r0, r3
 80051a4:	46bd      	mov	sp, r7
 80051a6:	b00c      	add	sp, #48	; 0x30
 80051a8:	bd80      	pop	{r7, pc}
 80051aa:	46c0      	nop			; (mov r8, r8)
 80051ac:	000001ff 	.word	0x000001ff
 80051b0:	080055d9 	.word	0x080055d9
 80051b4:	08005471 	.word	0x08005471

080051b8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80051b8:	b580      	push	{r7, lr}
 80051ba:	b08e      	sub	sp, #56	; 0x38
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80051c0:	f3ef 8310 	mrs	r3, PRIMASK
 80051c4:	617b      	str	r3, [r7, #20]
  return(result);
 80051c6:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80051c8:	637b      	str	r3, [r7, #52]	; 0x34
 80051ca:	2301      	movs	r3, #1
 80051cc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051ce:	69bb      	ldr	r3, [r7, #24]
 80051d0:	f383 8810 	msr	PRIMASK, r3
}
 80051d4:	46c0      	nop			; (mov r8, r8)
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	681a      	ldr	r2, [r3, #0]
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	4925      	ldr	r1, [pc, #148]	; (8005278 <UART_EndRxTransfer+0xc0>)
 80051e2:	400a      	ands	r2, r1
 80051e4:	601a      	str	r2, [r3, #0]
 80051e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051e8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051ea:	69fb      	ldr	r3, [r7, #28]
 80051ec:	f383 8810 	msr	PRIMASK, r3
}
 80051f0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80051f2:	f3ef 8310 	mrs	r3, PRIMASK
 80051f6:	623b      	str	r3, [r7, #32]
  return(result);
 80051f8:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051fa:	633b      	str	r3, [r7, #48]	; 0x30
 80051fc:	2301      	movs	r3, #1
 80051fe:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005202:	f383 8810 	msr	PRIMASK, r3
}
 8005206:	46c0      	nop			; (mov r8, r8)
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	689a      	ldr	r2, [r3, #8]
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	2101      	movs	r1, #1
 8005214:	438a      	bics	r2, r1
 8005216:	609a      	str	r2, [r3, #8]
 8005218:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800521a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800521c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800521e:	f383 8810 	msr	PRIMASK, r3
}
 8005222:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005228:	2b01      	cmp	r3, #1
 800522a:	d118      	bne.n	800525e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800522c:	f3ef 8310 	mrs	r3, PRIMASK
 8005230:	60bb      	str	r3, [r7, #8]
  return(result);
 8005232:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005234:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005236:	2301      	movs	r3, #1
 8005238:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	f383 8810 	msr	PRIMASK, r3
}
 8005240:	46c0      	nop			; (mov r8, r8)
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	681a      	ldr	r2, [r3, #0]
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	2110      	movs	r1, #16
 800524e:	438a      	bics	r2, r1
 8005250:	601a      	str	r2, [r3, #0]
 8005252:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005254:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005256:	693b      	ldr	r3, [r7, #16]
 8005258:	f383 8810 	msr	PRIMASK, r3
}
 800525c:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	2220      	movs	r2, #32
 8005262:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2200      	movs	r2, #0
 8005268:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2200      	movs	r2, #0
 800526e:	665a      	str	r2, [r3, #100]	; 0x64
}
 8005270:	46c0      	nop			; (mov r8, r8)
 8005272:	46bd      	mov	sp, r7
 8005274:	b00e      	add	sp, #56	; 0x38
 8005276:	bd80      	pop	{r7, pc}
 8005278:	fffffedf 	.word	0xfffffedf

0800527c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800527c:	b580      	push	{r7, lr}
 800527e:	b084      	sub	sp, #16
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005288:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	225a      	movs	r2, #90	; 0x5a
 800528e:	2100      	movs	r1, #0
 8005290:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	2252      	movs	r2, #82	; 0x52
 8005296:	2100      	movs	r1, #0
 8005298:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	0018      	movs	r0, r3
 800529e:	f7ff fbc7 	bl	8004a30 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80052a2:	46c0      	nop			; (mov r8, r8)
 80052a4:	46bd      	mov	sp, r7
 80052a6:	b004      	add	sp, #16
 80052a8:	bd80      	pop	{r7, pc}

080052aa <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 80052aa:	b580      	push	{r7, lr}
 80052ac:	b08a      	sub	sp, #40	; 0x28
 80052ae:	af00      	add	r7, sp, #0
 80052b0:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80052b6:	2b21      	cmp	r3, #33	; 0x21
 80052b8:	d14d      	bne.n	8005356 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	2252      	movs	r2, #82	; 0x52
 80052be:	5a9b      	ldrh	r3, [r3, r2]
 80052c0:	b29b      	uxth	r3, r3
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d132      	bne.n	800532c <UART_TxISR_8BIT+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80052c6:	f3ef 8310 	mrs	r3, PRIMASK
 80052ca:	60bb      	str	r3, [r7, #8]
  return(result);
 80052cc:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80052ce:	627b      	str	r3, [r7, #36]	; 0x24
 80052d0:	2301      	movs	r3, #1
 80052d2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	f383 8810 	msr	PRIMASK, r3
}
 80052da:	46c0      	nop			; (mov r8, r8)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	681a      	ldr	r2, [r3, #0]
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	2180      	movs	r1, #128	; 0x80
 80052e8:	438a      	bics	r2, r1
 80052ea:	601a      	str	r2, [r3, #0]
 80052ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ee:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052f0:	693b      	ldr	r3, [r7, #16]
 80052f2:	f383 8810 	msr	PRIMASK, r3
}
 80052f6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80052f8:	f3ef 8310 	mrs	r3, PRIMASK
 80052fc:	617b      	str	r3, [r7, #20]
  return(result);
 80052fe:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005300:	623b      	str	r3, [r7, #32]
 8005302:	2301      	movs	r3, #1
 8005304:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005306:	69bb      	ldr	r3, [r7, #24]
 8005308:	f383 8810 	msr	PRIMASK, r3
}
 800530c:	46c0      	nop			; (mov r8, r8)
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	681a      	ldr	r2, [r3, #0]
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	2140      	movs	r1, #64	; 0x40
 800531a:	430a      	orrs	r2, r1
 800531c:	601a      	str	r2, [r3, #0]
 800531e:	6a3b      	ldr	r3, [r7, #32]
 8005320:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005322:	69fb      	ldr	r3, [r7, #28]
 8005324:	f383 8810 	msr	PRIMASK, r3
}
 8005328:	46c0      	nop			; (mov r8, r8)
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800532a:	e014      	b.n	8005356 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005330:	781a      	ldrb	r2, [r3, #0]
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	b292      	uxth	r2, r2
 8005338:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800533e:	1c5a      	adds	r2, r3, #1
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2252      	movs	r2, #82	; 0x52
 8005348:	5a9b      	ldrh	r3, [r3, r2]
 800534a:	b29b      	uxth	r3, r3
 800534c:	3b01      	subs	r3, #1
 800534e:	b299      	uxth	r1, r3
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2252      	movs	r2, #82	; 0x52
 8005354:	5299      	strh	r1, [r3, r2]
}
 8005356:	46c0      	nop			; (mov r8, r8)
 8005358:	46bd      	mov	sp, r7
 800535a:	b00a      	add	sp, #40	; 0x28
 800535c:	bd80      	pop	{r7, pc}

0800535e <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800535e:	b580      	push	{r7, lr}
 8005360:	b08c      	sub	sp, #48	; 0x30
 8005362:	af00      	add	r7, sp, #0
 8005364:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800536a:	2b21      	cmp	r3, #33	; 0x21
 800536c:	d151      	bne.n	8005412 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	2252      	movs	r2, #82	; 0x52
 8005372:	5a9b      	ldrh	r3, [r3, r2]
 8005374:	b29b      	uxth	r3, r3
 8005376:	2b00      	cmp	r3, #0
 8005378:	d132      	bne.n	80053e0 <UART_TxISR_16BIT+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800537a:	f3ef 8310 	mrs	r3, PRIMASK
 800537e:	60fb      	str	r3, [r7, #12]
  return(result);
 8005380:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8005382:	62bb      	str	r3, [r7, #40]	; 0x28
 8005384:	2301      	movs	r3, #1
 8005386:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005388:	693b      	ldr	r3, [r7, #16]
 800538a:	f383 8810 	msr	PRIMASK, r3
}
 800538e:	46c0      	nop			; (mov r8, r8)
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	681a      	ldr	r2, [r3, #0]
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	2180      	movs	r1, #128	; 0x80
 800539c:	438a      	bics	r2, r1
 800539e:	601a      	str	r2, [r3, #0]
 80053a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053a2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80053a4:	697b      	ldr	r3, [r7, #20]
 80053a6:	f383 8810 	msr	PRIMASK, r3
}
 80053aa:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80053ac:	f3ef 8310 	mrs	r3, PRIMASK
 80053b0:	61bb      	str	r3, [r7, #24]
  return(result);
 80053b2:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80053b4:	627b      	str	r3, [r7, #36]	; 0x24
 80053b6:	2301      	movs	r3, #1
 80053b8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80053ba:	69fb      	ldr	r3, [r7, #28]
 80053bc:	f383 8810 	msr	PRIMASK, r3
}
 80053c0:	46c0      	nop			; (mov r8, r8)
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	681a      	ldr	r2, [r3, #0]
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	2140      	movs	r1, #64	; 0x40
 80053ce:	430a      	orrs	r2, r1
 80053d0:	601a      	str	r2, [r3, #0]
 80053d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053d4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80053d6:	6a3b      	ldr	r3, [r7, #32]
 80053d8:	f383 8810 	msr	PRIMASK, r3
}
 80053dc:	46c0      	nop			; (mov r8, r8)
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 80053de:	e018      	b.n	8005412 <UART_TxISR_16BIT+0xb4>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053e4:	62fb      	str	r3, [r7, #44]	; 0x2c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80053e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053e8:	881a      	ldrh	r2, [r3, #0]
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	05d2      	lsls	r2, r2, #23
 80053f0:	0dd2      	lsrs	r2, r2, #23
 80053f2:	b292      	uxth	r2, r2
 80053f4:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053fa:	1c9a      	adds	r2, r3, #2
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2252      	movs	r2, #82	; 0x52
 8005404:	5a9b      	ldrh	r3, [r3, r2]
 8005406:	b29b      	uxth	r3, r3
 8005408:	3b01      	subs	r3, #1
 800540a:	b299      	uxth	r1, r3
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2252      	movs	r2, #82	; 0x52
 8005410:	5299      	strh	r1, [r3, r2]
}
 8005412:	46c0      	nop			; (mov r8, r8)
 8005414:	46bd      	mov	sp, r7
 8005416:	b00c      	add	sp, #48	; 0x30
 8005418:	bd80      	pop	{r7, pc}

0800541a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800541a:	b580      	push	{r7, lr}
 800541c:	b086      	sub	sp, #24
 800541e:	af00      	add	r7, sp, #0
 8005420:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005422:	f3ef 8310 	mrs	r3, PRIMASK
 8005426:	60bb      	str	r3, [r7, #8]
  return(result);
 8005428:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800542a:	617b      	str	r3, [r7, #20]
 800542c:	2301      	movs	r3, #1
 800542e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	f383 8810 	msr	PRIMASK, r3
}
 8005436:	46c0      	nop			; (mov r8, r8)
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	681a      	ldr	r2, [r3, #0]
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	2140      	movs	r1, #64	; 0x40
 8005444:	438a      	bics	r2, r1
 8005446:	601a      	str	r2, [r3, #0]
 8005448:	697b      	ldr	r3, [r7, #20]
 800544a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800544c:	693b      	ldr	r3, [r7, #16]
 800544e:	f383 8810 	msr	PRIMASK, r3
}
 8005452:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2220      	movs	r2, #32
 8005458:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	2200      	movs	r2, #0
 800545e:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	0018      	movs	r0, r3
 8005464:	f7fc f928 	bl	80016b8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005468:	46c0      	nop			; (mov r8, r8)
 800546a:	46bd      	mov	sp, r7
 800546c:	b006      	add	sp, #24
 800546e:	bd80      	pop	{r7, pc}

08005470 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005470:	b580      	push	{r7, lr}
 8005472:	b090      	sub	sp, #64	; 0x40
 8005474:	af00      	add	r7, sp, #0
 8005476:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005478:	203e      	movs	r0, #62	; 0x3e
 800547a:	183b      	adds	r3, r7, r0
 800547c:	687a      	ldr	r2, [r7, #4]
 800547e:	215c      	movs	r1, #92	; 0x5c
 8005480:	5a52      	ldrh	r2, [r2, r1]
 8005482:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005488:	2b22      	cmp	r3, #34	; 0x22
 800548a:	d000      	beq.n	800548e <UART_RxISR_8BIT+0x1e>
 800548c:	e095      	b.n	80055ba <UART_RxISR_8BIT+0x14a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681a      	ldr	r2, [r3, #0]
 8005492:	213c      	movs	r1, #60	; 0x3c
 8005494:	187b      	adds	r3, r7, r1
 8005496:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8005498:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800549a:	187b      	adds	r3, r7, r1
 800549c:	881b      	ldrh	r3, [r3, #0]
 800549e:	b2da      	uxtb	r2, r3
 80054a0:	183b      	adds	r3, r7, r0
 80054a2:	881b      	ldrh	r3, [r3, #0]
 80054a4:	b2d9      	uxtb	r1, r3
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054aa:	400a      	ands	r2, r1
 80054ac:	b2d2      	uxtb	r2, r2
 80054ae:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054b4:	1c5a      	adds	r2, r3, #1
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	225a      	movs	r2, #90	; 0x5a
 80054be:	5a9b      	ldrh	r3, [r3, r2]
 80054c0:	b29b      	uxth	r3, r3
 80054c2:	3b01      	subs	r3, #1
 80054c4:	b299      	uxth	r1, r3
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	225a      	movs	r2, #90	; 0x5a
 80054ca:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	225a      	movs	r2, #90	; 0x5a
 80054d0:	5a9b      	ldrh	r3, [r3, r2]
 80054d2:	b29b      	uxth	r3, r3
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d178      	bne.n	80055ca <UART_RxISR_8BIT+0x15a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80054d8:	f3ef 8310 	mrs	r3, PRIMASK
 80054dc:	61bb      	str	r3, [r7, #24]
  return(result);
 80054de:	69bb      	ldr	r3, [r7, #24]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80054e0:	63bb      	str	r3, [r7, #56]	; 0x38
 80054e2:	2301      	movs	r3, #1
 80054e4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054e6:	69fb      	ldr	r3, [r7, #28]
 80054e8:	f383 8810 	msr	PRIMASK, r3
}
 80054ec:	46c0      	nop			; (mov r8, r8)
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	681a      	ldr	r2, [r3, #0]
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	4936      	ldr	r1, [pc, #216]	; (80055d4 <UART_RxISR_8BIT+0x164>)
 80054fa:	400a      	ands	r2, r1
 80054fc:	601a      	str	r2, [r3, #0]
 80054fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005500:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005502:	6a3b      	ldr	r3, [r7, #32]
 8005504:	f383 8810 	msr	PRIMASK, r3
}
 8005508:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800550a:	f3ef 8310 	mrs	r3, PRIMASK
 800550e:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8005510:	6a7b      	ldr	r3, [r7, #36]	; 0x24

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005512:	637b      	str	r3, [r7, #52]	; 0x34
 8005514:	2301      	movs	r3, #1
 8005516:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005518:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800551a:	f383 8810 	msr	PRIMASK, r3
}
 800551e:	46c0      	nop			; (mov r8, r8)
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	689a      	ldr	r2, [r3, #8]
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	2101      	movs	r1, #1
 800552c:	438a      	bics	r2, r1
 800552e:	609a      	str	r2, [r3, #8]
 8005530:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005532:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005534:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005536:	f383 8810 	msr	PRIMASK, r3
}
 800553a:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2220      	movs	r2, #32
 8005540:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	2200      	movs	r2, #0
 8005546:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800554c:	2b01      	cmp	r3, #1
 800554e:	d12f      	bne.n	80055b0 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2200      	movs	r2, #0
 8005554:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005556:	f3ef 8310 	mrs	r3, PRIMASK
 800555a:	60fb      	str	r3, [r7, #12]
  return(result);
 800555c:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800555e:	633b      	str	r3, [r7, #48]	; 0x30
 8005560:	2301      	movs	r3, #1
 8005562:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005564:	693b      	ldr	r3, [r7, #16]
 8005566:	f383 8810 	msr	PRIMASK, r3
}
 800556a:	46c0      	nop			; (mov r8, r8)
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	681a      	ldr	r2, [r3, #0]
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	2110      	movs	r1, #16
 8005578:	438a      	bics	r2, r1
 800557a:	601a      	str	r2, [r3, #0]
 800557c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800557e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005580:	697b      	ldr	r3, [r7, #20]
 8005582:	f383 8810 	msr	PRIMASK, r3
}
 8005586:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	69db      	ldr	r3, [r3, #28]
 800558e:	2210      	movs	r2, #16
 8005590:	4013      	ands	r3, r2
 8005592:	2b10      	cmp	r3, #16
 8005594:	d103      	bne.n	800559e <UART_RxISR_8BIT+0x12e>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	2210      	movs	r2, #16
 800559c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	2258      	movs	r2, #88	; 0x58
 80055a2:	5a9a      	ldrh	r2, [r3, r2]
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	0011      	movs	r1, r2
 80055a8:	0018      	movs	r0, r3
 80055aa:	f7ff fa49 	bl	8004a40 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80055ae:	e00c      	b.n	80055ca <UART_RxISR_8BIT+0x15a>
        HAL_UART_RxCpltCallback(huart);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	0018      	movs	r0, r3
 80055b4:	f7fc f872 	bl	800169c <HAL_UART_RxCpltCallback>
}
 80055b8:	e007      	b.n	80055ca <UART_RxISR_8BIT+0x15a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	699a      	ldr	r2, [r3, #24]
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	2108      	movs	r1, #8
 80055c6:	430a      	orrs	r2, r1
 80055c8:	619a      	str	r2, [r3, #24]
}
 80055ca:	46c0      	nop			; (mov r8, r8)
 80055cc:	46bd      	mov	sp, r7
 80055ce:	b010      	add	sp, #64	; 0x40
 80055d0:	bd80      	pop	{r7, pc}
 80055d2:	46c0      	nop			; (mov r8, r8)
 80055d4:	fffffedf 	.word	0xfffffedf

080055d8 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80055d8:	b580      	push	{r7, lr}
 80055da:	b090      	sub	sp, #64	; 0x40
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80055e0:	203e      	movs	r0, #62	; 0x3e
 80055e2:	183b      	adds	r3, r7, r0
 80055e4:	687a      	ldr	r2, [r7, #4]
 80055e6:	215c      	movs	r1, #92	; 0x5c
 80055e8:	5a52      	ldrh	r2, [r2, r1]
 80055ea:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80055f0:	2b22      	cmp	r3, #34	; 0x22
 80055f2:	d000      	beq.n	80055f6 <UART_RxISR_16BIT+0x1e>
 80055f4:	e095      	b.n	8005722 <UART_RxISR_16BIT+0x14a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681a      	ldr	r2, [r3, #0]
 80055fa:	213c      	movs	r1, #60	; 0x3c
 80055fc:	187b      	adds	r3, r7, r1
 80055fe:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8005600:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005606:	63bb      	str	r3, [r7, #56]	; 0x38
    *tmp = (uint16_t)(uhdata & uhMask);
 8005608:	187b      	adds	r3, r7, r1
 800560a:	183a      	adds	r2, r7, r0
 800560c:	881b      	ldrh	r3, [r3, #0]
 800560e:	8812      	ldrh	r2, [r2, #0]
 8005610:	4013      	ands	r3, r2
 8005612:	b29a      	uxth	r2, r3
 8005614:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005616:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800561c:	1c9a      	adds	r2, r3, #2
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	225a      	movs	r2, #90	; 0x5a
 8005626:	5a9b      	ldrh	r3, [r3, r2]
 8005628:	b29b      	uxth	r3, r3
 800562a:	3b01      	subs	r3, #1
 800562c:	b299      	uxth	r1, r3
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	225a      	movs	r2, #90	; 0x5a
 8005632:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	225a      	movs	r2, #90	; 0x5a
 8005638:	5a9b      	ldrh	r3, [r3, r2]
 800563a:	b29b      	uxth	r3, r3
 800563c:	2b00      	cmp	r3, #0
 800563e:	d178      	bne.n	8005732 <UART_RxISR_16BIT+0x15a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005640:	f3ef 8310 	mrs	r3, PRIMASK
 8005644:	617b      	str	r3, [r7, #20]
  return(result);
 8005646:	697b      	ldr	r3, [r7, #20]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005648:	637b      	str	r3, [r7, #52]	; 0x34
 800564a:	2301      	movs	r3, #1
 800564c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800564e:	69bb      	ldr	r3, [r7, #24]
 8005650:	f383 8810 	msr	PRIMASK, r3
}
 8005654:	46c0      	nop			; (mov r8, r8)
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	681a      	ldr	r2, [r3, #0]
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	4936      	ldr	r1, [pc, #216]	; (800573c <UART_RxISR_16BIT+0x164>)
 8005662:	400a      	ands	r2, r1
 8005664:	601a      	str	r2, [r3, #0]
 8005666:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005668:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800566a:	69fb      	ldr	r3, [r7, #28]
 800566c:	f383 8810 	msr	PRIMASK, r3
}
 8005670:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005672:	f3ef 8310 	mrs	r3, PRIMASK
 8005676:	623b      	str	r3, [r7, #32]
  return(result);
 8005678:	6a3b      	ldr	r3, [r7, #32]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800567a:	633b      	str	r3, [r7, #48]	; 0x30
 800567c:	2301      	movs	r3, #1
 800567e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005682:	f383 8810 	msr	PRIMASK, r3
}
 8005686:	46c0      	nop			; (mov r8, r8)
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	689a      	ldr	r2, [r3, #8]
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	2101      	movs	r1, #1
 8005694:	438a      	bics	r2, r1
 8005696:	609a      	str	r2, [r3, #8]
 8005698:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800569a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800569c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800569e:	f383 8810 	msr	PRIMASK, r3
}
 80056a2:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2220      	movs	r2, #32
 80056a8:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	2200      	movs	r2, #0
 80056ae:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80056b4:	2b01      	cmp	r3, #1
 80056b6:	d12f      	bne.n	8005718 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2200      	movs	r2, #0
 80056bc:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80056be:	f3ef 8310 	mrs	r3, PRIMASK
 80056c2:	60bb      	str	r3, [r7, #8]
  return(result);
 80056c4:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80056c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80056c8:	2301      	movs	r3, #1
 80056ca:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	f383 8810 	msr	PRIMASK, r3
}
 80056d2:	46c0      	nop			; (mov r8, r8)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	681a      	ldr	r2, [r3, #0]
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	2110      	movs	r1, #16
 80056e0:	438a      	bics	r2, r1
 80056e2:	601a      	str	r2, [r3, #0]
 80056e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056e6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056e8:	693b      	ldr	r3, [r7, #16]
 80056ea:	f383 8810 	msr	PRIMASK, r3
}
 80056ee:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	69db      	ldr	r3, [r3, #28]
 80056f6:	2210      	movs	r2, #16
 80056f8:	4013      	ands	r3, r2
 80056fa:	2b10      	cmp	r3, #16
 80056fc:	d103      	bne.n	8005706 <UART_RxISR_16BIT+0x12e>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	2210      	movs	r2, #16
 8005704:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	2258      	movs	r2, #88	; 0x58
 800570a:	5a9a      	ldrh	r2, [r3, r2]
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	0011      	movs	r1, r2
 8005710:	0018      	movs	r0, r3
 8005712:	f7ff f995 	bl	8004a40 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005716:	e00c      	b.n	8005732 <UART_RxISR_16BIT+0x15a>
        HAL_UART_RxCpltCallback(huart);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	0018      	movs	r0, r3
 800571c:	f7fb ffbe 	bl	800169c <HAL_UART_RxCpltCallback>
}
 8005720:	e007      	b.n	8005732 <UART_RxISR_16BIT+0x15a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	699a      	ldr	r2, [r3, #24]
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	2108      	movs	r1, #8
 800572e:	430a      	orrs	r2, r1
 8005730:	619a      	str	r2, [r3, #24]
}
 8005732:	46c0      	nop			; (mov r8, r8)
 8005734:	46bd      	mov	sp, r7
 8005736:	b010      	add	sp, #64	; 0x40
 8005738:	bd80      	pop	{r7, pc}
 800573a:	46c0      	nop			; (mov r8, r8)
 800573c:	fffffedf 	.word	0xfffffedf

08005740 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005740:	b580      	push	{r7, lr}
 8005742:	b082      	sub	sp, #8
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005748:	46c0      	nop			; (mov r8, r8)
 800574a:	46bd      	mov	sp, r7
 800574c:	b002      	add	sp, #8
 800574e:	bd80      	pop	{r7, pc}

08005750 <__errno>:
 8005750:	4b01      	ldr	r3, [pc, #4]	; (8005758 <__errno+0x8>)
 8005752:	6818      	ldr	r0, [r3, #0]
 8005754:	4770      	bx	lr
 8005756:	46c0      	nop			; (mov r8, r8)
 8005758:	2000008c 	.word	0x2000008c

0800575c <__libc_init_array>:
 800575c:	b570      	push	{r4, r5, r6, lr}
 800575e:	2600      	movs	r6, #0
 8005760:	4d0c      	ldr	r5, [pc, #48]	; (8005794 <__libc_init_array+0x38>)
 8005762:	4c0d      	ldr	r4, [pc, #52]	; (8005798 <__libc_init_array+0x3c>)
 8005764:	1b64      	subs	r4, r4, r5
 8005766:	10a4      	asrs	r4, r4, #2
 8005768:	42a6      	cmp	r6, r4
 800576a:	d109      	bne.n	8005780 <__libc_init_array+0x24>
 800576c:	2600      	movs	r6, #0
 800576e:	f000 fc8b 	bl	8006088 <_init>
 8005772:	4d0a      	ldr	r5, [pc, #40]	; (800579c <__libc_init_array+0x40>)
 8005774:	4c0a      	ldr	r4, [pc, #40]	; (80057a0 <__libc_init_array+0x44>)
 8005776:	1b64      	subs	r4, r4, r5
 8005778:	10a4      	asrs	r4, r4, #2
 800577a:	42a6      	cmp	r6, r4
 800577c:	d105      	bne.n	800578a <__libc_init_array+0x2e>
 800577e:	bd70      	pop	{r4, r5, r6, pc}
 8005780:	00b3      	lsls	r3, r6, #2
 8005782:	58eb      	ldr	r3, [r5, r3]
 8005784:	4798      	blx	r3
 8005786:	3601      	adds	r6, #1
 8005788:	e7ee      	b.n	8005768 <__libc_init_array+0xc>
 800578a:	00b3      	lsls	r3, r6, #2
 800578c:	58eb      	ldr	r3, [r5, r3]
 800578e:	4798      	blx	r3
 8005790:	3601      	adds	r6, #1
 8005792:	e7f2      	b.n	800577a <__libc_init_array+0x1e>
 8005794:	08006728 	.word	0x08006728
 8005798:	08006728 	.word	0x08006728
 800579c:	08006728 	.word	0x08006728
 80057a0:	0800672c 	.word	0x0800672c

080057a4 <memset>:
 80057a4:	0003      	movs	r3, r0
 80057a6:	1882      	adds	r2, r0, r2
 80057a8:	4293      	cmp	r3, r2
 80057aa:	d100      	bne.n	80057ae <memset+0xa>
 80057ac:	4770      	bx	lr
 80057ae:	7019      	strb	r1, [r3, #0]
 80057b0:	3301      	adds	r3, #1
 80057b2:	e7f9      	b.n	80057a8 <memset+0x4>

080057b4 <siprintf>:
 80057b4:	b40e      	push	{r1, r2, r3}
 80057b6:	b500      	push	{lr}
 80057b8:	490b      	ldr	r1, [pc, #44]	; (80057e8 <siprintf+0x34>)
 80057ba:	b09c      	sub	sp, #112	; 0x70
 80057bc:	ab1d      	add	r3, sp, #116	; 0x74
 80057be:	9002      	str	r0, [sp, #8]
 80057c0:	9006      	str	r0, [sp, #24]
 80057c2:	9107      	str	r1, [sp, #28]
 80057c4:	9104      	str	r1, [sp, #16]
 80057c6:	4809      	ldr	r0, [pc, #36]	; (80057ec <siprintf+0x38>)
 80057c8:	4909      	ldr	r1, [pc, #36]	; (80057f0 <siprintf+0x3c>)
 80057ca:	cb04      	ldmia	r3!, {r2}
 80057cc:	9105      	str	r1, [sp, #20]
 80057ce:	6800      	ldr	r0, [r0, #0]
 80057d0:	a902      	add	r1, sp, #8
 80057d2:	9301      	str	r3, [sp, #4]
 80057d4:	f000 f870 	bl	80058b8 <_svfiprintf_r>
 80057d8:	2300      	movs	r3, #0
 80057da:	9a02      	ldr	r2, [sp, #8]
 80057dc:	7013      	strb	r3, [r2, #0]
 80057de:	b01c      	add	sp, #112	; 0x70
 80057e0:	bc08      	pop	{r3}
 80057e2:	b003      	add	sp, #12
 80057e4:	4718      	bx	r3
 80057e6:	46c0      	nop			; (mov r8, r8)
 80057e8:	7fffffff 	.word	0x7fffffff
 80057ec:	2000008c 	.word	0x2000008c
 80057f0:	ffff0208 	.word	0xffff0208

080057f4 <__ssputs_r>:
 80057f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80057f6:	688e      	ldr	r6, [r1, #8]
 80057f8:	b085      	sub	sp, #20
 80057fa:	0007      	movs	r7, r0
 80057fc:	000c      	movs	r4, r1
 80057fe:	9203      	str	r2, [sp, #12]
 8005800:	9301      	str	r3, [sp, #4]
 8005802:	429e      	cmp	r6, r3
 8005804:	d83c      	bhi.n	8005880 <__ssputs_r+0x8c>
 8005806:	2390      	movs	r3, #144	; 0x90
 8005808:	898a      	ldrh	r2, [r1, #12]
 800580a:	00db      	lsls	r3, r3, #3
 800580c:	421a      	tst	r2, r3
 800580e:	d034      	beq.n	800587a <__ssputs_r+0x86>
 8005810:	6909      	ldr	r1, [r1, #16]
 8005812:	6823      	ldr	r3, [r4, #0]
 8005814:	6960      	ldr	r0, [r4, #20]
 8005816:	1a5b      	subs	r3, r3, r1
 8005818:	9302      	str	r3, [sp, #8]
 800581a:	2303      	movs	r3, #3
 800581c:	4343      	muls	r3, r0
 800581e:	0fdd      	lsrs	r5, r3, #31
 8005820:	18ed      	adds	r5, r5, r3
 8005822:	9b01      	ldr	r3, [sp, #4]
 8005824:	9802      	ldr	r0, [sp, #8]
 8005826:	3301      	adds	r3, #1
 8005828:	181b      	adds	r3, r3, r0
 800582a:	106d      	asrs	r5, r5, #1
 800582c:	42ab      	cmp	r3, r5
 800582e:	d900      	bls.n	8005832 <__ssputs_r+0x3e>
 8005830:	001d      	movs	r5, r3
 8005832:	0553      	lsls	r3, r2, #21
 8005834:	d532      	bpl.n	800589c <__ssputs_r+0xa8>
 8005836:	0029      	movs	r1, r5
 8005838:	0038      	movs	r0, r7
 800583a:	f000 fb53 	bl	8005ee4 <_malloc_r>
 800583e:	1e06      	subs	r6, r0, #0
 8005840:	d109      	bne.n	8005856 <__ssputs_r+0x62>
 8005842:	230c      	movs	r3, #12
 8005844:	603b      	str	r3, [r7, #0]
 8005846:	2340      	movs	r3, #64	; 0x40
 8005848:	2001      	movs	r0, #1
 800584a:	89a2      	ldrh	r2, [r4, #12]
 800584c:	4240      	negs	r0, r0
 800584e:	4313      	orrs	r3, r2
 8005850:	81a3      	strh	r3, [r4, #12]
 8005852:	b005      	add	sp, #20
 8005854:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005856:	9a02      	ldr	r2, [sp, #8]
 8005858:	6921      	ldr	r1, [r4, #16]
 800585a:	f000 faba 	bl	8005dd2 <memcpy>
 800585e:	89a3      	ldrh	r3, [r4, #12]
 8005860:	4a14      	ldr	r2, [pc, #80]	; (80058b4 <__ssputs_r+0xc0>)
 8005862:	401a      	ands	r2, r3
 8005864:	2380      	movs	r3, #128	; 0x80
 8005866:	4313      	orrs	r3, r2
 8005868:	81a3      	strh	r3, [r4, #12]
 800586a:	9b02      	ldr	r3, [sp, #8]
 800586c:	6126      	str	r6, [r4, #16]
 800586e:	18f6      	adds	r6, r6, r3
 8005870:	6026      	str	r6, [r4, #0]
 8005872:	6165      	str	r5, [r4, #20]
 8005874:	9e01      	ldr	r6, [sp, #4]
 8005876:	1aed      	subs	r5, r5, r3
 8005878:	60a5      	str	r5, [r4, #8]
 800587a:	9b01      	ldr	r3, [sp, #4]
 800587c:	429e      	cmp	r6, r3
 800587e:	d900      	bls.n	8005882 <__ssputs_r+0x8e>
 8005880:	9e01      	ldr	r6, [sp, #4]
 8005882:	0032      	movs	r2, r6
 8005884:	9903      	ldr	r1, [sp, #12]
 8005886:	6820      	ldr	r0, [r4, #0]
 8005888:	f000 faac 	bl	8005de4 <memmove>
 800588c:	68a3      	ldr	r3, [r4, #8]
 800588e:	2000      	movs	r0, #0
 8005890:	1b9b      	subs	r3, r3, r6
 8005892:	60a3      	str	r3, [r4, #8]
 8005894:	6823      	ldr	r3, [r4, #0]
 8005896:	199e      	adds	r6, r3, r6
 8005898:	6026      	str	r6, [r4, #0]
 800589a:	e7da      	b.n	8005852 <__ssputs_r+0x5e>
 800589c:	002a      	movs	r2, r5
 800589e:	0038      	movs	r0, r7
 80058a0:	f000 fb96 	bl	8005fd0 <_realloc_r>
 80058a4:	1e06      	subs	r6, r0, #0
 80058a6:	d1e0      	bne.n	800586a <__ssputs_r+0x76>
 80058a8:	0038      	movs	r0, r7
 80058aa:	6921      	ldr	r1, [r4, #16]
 80058ac:	f000 faae 	bl	8005e0c <_free_r>
 80058b0:	e7c7      	b.n	8005842 <__ssputs_r+0x4e>
 80058b2:	46c0      	nop			; (mov r8, r8)
 80058b4:	fffffb7f 	.word	0xfffffb7f

080058b8 <_svfiprintf_r>:
 80058b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80058ba:	b0a1      	sub	sp, #132	; 0x84
 80058bc:	9003      	str	r0, [sp, #12]
 80058be:	001d      	movs	r5, r3
 80058c0:	898b      	ldrh	r3, [r1, #12]
 80058c2:	000f      	movs	r7, r1
 80058c4:	0016      	movs	r6, r2
 80058c6:	061b      	lsls	r3, r3, #24
 80058c8:	d511      	bpl.n	80058ee <_svfiprintf_r+0x36>
 80058ca:	690b      	ldr	r3, [r1, #16]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d10e      	bne.n	80058ee <_svfiprintf_r+0x36>
 80058d0:	2140      	movs	r1, #64	; 0x40
 80058d2:	f000 fb07 	bl	8005ee4 <_malloc_r>
 80058d6:	6038      	str	r0, [r7, #0]
 80058d8:	6138      	str	r0, [r7, #16]
 80058da:	2800      	cmp	r0, #0
 80058dc:	d105      	bne.n	80058ea <_svfiprintf_r+0x32>
 80058de:	230c      	movs	r3, #12
 80058e0:	9a03      	ldr	r2, [sp, #12]
 80058e2:	3801      	subs	r0, #1
 80058e4:	6013      	str	r3, [r2, #0]
 80058e6:	b021      	add	sp, #132	; 0x84
 80058e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80058ea:	2340      	movs	r3, #64	; 0x40
 80058ec:	617b      	str	r3, [r7, #20]
 80058ee:	2300      	movs	r3, #0
 80058f0:	ac08      	add	r4, sp, #32
 80058f2:	6163      	str	r3, [r4, #20]
 80058f4:	3320      	adds	r3, #32
 80058f6:	7663      	strb	r3, [r4, #25]
 80058f8:	3310      	adds	r3, #16
 80058fa:	76a3      	strb	r3, [r4, #26]
 80058fc:	9507      	str	r5, [sp, #28]
 80058fe:	0035      	movs	r5, r6
 8005900:	782b      	ldrb	r3, [r5, #0]
 8005902:	2b00      	cmp	r3, #0
 8005904:	d001      	beq.n	800590a <_svfiprintf_r+0x52>
 8005906:	2b25      	cmp	r3, #37	; 0x25
 8005908:	d147      	bne.n	800599a <_svfiprintf_r+0xe2>
 800590a:	1bab      	subs	r3, r5, r6
 800590c:	9305      	str	r3, [sp, #20]
 800590e:	42b5      	cmp	r5, r6
 8005910:	d00c      	beq.n	800592c <_svfiprintf_r+0x74>
 8005912:	0032      	movs	r2, r6
 8005914:	0039      	movs	r1, r7
 8005916:	9803      	ldr	r0, [sp, #12]
 8005918:	f7ff ff6c 	bl	80057f4 <__ssputs_r>
 800591c:	1c43      	adds	r3, r0, #1
 800591e:	d100      	bne.n	8005922 <_svfiprintf_r+0x6a>
 8005920:	e0ae      	b.n	8005a80 <_svfiprintf_r+0x1c8>
 8005922:	6962      	ldr	r2, [r4, #20]
 8005924:	9b05      	ldr	r3, [sp, #20]
 8005926:	4694      	mov	ip, r2
 8005928:	4463      	add	r3, ip
 800592a:	6163      	str	r3, [r4, #20]
 800592c:	782b      	ldrb	r3, [r5, #0]
 800592e:	2b00      	cmp	r3, #0
 8005930:	d100      	bne.n	8005934 <_svfiprintf_r+0x7c>
 8005932:	e0a5      	b.n	8005a80 <_svfiprintf_r+0x1c8>
 8005934:	2201      	movs	r2, #1
 8005936:	2300      	movs	r3, #0
 8005938:	4252      	negs	r2, r2
 800593a:	6062      	str	r2, [r4, #4]
 800593c:	a904      	add	r1, sp, #16
 800593e:	3254      	adds	r2, #84	; 0x54
 8005940:	1852      	adds	r2, r2, r1
 8005942:	1c6e      	adds	r6, r5, #1
 8005944:	6023      	str	r3, [r4, #0]
 8005946:	60e3      	str	r3, [r4, #12]
 8005948:	60a3      	str	r3, [r4, #8]
 800594a:	7013      	strb	r3, [r2, #0]
 800594c:	65a3      	str	r3, [r4, #88]	; 0x58
 800594e:	2205      	movs	r2, #5
 8005950:	7831      	ldrb	r1, [r6, #0]
 8005952:	4854      	ldr	r0, [pc, #336]	; (8005aa4 <_svfiprintf_r+0x1ec>)
 8005954:	f000 fa32 	bl	8005dbc <memchr>
 8005958:	1c75      	adds	r5, r6, #1
 800595a:	2800      	cmp	r0, #0
 800595c:	d11f      	bne.n	800599e <_svfiprintf_r+0xe6>
 800595e:	6822      	ldr	r2, [r4, #0]
 8005960:	06d3      	lsls	r3, r2, #27
 8005962:	d504      	bpl.n	800596e <_svfiprintf_r+0xb6>
 8005964:	2353      	movs	r3, #83	; 0x53
 8005966:	a904      	add	r1, sp, #16
 8005968:	185b      	adds	r3, r3, r1
 800596a:	2120      	movs	r1, #32
 800596c:	7019      	strb	r1, [r3, #0]
 800596e:	0713      	lsls	r3, r2, #28
 8005970:	d504      	bpl.n	800597c <_svfiprintf_r+0xc4>
 8005972:	2353      	movs	r3, #83	; 0x53
 8005974:	a904      	add	r1, sp, #16
 8005976:	185b      	adds	r3, r3, r1
 8005978:	212b      	movs	r1, #43	; 0x2b
 800597a:	7019      	strb	r1, [r3, #0]
 800597c:	7833      	ldrb	r3, [r6, #0]
 800597e:	2b2a      	cmp	r3, #42	; 0x2a
 8005980:	d016      	beq.n	80059b0 <_svfiprintf_r+0xf8>
 8005982:	0035      	movs	r5, r6
 8005984:	2100      	movs	r1, #0
 8005986:	200a      	movs	r0, #10
 8005988:	68e3      	ldr	r3, [r4, #12]
 800598a:	782a      	ldrb	r2, [r5, #0]
 800598c:	1c6e      	adds	r6, r5, #1
 800598e:	3a30      	subs	r2, #48	; 0x30
 8005990:	2a09      	cmp	r2, #9
 8005992:	d94e      	bls.n	8005a32 <_svfiprintf_r+0x17a>
 8005994:	2900      	cmp	r1, #0
 8005996:	d111      	bne.n	80059bc <_svfiprintf_r+0x104>
 8005998:	e017      	b.n	80059ca <_svfiprintf_r+0x112>
 800599a:	3501      	adds	r5, #1
 800599c:	e7b0      	b.n	8005900 <_svfiprintf_r+0x48>
 800599e:	4b41      	ldr	r3, [pc, #260]	; (8005aa4 <_svfiprintf_r+0x1ec>)
 80059a0:	6822      	ldr	r2, [r4, #0]
 80059a2:	1ac0      	subs	r0, r0, r3
 80059a4:	2301      	movs	r3, #1
 80059a6:	4083      	lsls	r3, r0
 80059a8:	4313      	orrs	r3, r2
 80059aa:	002e      	movs	r6, r5
 80059ac:	6023      	str	r3, [r4, #0]
 80059ae:	e7ce      	b.n	800594e <_svfiprintf_r+0x96>
 80059b0:	9b07      	ldr	r3, [sp, #28]
 80059b2:	1d19      	adds	r1, r3, #4
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	9107      	str	r1, [sp, #28]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	db01      	blt.n	80059c0 <_svfiprintf_r+0x108>
 80059bc:	930b      	str	r3, [sp, #44]	; 0x2c
 80059be:	e004      	b.n	80059ca <_svfiprintf_r+0x112>
 80059c0:	425b      	negs	r3, r3
 80059c2:	60e3      	str	r3, [r4, #12]
 80059c4:	2302      	movs	r3, #2
 80059c6:	4313      	orrs	r3, r2
 80059c8:	6023      	str	r3, [r4, #0]
 80059ca:	782b      	ldrb	r3, [r5, #0]
 80059cc:	2b2e      	cmp	r3, #46	; 0x2e
 80059ce:	d10a      	bne.n	80059e6 <_svfiprintf_r+0x12e>
 80059d0:	786b      	ldrb	r3, [r5, #1]
 80059d2:	2b2a      	cmp	r3, #42	; 0x2a
 80059d4:	d135      	bne.n	8005a42 <_svfiprintf_r+0x18a>
 80059d6:	9b07      	ldr	r3, [sp, #28]
 80059d8:	3502      	adds	r5, #2
 80059da:	1d1a      	adds	r2, r3, #4
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	9207      	str	r2, [sp, #28]
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	db2b      	blt.n	8005a3c <_svfiprintf_r+0x184>
 80059e4:	9309      	str	r3, [sp, #36]	; 0x24
 80059e6:	4e30      	ldr	r6, [pc, #192]	; (8005aa8 <_svfiprintf_r+0x1f0>)
 80059e8:	2203      	movs	r2, #3
 80059ea:	0030      	movs	r0, r6
 80059ec:	7829      	ldrb	r1, [r5, #0]
 80059ee:	f000 f9e5 	bl	8005dbc <memchr>
 80059f2:	2800      	cmp	r0, #0
 80059f4:	d006      	beq.n	8005a04 <_svfiprintf_r+0x14c>
 80059f6:	2340      	movs	r3, #64	; 0x40
 80059f8:	1b80      	subs	r0, r0, r6
 80059fa:	4083      	lsls	r3, r0
 80059fc:	6822      	ldr	r2, [r4, #0]
 80059fe:	3501      	adds	r5, #1
 8005a00:	4313      	orrs	r3, r2
 8005a02:	6023      	str	r3, [r4, #0]
 8005a04:	7829      	ldrb	r1, [r5, #0]
 8005a06:	2206      	movs	r2, #6
 8005a08:	4828      	ldr	r0, [pc, #160]	; (8005aac <_svfiprintf_r+0x1f4>)
 8005a0a:	1c6e      	adds	r6, r5, #1
 8005a0c:	7621      	strb	r1, [r4, #24]
 8005a0e:	f000 f9d5 	bl	8005dbc <memchr>
 8005a12:	2800      	cmp	r0, #0
 8005a14:	d03c      	beq.n	8005a90 <_svfiprintf_r+0x1d8>
 8005a16:	4b26      	ldr	r3, [pc, #152]	; (8005ab0 <_svfiprintf_r+0x1f8>)
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d125      	bne.n	8005a68 <_svfiprintf_r+0x1b0>
 8005a1c:	2207      	movs	r2, #7
 8005a1e:	9b07      	ldr	r3, [sp, #28]
 8005a20:	3307      	adds	r3, #7
 8005a22:	4393      	bics	r3, r2
 8005a24:	3308      	adds	r3, #8
 8005a26:	9307      	str	r3, [sp, #28]
 8005a28:	6963      	ldr	r3, [r4, #20]
 8005a2a:	9a04      	ldr	r2, [sp, #16]
 8005a2c:	189b      	adds	r3, r3, r2
 8005a2e:	6163      	str	r3, [r4, #20]
 8005a30:	e765      	b.n	80058fe <_svfiprintf_r+0x46>
 8005a32:	4343      	muls	r3, r0
 8005a34:	0035      	movs	r5, r6
 8005a36:	2101      	movs	r1, #1
 8005a38:	189b      	adds	r3, r3, r2
 8005a3a:	e7a6      	b.n	800598a <_svfiprintf_r+0xd2>
 8005a3c:	2301      	movs	r3, #1
 8005a3e:	425b      	negs	r3, r3
 8005a40:	e7d0      	b.n	80059e4 <_svfiprintf_r+0x12c>
 8005a42:	2300      	movs	r3, #0
 8005a44:	200a      	movs	r0, #10
 8005a46:	001a      	movs	r2, r3
 8005a48:	3501      	adds	r5, #1
 8005a4a:	6063      	str	r3, [r4, #4]
 8005a4c:	7829      	ldrb	r1, [r5, #0]
 8005a4e:	1c6e      	adds	r6, r5, #1
 8005a50:	3930      	subs	r1, #48	; 0x30
 8005a52:	2909      	cmp	r1, #9
 8005a54:	d903      	bls.n	8005a5e <_svfiprintf_r+0x1a6>
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d0c5      	beq.n	80059e6 <_svfiprintf_r+0x12e>
 8005a5a:	9209      	str	r2, [sp, #36]	; 0x24
 8005a5c:	e7c3      	b.n	80059e6 <_svfiprintf_r+0x12e>
 8005a5e:	4342      	muls	r2, r0
 8005a60:	0035      	movs	r5, r6
 8005a62:	2301      	movs	r3, #1
 8005a64:	1852      	adds	r2, r2, r1
 8005a66:	e7f1      	b.n	8005a4c <_svfiprintf_r+0x194>
 8005a68:	ab07      	add	r3, sp, #28
 8005a6a:	9300      	str	r3, [sp, #0]
 8005a6c:	003a      	movs	r2, r7
 8005a6e:	0021      	movs	r1, r4
 8005a70:	4b10      	ldr	r3, [pc, #64]	; (8005ab4 <_svfiprintf_r+0x1fc>)
 8005a72:	9803      	ldr	r0, [sp, #12]
 8005a74:	e000      	b.n	8005a78 <_svfiprintf_r+0x1c0>
 8005a76:	bf00      	nop
 8005a78:	9004      	str	r0, [sp, #16]
 8005a7a:	9b04      	ldr	r3, [sp, #16]
 8005a7c:	3301      	adds	r3, #1
 8005a7e:	d1d3      	bne.n	8005a28 <_svfiprintf_r+0x170>
 8005a80:	89bb      	ldrh	r3, [r7, #12]
 8005a82:	980d      	ldr	r0, [sp, #52]	; 0x34
 8005a84:	065b      	lsls	r3, r3, #25
 8005a86:	d400      	bmi.n	8005a8a <_svfiprintf_r+0x1d2>
 8005a88:	e72d      	b.n	80058e6 <_svfiprintf_r+0x2e>
 8005a8a:	2001      	movs	r0, #1
 8005a8c:	4240      	negs	r0, r0
 8005a8e:	e72a      	b.n	80058e6 <_svfiprintf_r+0x2e>
 8005a90:	ab07      	add	r3, sp, #28
 8005a92:	9300      	str	r3, [sp, #0]
 8005a94:	003a      	movs	r2, r7
 8005a96:	0021      	movs	r1, r4
 8005a98:	4b06      	ldr	r3, [pc, #24]	; (8005ab4 <_svfiprintf_r+0x1fc>)
 8005a9a:	9803      	ldr	r0, [sp, #12]
 8005a9c:	f000 f87c 	bl	8005b98 <_printf_i>
 8005aa0:	e7ea      	b.n	8005a78 <_svfiprintf_r+0x1c0>
 8005aa2:	46c0      	nop			; (mov r8, r8)
 8005aa4:	080066f4 	.word	0x080066f4
 8005aa8:	080066fa 	.word	0x080066fa
 8005aac:	080066fe 	.word	0x080066fe
 8005ab0:	00000000 	.word	0x00000000
 8005ab4:	080057f5 	.word	0x080057f5

08005ab8 <_printf_common>:
 8005ab8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005aba:	0015      	movs	r5, r2
 8005abc:	9301      	str	r3, [sp, #4]
 8005abe:	688a      	ldr	r2, [r1, #8]
 8005ac0:	690b      	ldr	r3, [r1, #16]
 8005ac2:	000c      	movs	r4, r1
 8005ac4:	9000      	str	r0, [sp, #0]
 8005ac6:	4293      	cmp	r3, r2
 8005ac8:	da00      	bge.n	8005acc <_printf_common+0x14>
 8005aca:	0013      	movs	r3, r2
 8005acc:	0022      	movs	r2, r4
 8005ace:	602b      	str	r3, [r5, #0]
 8005ad0:	3243      	adds	r2, #67	; 0x43
 8005ad2:	7812      	ldrb	r2, [r2, #0]
 8005ad4:	2a00      	cmp	r2, #0
 8005ad6:	d001      	beq.n	8005adc <_printf_common+0x24>
 8005ad8:	3301      	adds	r3, #1
 8005ada:	602b      	str	r3, [r5, #0]
 8005adc:	6823      	ldr	r3, [r4, #0]
 8005ade:	069b      	lsls	r3, r3, #26
 8005ae0:	d502      	bpl.n	8005ae8 <_printf_common+0x30>
 8005ae2:	682b      	ldr	r3, [r5, #0]
 8005ae4:	3302      	adds	r3, #2
 8005ae6:	602b      	str	r3, [r5, #0]
 8005ae8:	6822      	ldr	r2, [r4, #0]
 8005aea:	2306      	movs	r3, #6
 8005aec:	0017      	movs	r7, r2
 8005aee:	401f      	ands	r7, r3
 8005af0:	421a      	tst	r2, r3
 8005af2:	d027      	beq.n	8005b44 <_printf_common+0x8c>
 8005af4:	0023      	movs	r3, r4
 8005af6:	3343      	adds	r3, #67	; 0x43
 8005af8:	781b      	ldrb	r3, [r3, #0]
 8005afa:	1e5a      	subs	r2, r3, #1
 8005afc:	4193      	sbcs	r3, r2
 8005afe:	6822      	ldr	r2, [r4, #0]
 8005b00:	0692      	lsls	r2, r2, #26
 8005b02:	d430      	bmi.n	8005b66 <_printf_common+0xae>
 8005b04:	0022      	movs	r2, r4
 8005b06:	9901      	ldr	r1, [sp, #4]
 8005b08:	9800      	ldr	r0, [sp, #0]
 8005b0a:	9e08      	ldr	r6, [sp, #32]
 8005b0c:	3243      	adds	r2, #67	; 0x43
 8005b0e:	47b0      	blx	r6
 8005b10:	1c43      	adds	r3, r0, #1
 8005b12:	d025      	beq.n	8005b60 <_printf_common+0xa8>
 8005b14:	2306      	movs	r3, #6
 8005b16:	6820      	ldr	r0, [r4, #0]
 8005b18:	682a      	ldr	r2, [r5, #0]
 8005b1a:	68e1      	ldr	r1, [r4, #12]
 8005b1c:	2500      	movs	r5, #0
 8005b1e:	4003      	ands	r3, r0
 8005b20:	2b04      	cmp	r3, #4
 8005b22:	d103      	bne.n	8005b2c <_printf_common+0x74>
 8005b24:	1a8d      	subs	r5, r1, r2
 8005b26:	43eb      	mvns	r3, r5
 8005b28:	17db      	asrs	r3, r3, #31
 8005b2a:	401d      	ands	r5, r3
 8005b2c:	68a3      	ldr	r3, [r4, #8]
 8005b2e:	6922      	ldr	r2, [r4, #16]
 8005b30:	4293      	cmp	r3, r2
 8005b32:	dd01      	ble.n	8005b38 <_printf_common+0x80>
 8005b34:	1a9b      	subs	r3, r3, r2
 8005b36:	18ed      	adds	r5, r5, r3
 8005b38:	2700      	movs	r7, #0
 8005b3a:	42bd      	cmp	r5, r7
 8005b3c:	d120      	bne.n	8005b80 <_printf_common+0xc8>
 8005b3e:	2000      	movs	r0, #0
 8005b40:	e010      	b.n	8005b64 <_printf_common+0xac>
 8005b42:	3701      	adds	r7, #1
 8005b44:	68e3      	ldr	r3, [r4, #12]
 8005b46:	682a      	ldr	r2, [r5, #0]
 8005b48:	1a9b      	subs	r3, r3, r2
 8005b4a:	42bb      	cmp	r3, r7
 8005b4c:	ddd2      	ble.n	8005af4 <_printf_common+0x3c>
 8005b4e:	0022      	movs	r2, r4
 8005b50:	2301      	movs	r3, #1
 8005b52:	9901      	ldr	r1, [sp, #4]
 8005b54:	9800      	ldr	r0, [sp, #0]
 8005b56:	9e08      	ldr	r6, [sp, #32]
 8005b58:	3219      	adds	r2, #25
 8005b5a:	47b0      	blx	r6
 8005b5c:	1c43      	adds	r3, r0, #1
 8005b5e:	d1f0      	bne.n	8005b42 <_printf_common+0x8a>
 8005b60:	2001      	movs	r0, #1
 8005b62:	4240      	negs	r0, r0
 8005b64:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005b66:	2030      	movs	r0, #48	; 0x30
 8005b68:	18e1      	adds	r1, r4, r3
 8005b6a:	3143      	adds	r1, #67	; 0x43
 8005b6c:	7008      	strb	r0, [r1, #0]
 8005b6e:	0021      	movs	r1, r4
 8005b70:	1c5a      	adds	r2, r3, #1
 8005b72:	3145      	adds	r1, #69	; 0x45
 8005b74:	7809      	ldrb	r1, [r1, #0]
 8005b76:	18a2      	adds	r2, r4, r2
 8005b78:	3243      	adds	r2, #67	; 0x43
 8005b7a:	3302      	adds	r3, #2
 8005b7c:	7011      	strb	r1, [r2, #0]
 8005b7e:	e7c1      	b.n	8005b04 <_printf_common+0x4c>
 8005b80:	0022      	movs	r2, r4
 8005b82:	2301      	movs	r3, #1
 8005b84:	9901      	ldr	r1, [sp, #4]
 8005b86:	9800      	ldr	r0, [sp, #0]
 8005b88:	9e08      	ldr	r6, [sp, #32]
 8005b8a:	321a      	adds	r2, #26
 8005b8c:	47b0      	blx	r6
 8005b8e:	1c43      	adds	r3, r0, #1
 8005b90:	d0e6      	beq.n	8005b60 <_printf_common+0xa8>
 8005b92:	3701      	adds	r7, #1
 8005b94:	e7d1      	b.n	8005b3a <_printf_common+0x82>
	...

08005b98 <_printf_i>:
 8005b98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005b9a:	b08b      	sub	sp, #44	; 0x2c
 8005b9c:	9206      	str	r2, [sp, #24]
 8005b9e:	000a      	movs	r2, r1
 8005ba0:	3243      	adds	r2, #67	; 0x43
 8005ba2:	9307      	str	r3, [sp, #28]
 8005ba4:	9005      	str	r0, [sp, #20]
 8005ba6:	9204      	str	r2, [sp, #16]
 8005ba8:	7e0a      	ldrb	r2, [r1, #24]
 8005baa:	000c      	movs	r4, r1
 8005bac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005bae:	2a78      	cmp	r2, #120	; 0x78
 8005bb0:	d807      	bhi.n	8005bc2 <_printf_i+0x2a>
 8005bb2:	2a62      	cmp	r2, #98	; 0x62
 8005bb4:	d809      	bhi.n	8005bca <_printf_i+0x32>
 8005bb6:	2a00      	cmp	r2, #0
 8005bb8:	d100      	bne.n	8005bbc <_printf_i+0x24>
 8005bba:	e0c1      	b.n	8005d40 <_printf_i+0x1a8>
 8005bbc:	2a58      	cmp	r2, #88	; 0x58
 8005bbe:	d100      	bne.n	8005bc2 <_printf_i+0x2a>
 8005bc0:	e08c      	b.n	8005cdc <_printf_i+0x144>
 8005bc2:	0026      	movs	r6, r4
 8005bc4:	3642      	adds	r6, #66	; 0x42
 8005bc6:	7032      	strb	r2, [r6, #0]
 8005bc8:	e022      	b.n	8005c10 <_printf_i+0x78>
 8005bca:	0010      	movs	r0, r2
 8005bcc:	3863      	subs	r0, #99	; 0x63
 8005bce:	2815      	cmp	r0, #21
 8005bd0:	d8f7      	bhi.n	8005bc2 <_printf_i+0x2a>
 8005bd2:	f7fa faab 	bl	800012c <__gnu_thumb1_case_shi>
 8005bd6:	0016      	.short	0x0016
 8005bd8:	fff6001f 	.word	0xfff6001f
 8005bdc:	fff6fff6 	.word	0xfff6fff6
 8005be0:	001ffff6 	.word	0x001ffff6
 8005be4:	fff6fff6 	.word	0xfff6fff6
 8005be8:	fff6fff6 	.word	0xfff6fff6
 8005bec:	003600a8 	.word	0x003600a8
 8005bf0:	fff6009a 	.word	0xfff6009a
 8005bf4:	00b9fff6 	.word	0x00b9fff6
 8005bf8:	0036fff6 	.word	0x0036fff6
 8005bfc:	fff6fff6 	.word	0xfff6fff6
 8005c00:	009e      	.short	0x009e
 8005c02:	0026      	movs	r6, r4
 8005c04:	681a      	ldr	r2, [r3, #0]
 8005c06:	3642      	adds	r6, #66	; 0x42
 8005c08:	1d11      	adds	r1, r2, #4
 8005c0a:	6019      	str	r1, [r3, #0]
 8005c0c:	6813      	ldr	r3, [r2, #0]
 8005c0e:	7033      	strb	r3, [r6, #0]
 8005c10:	2301      	movs	r3, #1
 8005c12:	e0a7      	b.n	8005d64 <_printf_i+0x1cc>
 8005c14:	6808      	ldr	r0, [r1, #0]
 8005c16:	6819      	ldr	r1, [r3, #0]
 8005c18:	1d0a      	adds	r2, r1, #4
 8005c1a:	0605      	lsls	r5, r0, #24
 8005c1c:	d50b      	bpl.n	8005c36 <_printf_i+0x9e>
 8005c1e:	680d      	ldr	r5, [r1, #0]
 8005c20:	601a      	str	r2, [r3, #0]
 8005c22:	2d00      	cmp	r5, #0
 8005c24:	da03      	bge.n	8005c2e <_printf_i+0x96>
 8005c26:	232d      	movs	r3, #45	; 0x2d
 8005c28:	9a04      	ldr	r2, [sp, #16]
 8005c2a:	426d      	negs	r5, r5
 8005c2c:	7013      	strb	r3, [r2, #0]
 8005c2e:	4b61      	ldr	r3, [pc, #388]	; (8005db4 <_printf_i+0x21c>)
 8005c30:	270a      	movs	r7, #10
 8005c32:	9303      	str	r3, [sp, #12]
 8005c34:	e01b      	b.n	8005c6e <_printf_i+0xd6>
 8005c36:	680d      	ldr	r5, [r1, #0]
 8005c38:	601a      	str	r2, [r3, #0]
 8005c3a:	0641      	lsls	r1, r0, #25
 8005c3c:	d5f1      	bpl.n	8005c22 <_printf_i+0x8a>
 8005c3e:	b22d      	sxth	r5, r5
 8005c40:	e7ef      	b.n	8005c22 <_printf_i+0x8a>
 8005c42:	680d      	ldr	r5, [r1, #0]
 8005c44:	6819      	ldr	r1, [r3, #0]
 8005c46:	1d08      	adds	r0, r1, #4
 8005c48:	6018      	str	r0, [r3, #0]
 8005c4a:	062e      	lsls	r6, r5, #24
 8005c4c:	d501      	bpl.n	8005c52 <_printf_i+0xba>
 8005c4e:	680d      	ldr	r5, [r1, #0]
 8005c50:	e003      	b.n	8005c5a <_printf_i+0xc2>
 8005c52:	066d      	lsls	r5, r5, #25
 8005c54:	d5fb      	bpl.n	8005c4e <_printf_i+0xb6>
 8005c56:	680d      	ldr	r5, [r1, #0]
 8005c58:	b2ad      	uxth	r5, r5
 8005c5a:	4b56      	ldr	r3, [pc, #344]	; (8005db4 <_printf_i+0x21c>)
 8005c5c:	2708      	movs	r7, #8
 8005c5e:	9303      	str	r3, [sp, #12]
 8005c60:	2a6f      	cmp	r2, #111	; 0x6f
 8005c62:	d000      	beq.n	8005c66 <_printf_i+0xce>
 8005c64:	3702      	adds	r7, #2
 8005c66:	0023      	movs	r3, r4
 8005c68:	2200      	movs	r2, #0
 8005c6a:	3343      	adds	r3, #67	; 0x43
 8005c6c:	701a      	strb	r2, [r3, #0]
 8005c6e:	6863      	ldr	r3, [r4, #4]
 8005c70:	60a3      	str	r3, [r4, #8]
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	db03      	blt.n	8005c7e <_printf_i+0xe6>
 8005c76:	2204      	movs	r2, #4
 8005c78:	6821      	ldr	r1, [r4, #0]
 8005c7a:	4391      	bics	r1, r2
 8005c7c:	6021      	str	r1, [r4, #0]
 8005c7e:	2d00      	cmp	r5, #0
 8005c80:	d102      	bne.n	8005c88 <_printf_i+0xf0>
 8005c82:	9e04      	ldr	r6, [sp, #16]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d00c      	beq.n	8005ca2 <_printf_i+0x10a>
 8005c88:	9e04      	ldr	r6, [sp, #16]
 8005c8a:	0028      	movs	r0, r5
 8005c8c:	0039      	movs	r1, r7
 8005c8e:	f7fa fadd 	bl	800024c <__aeabi_uidivmod>
 8005c92:	9b03      	ldr	r3, [sp, #12]
 8005c94:	3e01      	subs	r6, #1
 8005c96:	5c5b      	ldrb	r3, [r3, r1]
 8005c98:	7033      	strb	r3, [r6, #0]
 8005c9a:	002b      	movs	r3, r5
 8005c9c:	0005      	movs	r5, r0
 8005c9e:	429f      	cmp	r7, r3
 8005ca0:	d9f3      	bls.n	8005c8a <_printf_i+0xf2>
 8005ca2:	2f08      	cmp	r7, #8
 8005ca4:	d109      	bne.n	8005cba <_printf_i+0x122>
 8005ca6:	6823      	ldr	r3, [r4, #0]
 8005ca8:	07db      	lsls	r3, r3, #31
 8005caa:	d506      	bpl.n	8005cba <_printf_i+0x122>
 8005cac:	6863      	ldr	r3, [r4, #4]
 8005cae:	6922      	ldr	r2, [r4, #16]
 8005cb0:	4293      	cmp	r3, r2
 8005cb2:	dc02      	bgt.n	8005cba <_printf_i+0x122>
 8005cb4:	2330      	movs	r3, #48	; 0x30
 8005cb6:	3e01      	subs	r6, #1
 8005cb8:	7033      	strb	r3, [r6, #0]
 8005cba:	9b04      	ldr	r3, [sp, #16]
 8005cbc:	1b9b      	subs	r3, r3, r6
 8005cbe:	6123      	str	r3, [r4, #16]
 8005cc0:	9b07      	ldr	r3, [sp, #28]
 8005cc2:	0021      	movs	r1, r4
 8005cc4:	9300      	str	r3, [sp, #0]
 8005cc6:	9805      	ldr	r0, [sp, #20]
 8005cc8:	9b06      	ldr	r3, [sp, #24]
 8005cca:	aa09      	add	r2, sp, #36	; 0x24
 8005ccc:	f7ff fef4 	bl	8005ab8 <_printf_common>
 8005cd0:	1c43      	adds	r3, r0, #1
 8005cd2:	d14c      	bne.n	8005d6e <_printf_i+0x1d6>
 8005cd4:	2001      	movs	r0, #1
 8005cd6:	4240      	negs	r0, r0
 8005cd8:	b00b      	add	sp, #44	; 0x2c
 8005cda:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005cdc:	3145      	adds	r1, #69	; 0x45
 8005cde:	700a      	strb	r2, [r1, #0]
 8005ce0:	4a34      	ldr	r2, [pc, #208]	; (8005db4 <_printf_i+0x21c>)
 8005ce2:	9203      	str	r2, [sp, #12]
 8005ce4:	681a      	ldr	r2, [r3, #0]
 8005ce6:	6821      	ldr	r1, [r4, #0]
 8005ce8:	ca20      	ldmia	r2!, {r5}
 8005cea:	601a      	str	r2, [r3, #0]
 8005cec:	0608      	lsls	r0, r1, #24
 8005cee:	d516      	bpl.n	8005d1e <_printf_i+0x186>
 8005cf0:	07cb      	lsls	r3, r1, #31
 8005cf2:	d502      	bpl.n	8005cfa <_printf_i+0x162>
 8005cf4:	2320      	movs	r3, #32
 8005cf6:	4319      	orrs	r1, r3
 8005cf8:	6021      	str	r1, [r4, #0]
 8005cfa:	2710      	movs	r7, #16
 8005cfc:	2d00      	cmp	r5, #0
 8005cfe:	d1b2      	bne.n	8005c66 <_printf_i+0xce>
 8005d00:	2320      	movs	r3, #32
 8005d02:	6822      	ldr	r2, [r4, #0]
 8005d04:	439a      	bics	r2, r3
 8005d06:	6022      	str	r2, [r4, #0]
 8005d08:	e7ad      	b.n	8005c66 <_printf_i+0xce>
 8005d0a:	2220      	movs	r2, #32
 8005d0c:	6809      	ldr	r1, [r1, #0]
 8005d0e:	430a      	orrs	r2, r1
 8005d10:	6022      	str	r2, [r4, #0]
 8005d12:	0022      	movs	r2, r4
 8005d14:	2178      	movs	r1, #120	; 0x78
 8005d16:	3245      	adds	r2, #69	; 0x45
 8005d18:	7011      	strb	r1, [r2, #0]
 8005d1a:	4a27      	ldr	r2, [pc, #156]	; (8005db8 <_printf_i+0x220>)
 8005d1c:	e7e1      	b.n	8005ce2 <_printf_i+0x14a>
 8005d1e:	0648      	lsls	r0, r1, #25
 8005d20:	d5e6      	bpl.n	8005cf0 <_printf_i+0x158>
 8005d22:	b2ad      	uxth	r5, r5
 8005d24:	e7e4      	b.n	8005cf0 <_printf_i+0x158>
 8005d26:	681a      	ldr	r2, [r3, #0]
 8005d28:	680d      	ldr	r5, [r1, #0]
 8005d2a:	1d10      	adds	r0, r2, #4
 8005d2c:	6949      	ldr	r1, [r1, #20]
 8005d2e:	6018      	str	r0, [r3, #0]
 8005d30:	6813      	ldr	r3, [r2, #0]
 8005d32:	062e      	lsls	r6, r5, #24
 8005d34:	d501      	bpl.n	8005d3a <_printf_i+0x1a2>
 8005d36:	6019      	str	r1, [r3, #0]
 8005d38:	e002      	b.n	8005d40 <_printf_i+0x1a8>
 8005d3a:	066d      	lsls	r5, r5, #25
 8005d3c:	d5fb      	bpl.n	8005d36 <_printf_i+0x19e>
 8005d3e:	8019      	strh	r1, [r3, #0]
 8005d40:	2300      	movs	r3, #0
 8005d42:	9e04      	ldr	r6, [sp, #16]
 8005d44:	6123      	str	r3, [r4, #16]
 8005d46:	e7bb      	b.n	8005cc0 <_printf_i+0x128>
 8005d48:	681a      	ldr	r2, [r3, #0]
 8005d4a:	1d11      	adds	r1, r2, #4
 8005d4c:	6019      	str	r1, [r3, #0]
 8005d4e:	6816      	ldr	r6, [r2, #0]
 8005d50:	2100      	movs	r1, #0
 8005d52:	0030      	movs	r0, r6
 8005d54:	6862      	ldr	r2, [r4, #4]
 8005d56:	f000 f831 	bl	8005dbc <memchr>
 8005d5a:	2800      	cmp	r0, #0
 8005d5c:	d001      	beq.n	8005d62 <_printf_i+0x1ca>
 8005d5e:	1b80      	subs	r0, r0, r6
 8005d60:	6060      	str	r0, [r4, #4]
 8005d62:	6863      	ldr	r3, [r4, #4]
 8005d64:	6123      	str	r3, [r4, #16]
 8005d66:	2300      	movs	r3, #0
 8005d68:	9a04      	ldr	r2, [sp, #16]
 8005d6a:	7013      	strb	r3, [r2, #0]
 8005d6c:	e7a8      	b.n	8005cc0 <_printf_i+0x128>
 8005d6e:	6923      	ldr	r3, [r4, #16]
 8005d70:	0032      	movs	r2, r6
 8005d72:	9906      	ldr	r1, [sp, #24]
 8005d74:	9805      	ldr	r0, [sp, #20]
 8005d76:	9d07      	ldr	r5, [sp, #28]
 8005d78:	47a8      	blx	r5
 8005d7a:	1c43      	adds	r3, r0, #1
 8005d7c:	d0aa      	beq.n	8005cd4 <_printf_i+0x13c>
 8005d7e:	6823      	ldr	r3, [r4, #0]
 8005d80:	079b      	lsls	r3, r3, #30
 8005d82:	d415      	bmi.n	8005db0 <_printf_i+0x218>
 8005d84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d86:	68e0      	ldr	r0, [r4, #12]
 8005d88:	4298      	cmp	r0, r3
 8005d8a:	daa5      	bge.n	8005cd8 <_printf_i+0x140>
 8005d8c:	0018      	movs	r0, r3
 8005d8e:	e7a3      	b.n	8005cd8 <_printf_i+0x140>
 8005d90:	0022      	movs	r2, r4
 8005d92:	2301      	movs	r3, #1
 8005d94:	9906      	ldr	r1, [sp, #24]
 8005d96:	9805      	ldr	r0, [sp, #20]
 8005d98:	9e07      	ldr	r6, [sp, #28]
 8005d9a:	3219      	adds	r2, #25
 8005d9c:	47b0      	blx	r6
 8005d9e:	1c43      	adds	r3, r0, #1
 8005da0:	d098      	beq.n	8005cd4 <_printf_i+0x13c>
 8005da2:	3501      	adds	r5, #1
 8005da4:	68e3      	ldr	r3, [r4, #12]
 8005da6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005da8:	1a9b      	subs	r3, r3, r2
 8005daa:	42ab      	cmp	r3, r5
 8005dac:	dcf0      	bgt.n	8005d90 <_printf_i+0x1f8>
 8005dae:	e7e9      	b.n	8005d84 <_printf_i+0x1ec>
 8005db0:	2500      	movs	r5, #0
 8005db2:	e7f7      	b.n	8005da4 <_printf_i+0x20c>
 8005db4:	08006705 	.word	0x08006705
 8005db8:	08006716 	.word	0x08006716

08005dbc <memchr>:
 8005dbc:	b2c9      	uxtb	r1, r1
 8005dbe:	1882      	adds	r2, r0, r2
 8005dc0:	4290      	cmp	r0, r2
 8005dc2:	d101      	bne.n	8005dc8 <memchr+0xc>
 8005dc4:	2000      	movs	r0, #0
 8005dc6:	4770      	bx	lr
 8005dc8:	7803      	ldrb	r3, [r0, #0]
 8005dca:	428b      	cmp	r3, r1
 8005dcc:	d0fb      	beq.n	8005dc6 <memchr+0xa>
 8005dce:	3001      	adds	r0, #1
 8005dd0:	e7f6      	b.n	8005dc0 <memchr+0x4>

08005dd2 <memcpy>:
 8005dd2:	2300      	movs	r3, #0
 8005dd4:	b510      	push	{r4, lr}
 8005dd6:	429a      	cmp	r2, r3
 8005dd8:	d100      	bne.n	8005ddc <memcpy+0xa>
 8005dda:	bd10      	pop	{r4, pc}
 8005ddc:	5ccc      	ldrb	r4, [r1, r3]
 8005dde:	54c4      	strb	r4, [r0, r3]
 8005de0:	3301      	adds	r3, #1
 8005de2:	e7f8      	b.n	8005dd6 <memcpy+0x4>

08005de4 <memmove>:
 8005de4:	b510      	push	{r4, lr}
 8005de6:	4288      	cmp	r0, r1
 8005de8:	d902      	bls.n	8005df0 <memmove+0xc>
 8005dea:	188b      	adds	r3, r1, r2
 8005dec:	4298      	cmp	r0, r3
 8005dee:	d303      	bcc.n	8005df8 <memmove+0x14>
 8005df0:	2300      	movs	r3, #0
 8005df2:	e007      	b.n	8005e04 <memmove+0x20>
 8005df4:	5c8b      	ldrb	r3, [r1, r2]
 8005df6:	5483      	strb	r3, [r0, r2]
 8005df8:	3a01      	subs	r2, #1
 8005dfa:	d2fb      	bcs.n	8005df4 <memmove+0x10>
 8005dfc:	bd10      	pop	{r4, pc}
 8005dfe:	5ccc      	ldrb	r4, [r1, r3]
 8005e00:	54c4      	strb	r4, [r0, r3]
 8005e02:	3301      	adds	r3, #1
 8005e04:	429a      	cmp	r2, r3
 8005e06:	d1fa      	bne.n	8005dfe <memmove+0x1a>
 8005e08:	e7f8      	b.n	8005dfc <memmove+0x18>
	...

08005e0c <_free_r>:
 8005e0c:	b570      	push	{r4, r5, r6, lr}
 8005e0e:	0005      	movs	r5, r0
 8005e10:	2900      	cmp	r1, #0
 8005e12:	d010      	beq.n	8005e36 <_free_r+0x2a>
 8005e14:	1f0c      	subs	r4, r1, #4
 8005e16:	6823      	ldr	r3, [r4, #0]
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	da00      	bge.n	8005e1e <_free_r+0x12>
 8005e1c:	18e4      	adds	r4, r4, r3
 8005e1e:	0028      	movs	r0, r5
 8005e20:	f000 f918 	bl	8006054 <__malloc_lock>
 8005e24:	4a1d      	ldr	r2, [pc, #116]	; (8005e9c <_free_r+0x90>)
 8005e26:	6813      	ldr	r3, [r2, #0]
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d105      	bne.n	8005e38 <_free_r+0x2c>
 8005e2c:	6063      	str	r3, [r4, #4]
 8005e2e:	6014      	str	r4, [r2, #0]
 8005e30:	0028      	movs	r0, r5
 8005e32:	f000 f917 	bl	8006064 <__malloc_unlock>
 8005e36:	bd70      	pop	{r4, r5, r6, pc}
 8005e38:	42a3      	cmp	r3, r4
 8005e3a:	d908      	bls.n	8005e4e <_free_r+0x42>
 8005e3c:	6821      	ldr	r1, [r4, #0]
 8005e3e:	1860      	adds	r0, r4, r1
 8005e40:	4283      	cmp	r3, r0
 8005e42:	d1f3      	bne.n	8005e2c <_free_r+0x20>
 8005e44:	6818      	ldr	r0, [r3, #0]
 8005e46:	685b      	ldr	r3, [r3, #4]
 8005e48:	1841      	adds	r1, r0, r1
 8005e4a:	6021      	str	r1, [r4, #0]
 8005e4c:	e7ee      	b.n	8005e2c <_free_r+0x20>
 8005e4e:	001a      	movs	r2, r3
 8005e50:	685b      	ldr	r3, [r3, #4]
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d001      	beq.n	8005e5a <_free_r+0x4e>
 8005e56:	42a3      	cmp	r3, r4
 8005e58:	d9f9      	bls.n	8005e4e <_free_r+0x42>
 8005e5a:	6811      	ldr	r1, [r2, #0]
 8005e5c:	1850      	adds	r0, r2, r1
 8005e5e:	42a0      	cmp	r0, r4
 8005e60:	d10b      	bne.n	8005e7a <_free_r+0x6e>
 8005e62:	6820      	ldr	r0, [r4, #0]
 8005e64:	1809      	adds	r1, r1, r0
 8005e66:	1850      	adds	r0, r2, r1
 8005e68:	6011      	str	r1, [r2, #0]
 8005e6a:	4283      	cmp	r3, r0
 8005e6c:	d1e0      	bne.n	8005e30 <_free_r+0x24>
 8005e6e:	6818      	ldr	r0, [r3, #0]
 8005e70:	685b      	ldr	r3, [r3, #4]
 8005e72:	1841      	adds	r1, r0, r1
 8005e74:	6011      	str	r1, [r2, #0]
 8005e76:	6053      	str	r3, [r2, #4]
 8005e78:	e7da      	b.n	8005e30 <_free_r+0x24>
 8005e7a:	42a0      	cmp	r0, r4
 8005e7c:	d902      	bls.n	8005e84 <_free_r+0x78>
 8005e7e:	230c      	movs	r3, #12
 8005e80:	602b      	str	r3, [r5, #0]
 8005e82:	e7d5      	b.n	8005e30 <_free_r+0x24>
 8005e84:	6821      	ldr	r1, [r4, #0]
 8005e86:	1860      	adds	r0, r4, r1
 8005e88:	4283      	cmp	r3, r0
 8005e8a:	d103      	bne.n	8005e94 <_free_r+0x88>
 8005e8c:	6818      	ldr	r0, [r3, #0]
 8005e8e:	685b      	ldr	r3, [r3, #4]
 8005e90:	1841      	adds	r1, r0, r1
 8005e92:	6021      	str	r1, [r4, #0]
 8005e94:	6063      	str	r3, [r4, #4]
 8005e96:	6054      	str	r4, [r2, #4]
 8005e98:	e7ca      	b.n	8005e30 <_free_r+0x24>
 8005e9a:	46c0      	nop			; (mov r8, r8)
 8005e9c:	200002b4 	.word	0x200002b4

08005ea0 <sbrk_aligned>:
 8005ea0:	b570      	push	{r4, r5, r6, lr}
 8005ea2:	4e0f      	ldr	r6, [pc, #60]	; (8005ee0 <sbrk_aligned+0x40>)
 8005ea4:	000d      	movs	r5, r1
 8005ea6:	6831      	ldr	r1, [r6, #0]
 8005ea8:	0004      	movs	r4, r0
 8005eaa:	2900      	cmp	r1, #0
 8005eac:	d102      	bne.n	8005eb4 <sbrk_aligned+0x14>
 8005eae:	f000 f8bf 	bl	8006030 <_sbrk_r>
 8005eb2:	6030      	str	r0, [r6, #0]
 8005eb4:	0029      	movs	r1, r5
 8005eb6:	0020      	movs	r0, r4
 8005eb8:	f000 f8ba 	bl	8006030 <_sbrk_r>
 8005ebc:	1c43      	adds	r3, r0, #1
 8005ebe:	d00a      	beq.n	8005ed6 <sbrk_aligned+0x36>
 8005ec0:	2303      	movs	r3, #3
 8005ec2:	1cc5      	adds	r5, r0, #3
 8005ec4:	439d      	bics	r5, r3
 8005ec6:	42a8      	cmp	r0, r5
 8005ec8:	d007      	beq.n	8005eda <sbrk_aligned+0x3a>
 8005eca:	1a29      	subs	r1, r5, r0
 8005ecc:	0020      	movs	r0, r4
 8005ece:	f000 f8af 	bl	8006030 <_sbrk_r>
 8005ed2:	1c43      	adds	r3, r0, #1
 8005ed4:	d101      	bne.n	8005eda <sbrk_aligned+0x3a>
 8005ed6:	2501      	movs	r5, #1
 8005ed8:	426d      	negs	r5, r5
 8005eda:	0028      	movs	r0, r5
 8005edc:	bd70      	pop	{r4, r5, r6, pc}
 8005ede:	46c0      	nop			; (mov r8, r8)
 8005ee0:	200002b8 	.word	0x200002b8

08005ee4 <_malloc_r>:
 8005ee4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005ee6:	2203      	movs	r2, #3
 8005ee8:	1ccb      	adds	r3, r1, #3
 8005eea:	4393      	bics	r3, r2
 8005eec:	3308      	adds	r3, #8
 8005eee:	0006      	movs	r6, r0
 8005ef0:	001f      	movs	r7, r3
 8005ef2:	2b0c      	cmp	r3, #12
 8005ef4:	d232      	bcs.n	8005f5c <_malloc_r+0x78>
 8005ef6:	270c      	movs	r7, #12
 8005ef8:	42b9      	cmp	r1, r7
 8005efa:	d831      	bhi.n	8005f60 <_malloc_r+0x7c>
 8005efc:	0030      	movs	r0, r6
 8005efe:	f000 f8a9 	bl	8006054 <__malloc_lock>
 8005f02:	4d32      	ldr	r5, [pc, #200]	; (8005fcc <_malloc_r+0xe8>)
 8005f04:	682b      	ldr	r3, [r5, #0]
 8005f06:	001c      	movs	r4, r3
 8005f08:	2c00      	cmp	r4, #0
 8005f0a:	d12e      	bne.n	8005f6a <_malloc_r+0x86>
 8005f0c:	0039      	movs	r1, r7
 8005f0e:	0030      	movs	r0, r6
 8005f10:	f7ff ffc6 	bl	8005ea0 <sbrk_aligned>
 8005f14:	0004      	movs	r4, r0
 8005f16:	1c43      	adds	r3, r0, #1
 8005f18:	d11e      	bne.n	8005f58 <_malloc_r+0x74>
 8005f1a:	682c      	ldr	r4, [r5, #0]
 8005f1c:	0025      	movs	r5, r4
 8005f1e:	2d00      	cmp	r5, #0
 8005f20:	d14a      	bne.n	8005fb8 <_malloc_r+0xd4>
 8005f22:	6823      	ldr	r3, [r4, #0]
 8005f24:	0029      	movs	r1, r5
 8005f26:	18e3      	adds	r3, r4, r3
 8005f28:	0030      	movs	r0, r6
 8005f2a:	9301      	str	r3, [sp, #4]
 8005f2c:	f000 f880 	bl	8006030 <_sbrk_r>
 8005f30:	9b01      	ldr	r3, [sp, #4]
 8005f32:	4283      	cmp	r3, r0
 8005f34:	d143      	bne.n	8005fbe <_malloc_r+0xda>
 8005f36:	6823      	ldr	r3, [r4, #0]
 8005f38:	3703      	adds	r7, #3
 8005f3a:	1aff      	subs	r7, r7, r3
 8005f3c:	2303      	movs	r3, #3
 8005f3e:	439f      	bics	r7, r3
 8005f40:	3708      	adds	r7, #8
 8005f42:	2f0c      	cmp	r7, #12
 8005f44:	d200      	bcs.n	8005f48 <_malloc_r+0x64>
 8005f46:	270c      	movs	r7, #12
 8005f48:	0039      	movs	r1, r7
 8005f4a:	0030      	movs	r0, r6
 8005f4c:	f7ff ffa8 	bl	8005ea0 <sbrk_aligned>
 8005f50:	1c43      	adds	r3, r0, #1
 8005f52:	d034      	beq.n	8005fbe <_malloc_r+0xda>
 8005f54:	6823      	ldr	r3, [r4, #0]
 8005f56:	19df      	adds	r7, r3, r7
 8005f58:	6027      	str	r7, [r4, #0]
 8005f5a:	e013      	b.n	8005f84 <_malloc_r+0xa0>
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	dacb      	bge.n	8005ef8 <_malloc_r+0x14>
 8005f60:	230c      	movs	r3, #12
 8005f62:	2500      	movs	r5, #0
 8005f64:	6033      	str	r3, [r6, #0]
 8005f66:	0028      	movs	r0, r5
 8005f68:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005f6a:	6822      	ldr	r2, [r4, #0]
 8005f6c:	1bd1      	subs	r1, r2, r7
 8005f6e:	d420      	bmi.n	8005fb2 <_malloc_r+0xce>
 8005f70:	290b      	cmp	r1, #11
 8005f72:	d917      	bls.n	8005fa4 <_malloc_r+0xc0>
 8005f74:	19e2      	adds	r2, r4, r7
 8005f76:	6027      	str	r7, [r4, #0]
 8005f78:	42a3      	cmp	r3, r4
 8005f7a:	d111      	bne.n	8005fa0 <_malloc_r+0xbc>
 8005f7c:	602a      	str	r2, [r5, #0]
 8005f7e:	6863      	ldr	r3, [r4, #4]
 8005f80:	6011      	str	r1, [r2, #0]
 8005f82:	6053      	str	r3, [r2, #4]
 8005f84:	0030      	movs	r0, r6
 8005f86:	0025      	movs	r5, r4
 8005f88:	f000 f86c 	bl	8006064 <__malloc_unlock>
 8005f8c:	2207      	movs	r2, #7
 8005f8e:	350b      	adds	r5, #11
 8005f90:	1d23      	adds	r3, r4, #4
 8005f92:	4395      	bics	r5, r2
 8005f94:	1aea      	subs	r2, r5, r3
 8005f96:	429d      	cmp	r5, r3
 8005f98:	d0e5      	beq.n	8005f66 <_malloc_r+0x82>
 8005f9a:	1b5b      	subs	r3, r3, r5
 8005f9c:	50a3      	str	r3, [r4, r2]
 8005f9e:	e7e2      	b.n	8005f66 <_malloc_r+0x82>
 8005fa0:	605a      	str	r2, [r3, #4]
 8005fa2:	e7ec      	b.n	8005f7e <_malloc_r+0x9a>
 8005fa4:	6862      	ldr	r2, [r4, #4]
 8005fa6:	42a3      	cmp	r3, r4
 8005fa8:	d101      	bne.n	8005fae <_malloc_r+0xca>
 8005faa:	602a      	str	r2, [r5, #0]
 8005fac:	e7ea      	b.n	8005f84 <_malloc_r+0xa0>
 8005fae:	605a      	str	r2, [r3, #4]
 8005fb0:	e7e8      	b.n	8005f84 <_malloc_r+0xa0>
 8005fb2:	0023      	movs	r3, r4
 8005fb4:	6864      	ldr	r4, [r4, #4]
 8005fb6:	e7a7      	b.n	8005f08 <_malloc_r+0x24>
 8005fb8:	002c      	movs	r4, r5
 8005fba:	686d      	ldr	r5, [r5, #4]
 8005fbc:	e7af      	b.n	8005f1e <_malloc_r+0x3a>
 8005fbe:	230c      	movs	r3, #12
 8005fc0:	0030      	movs	r0, r6
 8005fc2:	6033      	str	r3, [r6, #0]
 8005fc4:	f000 f84e 	bl	8006064 <__malloc_unlock>
 8005fc8:	e7cd      	b.n	8005f66 <_malloc_r+0x82>
 8005fca:	46c0      	nop			; (mov r8, r8)
 8005fcc:	200002b4 	.word	0x200002b4

08005fd0 <_realloc_r>:
 8005fd0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005fd2:	0007      	movs	r7, r0
 8005fd4:	000e      	movs	r6, r1
 8005fd6:	0014      	movs	r4, r2
 8005fd8:	2900      	cmp	r1, #0
 8005fda:	d105      	bne.n	8005fe8 <_realloc_r+0x18>
 8005fdc:	0011      	movs	r1, r2
 8005fde:	f7ff ff81 	bl	8005ee4 <_malloc_r>
 8005fe2:	0005      	movs	r5, r0
 8005fe4:	0028      	movs	r0, r5
 8005fe6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005fe8:	2a00      	cmp	r2, #0
 8005fea:	d103      	bne.n	8005ff4 <_realloc_r+0x24>
 8005fec:	f7ff ff0e 	bl	8005e0c <_free_r>
 8005ff0:	0025      	movs	r5, r4
 8005ff2:	e7f7      	b.n	8005fe4 <_realloc_r+0x14>
 8005ff4:	f000 f83e 	bl	8006074 <_malloc_usable_size_r>
 8005ff8:	9001      	str	r0, [sp, #4]
 8005ffa:	4284      	cmp	r4, r0
 8005ffc:	d803      	bhi.n	8006006 <_realloc_r+0x36>
 8005ffe:	0035      	movs	r5, r6
 8006000:	0843      	lsrs	r3, r0, #1
 8006002:	42a3      	cmp	r3, r4
 8006004:	d3ee      	bcc.n	8005fe4 <_realloc_r+0x14>
 8006006:	0021      	movs	r1, r4
 8006008:	0038      	movs	r0, r7
 800600a:	f7ff ff6b 	bl	8005ee4 <_malloc_r>
 800600e:	1e05      	subs	r5, r0, #0
 8006010:	d0e8      	beq.n	8005fe4 <_realloc_r+0x14>
 8006012:	9b01      	ldr	r3, [sp, #4]
 8006014:	0022      	movs	r2, r4
 8006016:	429c      	cmp	r4, r3
 8006018:	d900      	bls.n	800601c <_realloc_r+0x4c>
 800601a:	001a      	movs	r2, r3
 800601c:	0031      	movs	r1, r6
 800601e:	0028      	movs	r0, r5
 8006020:	f7ff fed7 	bl	8005dd2 <memcpy>
 8006024:	0031      	movs	r1, r6
 8006026:	0038      	movs	r0, r7
 8006028:	f7ff fef0 	bl	8005e0c <_free_r>
 800602c:	e7da      	b.n	8005fe4 <_realloc_r+0x14>
	...

08006030 <_sbrk_r>:
 8006030:	2300      	movs	r3, #0
 8006032:	b570      	push	{r4, r5, r6, lr}
 8006034:	4d06      	ldr	r5, [pc, #24]	; (8006050 <_sbrk_r+0x20>)
 8006036:	0004      	movs	r4, r0
 8006038:	0008      	movs	r0, r1
 800603a:	602b      	str	r3, [r5, #0]
 800603c:	f7fa fc46 	bl	80008cc <_sbrk>
 8006040:	1c43      	adds	r3, r0, #1
 8006042:	d103      	bne.n	800604c <_sbrk_r+0x1c>
 8006044:	682b      	ldr	r3, [r5, #0]
 8006046:	2b00      	cmp	r3, #0
 8006048:	d000      	beq.n	800604c <_sbrk_r+0x1c>
 800604a:	6023      	str	r3, [r4, #0]
 800604c:	bd70      	pop	{r4, r5, r6, pc}
 800604e:	46c0      	nop			; (mov r8, r8)
 8006050:	200002bc 	.word	0x200002bc

08006054 <__malloc_lock>:
 8006054:	b510      	push	{r4, lr}
 8006056:	4802      	ldr	r0, [pc, #8]	; (8006060 <__malloc_lock+0xc>)
 8006058:	f000 f814 	bl	8006084 <__retarget_lock_acquire_recursive>
 800605c:	bd10      	pop	{r4, pc}
 800605e:	46c0      	nop			; (mov r8, r8)
 8006060:	200002c0 	.word	0x200002c0

08006064 <__malloc_unlock>:
 8006064:	b510      	push	{r4, lr}
 8006066:	4802      	ldr	r0, [pc, #8]	; (8006070 <__malloc_unlock+0xc>)
 8006068:	f000 f80d 	bl	8006086 <__retarget_lock_release_recursive>
 800606c:	bd10      	pop	{r4, pc}
 800606e:	46c0      	nop			; (mov r8, r8)
 8006070:	200002c0 	.word	0x200002c0

08006074 <_malloc_usable_size_r>:
 8006074:	1f0b      	subs	r3, r1, #4
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	1f18      	subs	r0, r3, #4
 800607a:	2b00      	cmp	r3, #0
 800607c:	da01      	bge.n	8006082 <_malloc_usable_size_r+0xe>
 800607e:	580b      	ldr	r3, [r1, r0]
 8006080:	18c0      	adds	r0, r0, r3
 8006082:	4770      	bx	lr

08006084 <__retarget_lock_acquire_recursive>:
 8006084:	4770      	bx	lr

08006086 <__retarget_lock_release_recursive>:
 8006086:	4770      	bx	lr

08006088 <_init>:
 8006088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800608a:	46c0      	nop			; (mov r8, r8)
 800608c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800608e:	bc08      	pop	{r3}
 8006090:	469e      	mov	lr, r3
 8006092:	4770      	bx	lr

08006094 <_fini>:
 8006094:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006096:	46c0      	nop			; (mov r8, r8)
 8006098:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800609a:	bc08      	pop	{r3}
 800609c:	469e      	mov	lr, r3
 800609e:	4770      	bx	lr
